
CREATE TYPE [AccountNumber]
	FROM NVARCHAR(15) NULL
go

CREATE TYPE [Flag]
	FROM BIT NOT NULL
go

CREATE TYPE [NameStyle]
	FROM BIT NOT NULL
go

CREATE TYPE [Name]
	FROM NVARCHAR(50) NULL
go

CREATE TYPE [OrderNumber]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Phone]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Domain_2146]
	FROM CHAR(18) NULL
go

CREATE TYPE [Domain_2148]
	FROM CHAR(18) NULL
go

CREATE TYPE [Domain_2181]
	FROM CHAR(18) NULL
go

CREATE TYPE [Domain_2235]
	FROM CHAR(18) NULL
go

CREATE TABLE [Address]
( 
	[AddressID]          int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[AddressLine1]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AddressLine2]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[City]               nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[PostalCode]         nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SpatialLocation]    geography  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Address_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Address_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [AddressType]
( 
	[AddressTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Domain_2148]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_AddressType_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_AddressType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BillOfMaterials]
( 
	[BillOfMaterialsID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductAssemblyID]  int  NULL ,
	[ComponentID]        int  NOT NULL ,
	[StartDate]          datetime  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_StartDate]
		 DEFAULT  getdate(),
	[EndDate]            datetime  NULL ,
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[BOMLevel]           smallint  NOT NULL ,
	[PerAssemblyQty]     decimal(8,2)  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_PerAssemblyQty]
		 DEFAULT  1.00,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [BillOfMaterials]
	 WITH CHECK ADD CONSTRAINT [CK_BillOfMaterials_PerAssemblyQty] CHECK  ( PerAssemblyQty >= 1.00 )
go

CREATE TABLE [BusinessEntity]
( 
	[BusinessEntityID]   int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AddressID]          int  NOT NULL ,
	[AddressTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityContact]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonID]           int  NOT NULL ,
	[ContactTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ContactType]
( 
	[ContactTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Domain_2148]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ContactType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegion]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Domain_2148]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegion_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegionCurrency]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegionCurrency_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CreditCard]
( 
	[CreditCardID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[CardType]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CardNumber]         nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ExpMonth]           tinyint  NOT NULL ,
	[ExpYear]            smallint  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CreditCard_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Culture]
( 
	[CultureID]          nchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Culture_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Currency]
( 
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Currency_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CurrencyRate]
( 
	[CurrencyRateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[CurrencyRateDate]   datetime  NOT NULL ,
	[FromCurrencyCode]   nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ToCurrencyCode]     nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AverageRate]        money  NOT NULL ,
	[EndOfDayRate]       money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CurrencyRate_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Customer]
( 
	[CustomerID]         int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[PersonID]           int  NULL ,
	[StoreID]            int  NULL ,
	[TerritoryID]        int  NULL ,
	[AccountNumber]      AS (isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),'')) COLLATE SQL_Latin1_General_CP1_CI_AS ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Customer_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Customer_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Department]
( 
	[DepartmentID]       smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Domain_2148]  NOT NULL ,
	[GroupName]          [Domain_2148]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Department_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Document]
( 
	[DocumentNode]       hierarchyid  NOT NULL ,
	[DocumentLevel]      AS ([DocumentNode].[GetLevel]()) ,
	[Title]              nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Owner]              int  NOT NULL ,
	[FolderFlag]         bit  NOT NULL 
	CONSTRAINT [DF_Document_FolderFlag]
		 DEFAULT  0,
	[FileName]           nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[FileExtension]      nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Revision]           nchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ChangeNumber]       int  NOT NULL 
	CONSTRAINT [DF_Document_ChangeNumber]
		 DEFAULT  0,
	[Status]             tinyint  NOT NULL ,
	[DocumentSummary]    nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Document]           varbinary(max)  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Document_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Document_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Document]
	 WITH CHECK ADD CONSTRAINT [CK_Document_Status] CHECK  ( Status BETWEEN 1 AND 3 )
go

CREATE TABLE [E_82]
( 
	[a]                  char(18)  NULL 
)
go

CREATE TABLE [EmailAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[EmailAddressID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_EmailAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmailAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Employee]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[NationalIDNumber]   nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[LoginID]            nvarchar(256) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[OrganizationNode]   hierarchyid  NULL ,
	[OrganizationLevel]  AS ([OrganizationNode].[GetLevel]()) ,
	[JobTitle]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[BirthDate]          date  NOT NULL ,
	[MaritalStatus]      nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Gender]             nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[HireDate]           date  NOT NULL ,
	[SalariedFlag]       [Domain_2235]  NOT NULL 
	CONSTRAINT [DF_Employee_SalariedFlag]
		 DEFAULT  1,
	[VacationHours]      smallint  NOT NULL 
	CONSTRAINT [DF_Employee_VacationHours]
		 DEFAULT  0.00,
	[SickLeaveHours]     smallint  NOT NULL 
	CONSTRAINT [DF_Employee_SickLeaveHours]
		 DEFAULT  0.00,
	[CurrentFlag]        [Domain_2235]  NOT NULL 
	CONSTRAINT [DF_Employee_CurrentFlag]
		 DEFAULT  1,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Employee_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Employee_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_BirthDate] CHECK  ( BirthDate BETWEEN '1930-01-01' AND 'dateadd(year,(-18),getdate' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_MaritalStatus] CHECK  ( [MaritalStatus]='S' OR [MaritalStatus]='M' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_Gender] CHECK  ( [Gender]='F' OR [Gender]='M' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_HireDate] CHECK  ( HireDate BETWEEN '1996-07-01' AND 'dateadd(day,(1),getdate' )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_VacationHours] CHECK  ( VacationHours BETWEEN -40 AND 240 )
go

ALTER TABLE [Employee]
	 WITH CHECK ADD CONSTRAINT [CK_Employee_SickLeaveHours] CHECK  ( SickLeaveHours BETWEEN 0 AND 120 )
go

CREATE TABLE [EmployeeDepartmentHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[DepartmentID]       smallint  NOT NULL ,
	[ShiftID]            tinyint  NOT NULL ,
	[StartDate]          date  NOT NULL ,
	[EndDate]            date  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmployeeDepartmentHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [EmployeePayHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[RateChangeDate]     datetime  NOT NULL ,
	[Rate_Col12]         money  NOT NULL ,
	[PayFrequency]       tinyint  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmployeePayHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [EmployeePayHistory]
	 WITH CHECK ADD CONSTRAINT [CK_EmployeePayHistory_Rate] CHECK  ( Rate_Col12 BETWEEN 6.50 AND 200.00 )
go

ALTER TABLE [EmployeePayHistory]
	 WITH CHECK ADD CONSTRAINT [CK_EmployeePayHistory_PayFrequency] CHECK  ( [PayFrequency]=2 OR [PayFrequency]=1 )
go

CREATE TABLE [Illustration]
( 
	[IllustrationID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Diagram]            xml  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Illustration_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [JobCandidate]
( 
	[JobCandidateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[BusinessEntityID]   int  NULL ,
	[Resume]             xml ( CONTENT [HRResumeSchemaCollection] ) NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_JobCandidate_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Location]
( 
	[LocationID]         smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CostRate]           smallmoney  NOT NULL 
	CONSTRAINT [DF_Location_CostRate]
		 DEFAULT  0.00,
	[Availability]       decimal(8,2)  NOT NULL 
	CONSTRAINT [DF_Location_Availability]
		 DEFAULT  0.00,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Location_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Location]
	 WITH CHECK ADD CONSTRAINT [CK_Location_CostRate] CHECK  ( CostRate >= 0.00 )
go

ALTER TABLE [Location]
	 WITH CHECK ADD CONSTRAINT [CK_Location_Availability] CHECK  ( Availability >= 0.00 )
go

CREATE TABLE [Person]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonType]         nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[NameStyle]          [Domain_2146]  NOT NULL 
	CONSTRAINT [DF_Person_NameStyle]
		 DEFAULT  0.00,
	[Title]              nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[FirstName]          [Domain_2148]  NOT NULL ,
	[MiddleName]         [Domain_2148]  NULL ,
	[LastName]           [Domain_2148]  NOT NULL ,
	[Suffix]             nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[EmailPromotion]     int  NOT NULL 
	CONSTRAINT [DF_Person_EmailPromotion]
		 DEFAULT  0.00,
	[AdditionalContactInfo] xml ( CONTENT [AdditionalContactInfoSchemaCollection] ) NULL ,
	[Demographics]       xml ( CONTENT [IndividualSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Person_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Person_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_PersonType] CHECK  ( [PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC') )
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_EmailPromotion] CHECK  ( EmailPromotion BETWEEN 0 AND 2 )
go

CREATE TABLE [PersonCreditCard]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[CreditCardID]       int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonCreditCard_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PersonPhone]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PhoneNumber]        [Domain_2181]  NOT NULL ,
	[PhoneNumberTypeID]  int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonPhone_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PhoneNumberType]
( 
	[PhoneNumberTypeID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Domain_2148]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PhoneNumberType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Product]
( 
	[ProductID]          int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ProductNumber]      nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[MakeFlag]           [Flag]  NOT NULL 
	CONSTRAINT [DF_Product_MakeFlag]
		 DEFAULT  1,
	[FinishedGoodsFlag]  [Flag]  NOT NULL 
	CONSTRAINT [DF_Product_FinishedGoodsFlag]
		 DEFAULT  1,
	[Color]              nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[SafetyStockLevel]   smallint  NOT NULL ,
	[ReorderPoint]       smallint  NOT NULL ,
	[StandardCost]       money  NOT NULL ,
	[ListPrice]          money  NOT NULL ,
	[Size]               nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[SizeUnitMeasureCode] nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[WeightUnitMeasureCode] nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Weight]             decimal(8,2)  NULL ,
	[DaysToManufacture]  int  NOT NULL ,
	[ProductLine]        nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Class]              nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Style]              nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ProductSubcategoryID] int  NULL ,
	[ProductModelID]     int  NULL ,
	[SellStartDate]      datetime  NOT NULL ,
	[SellEndDate]        datetime  NULL ,
	[DiscontinuedDate]   datetime  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Product_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Product_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_SafetyStockLevel] CHECK  ( [SafetyStockLevel]>(0) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ReorderPoint] CHECK  ( [ReorderPoint]>(0) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_StandardCost] CHECK  ( StandardCost >= 0.00 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ListPrice] CHECK  ( ListPrice >= 0.00 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Weight] CHECK  ( [Weight]>(0.00) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_DaysToManufacture] CHECK  ( DaysToManufacture >= 0 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ProductLine] CHECK  ( upper([ProductLine])='R' OR upper([ProductLine])='M' OR upper([ProductLine])='T' OR upper([ProductLine])='S' OR [ProductLine] IS NULL )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Class] CHECK  ( upper([Class])='H' OR upper([Class])='M' OR upper([Class])='L' OR [Class] IS NULL )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Style] CHECK  ( upper([Style])='U' OR upper([Style])='M' OR upper([Style])='W' OR [Style] IS NULL )
go

CREATE TABLE [ProductCategory]
( 
	[ProductCategoryID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductCategory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductCategory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductCostHistory]
( 
	[ProductID]          int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[StandardCost]       money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductCostHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductCostHistory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductCostHistory_StandardCost] CHECK  ( StandardCost >= 0.00 )
go

CREATE TABLE [ProductDescription]
( 
	[ProductDescriptionID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[Description]        nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductDescription_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductDescription_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductDocument]
( 
	[ProductID]          int  NOT NULL ,
	[DocumentNode]       hierarchyid  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductDocument_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductInventory]
( 
	[ProductID]          int  NOT NULL ,
	[LocationID]         smallint  NOT NULL ,
	[Shelf]              nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Bin]                tinyint  NOT NULL ,
	[Quantity]           smallint  NOT NULL 
	CONSTRAINT [DF_ProductInventory_Quantity]
		 DEFAULT  0,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductInventory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductInventory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductInventory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductInventory_Shelf] CHECK  ( [Shelf] like '[A-Za-z]' OR [Shelf]='N/A' )
go

ALTER TABLE [ProductInventory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductInventory_Bin] CHECK  ( Bin BETWEEN 0 AND 100 )
go

CREATE TABLE [ProductListPriceHistory]
( 
	[ProductID]          int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[ListPrice]          money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductListPriceHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductListPriceHistory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductListPriceHistory_ListPrice] CHECK  ( [ListPrice]>(0.00) )
go

CREATE TABLE [ProductModel]
( 
	[ProductModelID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CatalogDescription] xml ( CONTENT [ProductDescriptionSchemaCollection] ) NULL ,
	[Instructions]       xml ( CONTENT [ManuInstructionsSchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductModel_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModel_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductModelIllustration]
( 
	[ProductModelID]     int  NOT NULL ,
	[IllustrationID]     int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModelIllustration_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductModelProductDescriptionCulture]
( 
	[ProductModelID]     int  NOT NULL ,
	[ProductDescriptionID] int  NOT NULL ,
	[CultureID]          nchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModelProductDescriptionCulture_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductPhoto]
( 
	[ProductPhotoID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[ThumbNailPhoto]     varbinary(max)  NULL ,
	[ThumbnailPhotoFileName] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[LargePhoto]         varbinary(max)  NULL ,
	[LargePhotoFileName] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductPhoto_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductProductPhoto]
( 
	[ProductID]          int  NOT NULL ,
	[ProductPhotoID]     int  NOT NULL ,
	[Primary]            [Flag]  NOT NULL 
	CONSTRAINT [DF_ProductProductPhoto_Primary]
		 DEFAULT  0,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductProductPhoto_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductReview]
( 
	[ProductReviewID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReviewerName]       [Name]  NOT NULL ,
	[ReviewDate]         datetime  NOT NULL 
	CONSTRAINT [DF_ProductReview_ReviewDate]
		 DEFAULT  getdate(),
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Rating]             int  NOT NULL ,
	[Comments]           nvarchar(3850) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductReview_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductReview]
	 WITH CHECK ADD CONSTRAINT [CK_ProductReview_Rating] CHECK  ( Rating BETWEEN 1 AND 5 )
go

CREATE TABLE [ProductSubcategory]
( 
	[ProductSubcategoryID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductCategoryID]  int  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductSubcategory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductSubcategory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductVendor]
( 
	[ProductID]          int  NOT NULL ,
	[BusinessEntityID]   int  NOT NULL ,
	[AverageLeadTime]    int  NOT NULL ,
	[StandardPrice]      money  NOT NULL ,
	[LastReceiptCost]    money  NULL ,
	[LastReceiptDate]    datetime  NULL ,
	[MinOrderQty]        int  NOT NULL ,
	[MaxOrderQty]        int  NOT NULL ,
	[OnOrderQty]         int  NULL ,
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductVendor_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_AverageLeadTime] CHECK  ( AverageLeadTime >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_StandardPrice] CHECK  ( [StandardPrice]>(0.00) )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_LastReceiptCost] CHECK  ( [LastReceiptCost]>(0.00) )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_MinOrderQty] CHECK  ( MinOrderQty >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_MaxOrderQty] CHECK  ( MaxOrderQty >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_OnOrderQty] CHECK  ( OnOrderQty >= 0 )
go

CREATE TABLE [PurchaseOrderDetail]
( 
	[PurchaseOrderID]    int  NOT NULL ,
	[PurchaseOrderDetailID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[DueDate]            datetime  NOT NULL ,
	[OrderQty]           smallint  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[UnitPrice]          money  NOT NULL ,
	[LineTotal]          AS (isnull([OrderQty]*[UnitPrice],(0.00))) ,
	[ReceivedQty]        decimal(8,2)  NOT NULL ,
	[RejectedQty]        decimal(8,2)  NOT NULL ,
	[StockedQty]         AS (isnull([ReceivedQty]-[RejectedQty],(0.00))) ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderDetail_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_UnitPrice] CHECK  ( UnitPrice >= 0.00 )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_ReceivedQty] CHECK  ( ReceivedQty >= 0.00 )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_RejectedQty] CHECK  ( RejectedQty >= 0.00 )
go

CREATE TABLE [PurchaseOrderHeader]
( 
	[PurchaseOrderID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[RevisionNumber]     tinyint  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_RevisionNumber]
		 DEFAULT  0,
	[Status]             tinyint  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_Status]
		 DEFAULT  1,
	[EmployeeID]         int  NOT NULL ,
	[VendorID]           int  NOT NULL ,
	[ShipMethodID]       int  NOT NULL ,
	[OrderDate]          datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_OrderDate]
		 DEFAULT  getdate(),
	[ShipDate]           datetime  NULL ,
	[SubTotal]           money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_SubTotal]
		 DEFAULT  0.00,
	[TaxAmt]             money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_TaxAmt]
		 DEFAULT  0.00,
	[Freight]            money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_Freight]
		 DEFAULT  0.00,
	[TotalDue]           AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))) PERSISTED NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_Status] CHECK  ( Status BETWEEN 1 AND 4 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_SubTotal] CHECK  ( SubTotal >= 0.00 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_TaxAmt] CHECK  ( TaxAmt >= 0.00 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_Freight] CHECK  ( Freight >= 0.00 )
go

CREATE TABLE [SalesOrderDetail]
( 
	[SalesOrderID]       int  NOT NULL ,
	[SalesOrderDetailID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[CarrierTrackingNumber] nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[OrderQty]           smallint  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[SpecialOfferID]     int  NOT NULL ,
	[UnitPrice]          money  NOT NULL ,
	[UnitPriceDiscount]  money  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_UnitPriceDiscount]
		 DEFAULT  0.0,
	[LineTotal]          AS (isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0))) ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_UnitPrice] CHECK  ( UnitPrice >= 0.00 )
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_UnitPriceDiscount] CHECK  ( UnitPriceDiscount >= 0.00 )
go

CREATE TABLE [SalesOrderHeader]
( 
	[SalesOrderID]       int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[RevisionNumber]     tinyint  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_RevisionNumber]
		 DEFAULT  0,
	[OrderDate]          datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_OrderDate]
		 DEFAULT  getdate(),
	[DueDate]            datetime  NOT NULL ,
	[ShipDate]           datetime  NULL ,
	[Status]             tinyint  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_Status]
		 DEFAULT  1,
	[OnlineOrderFlag]    [Flag]  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_OnlineOrderFlag]
		 DEFAULT  1,
	[SalesOrderNumber]   AS (isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***')) COLLATE SQL_Latin1_General_CP1_CI_AS ,
	[PurchaseOrderNumber] [OrderNumber]  NULL ,
	[AccountNumber]      [AccountNumber]  NULL ,
	[CustomerID]         int  NOT NULL ,
	[SalesPersonID]      int  NULL ,
	[TerritoryID]        int  NULL ,
	[BillToAddressID]    int  NOT NULL ,
	[ShipToAddressID]    int  NOT NULL ,
	[ShipMethodID]       int  NOT NULL ,
	[CreditCardID]       int  NULL ,
	[CreditCardApprovalCode] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[CurrencyRateID]     int  NULL ,
	[SubTotal]           money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_SubTotal]
		 DEFAULT  0.00,
	[TaxAmt]             money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_TaxAmt]
		 DEFAULT  0.00,
	[Freight]            money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_Freight]
		 DEFAULT  0.00,
	[TotalDue]           AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))) ,
	[Comment]            nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_Status] CHECK  ( Status BETWEEN 0 AND 8 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_SubTotal] CHECK  ( SubTotal >= 0.00 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_TaxAmt] CHECK  ( TaxAmt >= 0.00 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_Freight] CHECK  ( Freight >= 0.00 )
go

CREATE TABLE [SalesOrderHeaderSalesReason]
( 
	[SalesOrderID]       int  NOT NULL ,
	[SalesReasonID]      int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeaderSalesReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesPerson]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[TerritoryID]        int  NULL ,
	[SalesQuota]         money  NULL ,
	[Bonus]              money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_Bonus]
		 DEFAULT  0.00,
	[CommissionPct]      smallmoney  NOT NULL 
	CONSTRAINT [DF_SalesPerson_CommissionPct]
		 DEFAULT  0.00,
	[SalesYTD]           money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_SalesYTD]
		 DEFAULT  0.00,
	[SalesLastYear]      money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_SalesLastYear]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesPerson_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesPerson_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesQuota] CHECK  ( [SalesQuota]>(0.00) )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_Bonus] CHECK  ( Bonus >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_CommissionPct] CHECK  ( CommissionPct >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesYTD] CHECK  ( SalesYTD >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesLastYear] CHECK  ( SalesLastYear >= 0.00 )
go

CREATE TABLE [SalesPersonQuotaHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[QuotaDate]          datetime  NOT NULL ,
	[SalesQuota]         money  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesPersonQuotaHistory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesPersonQuotaHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesPersonQuotaHistory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPersonQuotaHistory_SalesQuota] CHECK  ( [SalesQuota]>(0.00) )
go

CREATE TABLE [SalesReason]
( 
	[SalesReasonID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ReasonType]         [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesTaxRate]
( 
	[SalesTaxRateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[TaxType]            tinyint  NOT NULL ,
	[TaxRate]            smallmoney  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_TaxRate]
		 DEFAULT  0.00,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesTaxRate]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTaxRate_TaxType] CHECK  ( TaxType BETWEEN 1 AND 3 )
go

CREATE TABLE [SalesTerritory]
( 
	[TerritoryID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Group]              nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SalesYTD]           money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_SalesYTD]
		 DEFAULT  0.00,
	[SalesLastYear]      money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_SalesLastYear]
		 DEFAULT  0.00,
	[CostYTD]            money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_CostYTD]
		 DEFAULT  0.00,
	[CostLastYear]       money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_CostLastYear]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_SalesYTD] CHECK  ( SalesYTD >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_SalesLastYear] CHECK  ( SalesLastYear >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_CostYTD] CHECK  ( CostYTD >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_CostLastYear] CHECK  ( CostLastYear >= 0.00 )
go

CREATE TABLE [SalesTerritoryHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTerritoryHistory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTerritoryHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ScrapReason]
( 
	[ScrapReasonID]      smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ScrapReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Shift]
( 
	[ShiftID]            tinyint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Domain_2148]  NOT NULL ,
	[StartTime]          time(7)  NOT NULL ,
	[EndTime]            time(7)  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Shift_ModifiedDate]
		 DEFAULT  getdate(),
	[TestCol]            int  NOT NULL ,
	[MobileNo]           char(18) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Mobile02]           nchar(9) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE [ShipMethod]
( 
	[ShipMethodID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ShipBase]           money  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ShipBase]
		 DEFAULT  0.00,
	[ShipRate]           money  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ShipRate]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ShipMethod_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ShipMethod]
	 WITH CHECK ADD CONSTRAINT [CK_ShipMethod_ShipBase] CHECK  ( [ShipBase]>(0.00) )
go

ALTER TABLE [ShipMethod]
	 WITH CHECK ADD CONSTRAINT [CK_ShipMethod_ShipRate] CHECK  ( [ShipRate]>(0.00) )
go

CREATE TABLE [ShoppingCartItem]
( 
	[ShoppingCartItemID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[ShoppingCartID]     nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_Quantity]
		 DEFAULT  1,
	[ProductID]          int  NOT NULL ,
	[DateCreated]        datetime  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_DateCreated]
		 DEFAULT  getdate(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ShoppingCartItem]
	 WITH CHECK ADD CONSTRAINT [CK_ShoppingCartItem_Quantity] CHECK  ( Quantity >= 1 )
go

CREATE TABLE [SpecialOffer]
( 
	[SpecialOfferID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Description]        nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[DiscountPct]        smallmoney  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_DiscountPct]
		 DEFAULT  0.00,
	[Type]               nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Category]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NOT NULL ,
	[MinQty]             int  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_MinQty]
		 DEFAULT  0,
	[MaxQty]             int  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_DiscountPct] CHECK  ( DiscountPct >= 0.00 )
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_MinQty] CHECK  ( MinQty >= 0 )
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_MaxQty] CHECK  ( MaxQty >= 0 )
go

CREATE TABLE [SpecialOfferProduct]
( 
	[SpecialOfferID]     int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SpecialOfferProduct_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SpecialOfferProduct_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [specl_char_test]
( 
	[primary_col_]       char(18) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[col_2]              char(18) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[new_mobileNo]       char(20)  NULL 
	CONSTRAINT [Default_Value_887_1935491893]
		 DEFAULT  '0000000',
	[BusinessEntityID]   int  NOT NULL 
)
go

CREATE TABLE [StateProvince]
( 
	[StateProvinceID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceCode]  nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[IsOnlyStateProvinceFlag] [Domain_2235]  NOT NULL 
	CONSTRAINT [DF_StateProvince_IsOnlyStateProvinceFlag]
		 DEFAULT  1,
	[Name]               [Domain_2148]  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_StateProvince_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_StateProvince_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Store]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[SalesPersonID]      int  NULL ,
	[Demographics]       xml ( CONTENT [StoreSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Store_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Store_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_pwd]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PasswordHash]       varchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[PasswordSalt]       varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Password_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Password_ModifiedDate]
		 DEFAULT  getdate(),
	[OTP]                char(18) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE [TransactionHistory]
( 
	[TransactionID]      int  IDENTITY ( 100000,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReferenceOrderID]   int  NOT NULL ,
	[ReferenceOrderLineID] int  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_ReferenceOrderLineID]
		 DEFAULT  0,
	[TransactionDate]    datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_TransactionDate]
		 DEFAULT  getdate(),
	[TransactionType]    nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL ,
	[ActualCost]         money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [TransactionHistory]
	 WITH CHECK ADD CONSTRAINT [CK_TransactionHistory_TransactionType] CHECK  ( [TransactionType]='P' OR [TransactionType]='S' OR [TransactionType]='W' )
go

CREATE TABLE [TransactionHistoryArchive]
( 
	[TransactionID]      int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReferenceOrderID]   int  NOT NULL ,
	[ReferenceOrderLineID] int  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_ReferenceOrderLineID]
		 DEFAULT  0,
	[TransactionDate]    datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_TransactionDate]
		 DEFAULT  getdate(),
	[TransactionType]    nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL ,
	[ActualCost]         money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_ModifiedDate]
		 DEFAULT  getdate(),
	[email]              char(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

ALTER TABLE [TransactionHistoryArchive]
	 WITH CHECK ADD CONSTRAINT [CK_TransactionHistoryArchive_TransactionType] CHECK  ( [TransactionType]='P' OR [TransactionType]='S' OR [TransactionType]='W' )
go

CREATE TABLE [UnitMeasure]
( 
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_UnitMeasure_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Vendor]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AccountNumber]      [AccountNumber]  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CreditRating]       tinyint  NOT NULL ,
	[PreferredVendorStatus] [Flag]  NOT NULL 
	CONSTRAINT [DF_Vendor_PreferredVendorStatus]
		 DEFAULT  1,
	[ActiveFlag]         [Flag]  NOT NULL 
	CONSTRAINT [DF_Vendor_ActiveFlag]
		 DEFAULT  1,
	[PurchasingWebServiceURL] nvarchar(1024) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Vendor_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Vendor]
	 WITH CHECK ADD CONSTRAINT [CK_Vendor_CreditRating] CHECK  ( CreditRating BETWEEN 1 AND 5 )
go

CREATE TABLE [WorkOrder]
( 
	[WorkOrderID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[OrderQty]           int  NOT NULL ,
	[StockedQty]         AS (isnull([OrderQty]-[ScrappedQty],(0))) ,
	[ScrappedQty]        smallint  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[DueDate]            datetime  NOT NULL ,
	[ScrapReasonID]      smallint  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_WorkOrder_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [WorkOrder]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrder_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [WorkOrder]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrder_ScrappedQty] CHECK  ( ScrappedQty >= 0 )
go

CREATE TABLE [WorkOrderRouting]
( 
	[WorkOrderID]        int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[OperationSequence]  smallint  NOT NULL ,
	[LocationID]         smallint  NOT NULL ,
	[ScheduledStartDate] datetime  NOT NULL ,
	[ScheduledEndDate]   datetime  NOT NULL ,
	[ActualStartDate]    datetime  NULL ,
	[ActualEndDate]      datetime  NULL ,
	[ActualResourceHrs]  decimal(9,4)  NULL ,
	[PlannedCost]        money  NOT NULL ,
	[ActualCost]         money  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_WorkOrderRouting_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_ActualResourceHrs] CHECK  ( ActualResourceHrs >= 0.0000 )
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_PlannedCost] CHECK  ( [PlannedCost]>(0.00) )
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_ActualCost] CHECK  ( [ActualCost]>(0.00) )
go

ALTER TABLE [Address]
	ADD CONSTRAINT [PK_Address_AddressID] PRIMARY KEY  CLUSTERED ([AddressID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Address_rowguid] ON [Address]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode] ON [Address]
( 
	[AddressLine1]        ASC,
	[AddressLine2]        ASC,
	[City]                ASC,
	[StateProvinceID]     ASC,
	[PostalCode]          ASC
)
go

ALTER TABLE [AddressType]
	ADD CONSTRAINT [PK_AddressType_AddressTypeID] PRIMARY KEY  CLUSTERED ([AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_rowguid] ON [AddressType]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_Name] ON [AddressType]
( 
	[Name]                ASC
)
go

ALTER TABLE [BillOfMaterials]
	ADD CONSTRAINT [PK_BillOfMaterials_BillOfMaterialsID] PRIMARY KEY  NONCLUSTERED ([BillOfMaterialsID] ASC)
go

CREATE UNIQUE CLUSTERED INDEX [AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate] ON [BillOfMaterials]
( 
	[ProductAssemblyID]   ASC,
	[ComponentID]         ASC,
	[StartDate]           ASC
)
go

ALTER TABLE [BusinessEntity]
	ADD CONSTRAINT [PK_BusinessEntity_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntity_rowguid] ON [BusinessEntity]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityAddress]
	ADD CONSTRAINT [PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[AddressID] ASC,[AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityAddress_rowguid] ON [BusinessEntityAddress]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityContact]
	ADD CONSTRAINT [PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PersonID] ASC,[ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityContact_rowguid] ON [BusinessEntityContact]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ContactType]
	ADD CONSTRAINT [PK_ContactType_ContactTypeID] PRIMARY KEY  CLUSTERED ([ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ContactType_Name] ON [ContactType]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegion]
	ADD CONSTRAINT [PK_CountryRegion_CountryRegionCode] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CountryRegion_Name] ON [CountryRegion]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegionCurrency]
	ADD CONSTRAINT [PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC,[CurrencyCode] ASC)
go

ALTER TABLE [CreditCard]
	ADD CONSTRAINT [PK_CreditCard_CreditCardID] PRIMARY KEY  CLUSTERED ([CreditCardID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CreditCard_CardNumber] ON [CreditCard]
( 
	[CardNumber]          ASC
)
go

ALTER TABLE [Culture]
	ADD CONSTRAINT [PK_Culture_CultureID] PRIMARY KEY  CLUSTERED ([CultureID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Culture_Name] ON [Culture]
( 
	[Name]                ASC
)
go

ALTER TABLE [Currency]
	ADD CONSTRAINT [PK_Currency_CurrencyCode] PRIMARY KEY  CLUSTERED ([CurrencyCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Currency_Name] ON [Currency]
( 
	[Name]                ASC
)
go

ALTER TABLE [CurrencyRate]
	ADD CONSTRAINT [PK_CurrencyRate_CurrencyRateID] PRIMARY KEY  CLUSTERED ([CurrencyRateID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode] ON [CurrencyRate]
( 
	[CurrencyRateDate]    ASC,
	[FromCurrencyCode]    ASC,
	[ToCurrencyCode]      ASC
)
go

ALTER TABLE [Customer]
	ADD CONSTRAINT [PK_Customer_CustomerID] PRIMARY KEY  CLUSTERED ([CustomerID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Customer_rowguid] ON [Customer]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Customer_AccountNumber] ON [Customer]
( 
	[AccountNumber]       ASC
)
go

ALTER TABLE [Department]
	ADD CONSTRAINT [PK_Department_DepartmentID] PRIMARY KEY  CLUSTERED ([DepartmentID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Department_Name] ON [Department]
( 
	[Name]                ASC
)
go

ALTER TABLE [Document]
	ADD CONSTRAINT [PK_Document_DocumentNode] PRIMARY KEY  CLUSTERED ([DocumentNode] ASC)
go

ALTER TABLE [Document]
	ADD CONSTRAINT [UQ__Document__F73921F7C5112C2E] UNIQUE ([rowguid]  ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Document_DocumentLevel_DocumentNode] ON [Document]
( 
	[DocumentLevel]       ASC,
	[DocumentNode]        ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Document_rowguid] ON [Document]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Document_FileName_Revision] ON [Document]
( 
	[FileName]            ASC,
	[Revision]            ASC
)
go

ALTER TABLE [EmailAddress]
	ADD CONSTRAINT [PK_EmailAddress_BusinessEntityID_EmailAddressID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[EmailAddressID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_EmailAddress_EmailAddress] ON [EmailAddress]
( 
	[EmailAddress]        ASC
)
go

ALTER TABLE [Employee]
	ADD CONSTRAINT [PK_Employee_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Employee_LoginID] ON [Employee]
( 
	[LoginID]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Employee_NationalIDNumber] ON [Employee]
( 
	[NationalIDNumber]    ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Employee_rowguid] ON [Employee]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Employee_OrganizationNode] ON [Employee]
( 
	[OrganizationNode]    ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Employee_OrganizationLevel_OrganizationNode] ON [Employee]
( 
	[OrganizationLevel]   ASC,
	[OrganizationNode]    ASC
)
go

ALTER TABLE [EmployeeDepartmentHistory]
	ADD CONSTRAINT [PK_EmployeeDepartmentHistory_BusinessEntityID_StartDate_DepartmentID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[StartDate] ASC,[DepartmentID] ASC,[ShiftID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_EmployeeDepartmentHistory_ShiftID] ON [EmployeeDepartmentHistory]
( 
	[ShiftID]             ASC
)
go

ALTER TABLE [EmployeePayHistory]
	ADD CONSTRAINT [PK_EmployeePayHistory_BusinessEntityID_RateChangeDate] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[RateChangeDate] ASC)
go

ALTER TABLE [Illustration]
	ADD CONSTRAINT [PK_Illustration_IllustrationID] PRIMARY KEY  CLUSTERED ([IllustrationID] ASC)
go

ALTER TABLE [JobCandidate]
	ADD CONSTRAINT [PK_JobCandidate_JobCandidateID] PRIMARY KEY  CLUSTERED ([JobCandidateID] ASC)
go

ALTER TABLE [Location]
	ADD CONSTRAINT [PK_Location_LocationID] PRIMARY KEY  CLUSTERED ([LocationID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Location_Name] ON [Location]
( 
	[Name]                ASC
)
go

ALTER TABLE [Person]
	ADD CONSTRAINT [PK_Person_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Person_rowguid] ON [Person]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Person_LastName_FirstName_MiddleName] ON [Person]
( 
	[LastName]            ASC,
	[FirstName]           ASC,
	[MiddleName]          ASC
)
go

ALTER TABLE [PersonCreditCard]
	ADD CONSTRAINT [PK_PersonCreditCard_BusinessEntityID_CreditCardID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[CreditCardID] ASC)
go

ALTER TABLE [PersonPhone]
	ADD CONSTRAINT [PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PhoneNumber] ASC,[PhoneNumberTypeID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PersonPhone_PhoneNumber] ON [PersonPhone]
( 
	[PhoneNumber]         ASC
)
go

ALTER TABLE [PhoneNumberType]
	ADD CONSTRAINT [PK_PhoneNumberType_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([PhoneNumberTypeID] ASC)
go

ALTER TABLE [Product]
	ADD CONSTRAINT [PK_Product_ProductID] PRIMARY KEY  CLUSTERED ([ProductID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_ProductNumber] ON [Product]
( 
	[ProductNumber]       ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_Name] ON [Product]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_rowguid] ON [Product]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductCategory]
	ADD CONSTRAINT [PK_ProductCategory_ProductCategoryID] PRIMARY KEY  CLUSTERED ([ProductCategoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductCategory_Name] ON [ProductCategory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductCategory_rowguid] ON [ProductCategory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductCostHistory]
	ADD CONSTRAINT [PK_ProductCostHistory_ProductID_StartDate] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[StartDate] ASC)
go

ALTER TABLE [ProductDescription]
	ADD CONSTRAINT [PK_ProductDescription_ProductDescriptionID] PRIMARY KEY  CLUSTERED ([ProductDescriptionID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductDescription_rowguid] ON [ProductDescription]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductDocument]
	ADD CONSTRAINT [PK_ProductDocument_ProductID_DocumentNode] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[DocumentNode] ASC)
go

ALTER TABLE [ProductInventory]
	ADD CONSTRAINT [PK_ProductInventory_ProductID_LocationID] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[LocationID] ASC)
go

ALTER TABLE [ProductListPriceHistory]
	ADD CONSTRAINT [PK_ProductListPriceHistory_ProductID_StartDate] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[StartDate] ASC)
go

ALTER TABLE [ProductModel]
	ADD CONSTRAINT [PK_ProductModel_ProductModelID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductModel_Name] ON [ProductModel]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductModel_rowguid] ON [ProductModel]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductModelIllustration]
	ADD CONSTRAINT [PK_ProductModelIllustration_ProductModelID_IllustrationID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC,[IllustrationID] ASC)
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	ADD CONSTRAINT [PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC,[ProductDescriptionID] ASC,[CultureID] ASC)
go

ALTER TABLE [ProductPhoto]
	ADD CONSTRAINT [PK_ProductPhoto_ProductPhotoID] PRIMARY KEY  CLUSTERED ([ProductPhotoID] ASC)
go

ALTER TABLE [ProductProductPhoto]
	ADD CONSTRAINT [PK_ProductProductPhoto_ProductID_ProductPhotoID] PRIMARY KEY  NONCLUSTERED ([ProductID] ASC,[ProductPhotoID] ASC)
go

ALTER TABLE [ProductReview]
	ADD CONSTRAINT [PK_ProductReview_ProductReviewID] PRIMARY KEY  CLUSTERED ([ProductReviewID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_ProductReview_ProductID_Name] ON [ProductReview]
( 
	[ProductID]           ASC,
	[ReviewerName]        ASC
)
INCLUDE( [Comments] )
go

ALTER TABLE [ProductSubcategory]
	ADD CONSTRAINT [PK_ProductSubcategory_ProductSubcategoryID] PRIMARY KEY  CLUSTERED ([ProductSubcategoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductSubcategory_Name] ON [ProductSubcategory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductSubcategory_rowguid] ON [ProductSubcategory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductVendor]
	ADD CONSTRAINT [PK_ProductVendor_ProductID_BusinessEntityID] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[BusinessEntityID] ASC)
go

ALTER TABLE [PurchaseOrderDetail]
	ADD CONSTRAINT [PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID] PRIMARY KEY  CLUSTERED ([PurchaseOrderID] ASC,[PurchaseOrderDetailID] ASC)
go

ALTER TABLE [PurchaseOrderHeader]
	ADD CONSTRAINT [PK_PurchaseOrderHeader_PurchaseOrderID] PRIMARY KEY  CLUSTERED ([PurchaseOrderID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PurchaseOrderHeader_EmployeeID] ON [PurchaseOrderHeader]
( 
	[EmployeeID]          ASC
)
go

ALTER TABLE [SalesOrderDetail]
	ADD CONSTRAINT [PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC,[SalesOrderDetailID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderDetail_rowguid] ON [SalesOrderDetail]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_SalesOrderDetail_ProductID] ON [SalesOrderDetail]
( 
	[ProductID]           ASC
)
go

ALTER TABLE [SalesOrderHeader]
	ADD CONSTRAINT [PK_SalesOrderHeader_SalesOrderID] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderHeader_rowguid] ON [SalesOrderHeader]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderHeader_SalesOrderNumber] ON [SalesOrderHeader]
( 
	[SalesOrderNumber]    ASC
)
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	ADD CONSTRAINT [PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC,[SalesReasonID] ASC)
go

ALTER TABLE [SalesPerson]
	ADD CONSTRAINT [PK_SalesPerson_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesPerson_rowguid] ON [SalesPerson]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesPersonQuotaHistory]
	ADD CONSTRAINT [PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[QuotaDate] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesPersonQuotaHistory_rowguid] ON [SalesPersonQuotaHistory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesReason]
	ADD CONSTRAINT [PK_SalesReason_SalesReasonID] PRIMARY KEY  CLUSTERED ([SalesReasonID] ASC)
go

ALTER TABLE [SalesTaxRate]
	ADD CONSTRAINT [PK_SalesTaxRate_SalesTaxRateID] PRIMARY KEY  CLUSTERED ([SalesTaxRateID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTaxRate_StateProvinceID_TaxType] ON [SalesTaxRate]
( 
	[StateProvinceID]     ASC,
	[TaxType]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTaxRate_rowguid] ON [SalesTaxRate]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesTerritory]
	ADD CONSTRAINT [PK_SalesTerritory_TerritoryID] PRIMARY KEY  CLUSTERED ([TerritoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritory_Name] ON [SalesTerritory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritory_rowguid] ON [SalesTerritory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesTerritoryHistory]
	ADD CONSTRAINT [PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[StartDate] ASC,[TerritoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritoryHistory_rowguid] ON [SalesTerritoryHistory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ScrapReason]
	ADD CONSTRAINT [PK_ScrapReason_ScrapReasonID] PRIMARY KEY  CLUSTERED ([ScrapReasonID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ScrapReason_Name] ON [ScrapReason]
( 
	[Name]                ASC
)
go

ALTER TABLE [Shift]
	ADD CONSTRAINT [PK_Shift_ShiftID] PRIMARY KEY  CLUSTERED ([ShiftID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Shift_Name] ON [Shift]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Shift_StartTime_EndTime] ON [Shift]
( 
	[StartTime]           ASC,
	[EndTime]             ASC
)
go

ALTER TABLE [ShipMethod]
	ADD CONSTRAINT [PK_ShipMethod_ShipMethodID] PRIMARY KEY  CLUSTERED ([ShipMethodID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ShipMethod_Name] ON [ShipMethod]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ShipMethod_rowguid] ON [ShipMethod]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ShoppingCartItem]
	ADD CONSTRAINT [PK_ShoppingCartItem_ShoppingCartItemID] PRIMARY KEY  CLUSTERED ([ShoppingCartItemID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_ShoppingCartItem_ShoppingCartID_ProductID] ON [ShoppingCartItem]
( 
	[ShoppingCartID]      ASC,
	[ProductID]           ASC
)
go

ALTER TABLE [SpecialOffer]
	ADD CONSTRAINT [PK_SpecialOffer_SpecialOfferID] PRIMARY KEY  CLUSTERED ([SpecialOfferID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SpecialOffer_rowguid] ON [SpecialOffer]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SpecialOfferProduct]
	ADD CONSTRAINT [PK_SpecialOfferProduct_SpecialOfferID_ProductID] PRIMARY KEY  CLUSTERED ([SpecialOfferID] ASC,[ProductID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SpecialOfferProduct_rowguid] ON [SpecialOfferProduct]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [specl_char_test]
	ADD CONSTRAINT [XPKspecl_char_test] PRIMARY KEY  CLUSTERED ([primary_col_] ASC,[BusinessEntityID] ASC)
go

ALTER TABLE [StateProvince]
	ADD CONSTRAINT [PK_StateProvince_StateProvinceID] PRIMARY KEY  CLUSTERED ([StateProvinceID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_Name] ON [StateProvince]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_StateProvinceCode_CountryRegionCode] ON [StateProvince]
( 
	[StateProvinceCode]   ASC,
	[CountryRegionCode]   ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_rowguid] ON [StateProvince]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [Store]
	ADD CONSTRAINT [PK_Store_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Store_rowguid] ON [Store]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [tbl_pwd]
	ADD CONSTRAINT [PK_Password_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

ALTER TABLE [TransactionHistory]
	ADD CONSTRAINT [PK_TransactionHistory_TransactionID] PRIMARY KEY  CLUSTERED ([TransactionID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID] ON [TransactionHistory]
( 
	[ReferenceOrderID]    ASC,
	[ReferenceOrderLineID]  ASC
)
go

ALTER TABLE [TransactionHistoryArchive]
	ADD CONSTRAINT [PK_TransactionHistoryArchive_TransactionID] PRIMARY KEY  CLUSTERED ([TransactionID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistoryArchive_ProductID] ON [TransactionHistoryArchive]
( 
	[ProductID]           ASC
)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID] ON [TransactionHistoryArchive]
( 
	[ReferenceOrderID]    ASC,
	[ReferenceOrderLineID]  ASC
)
go

ALTER TABLE [UnitMeasure]
	ADD CONSTRAINT [PK_UnitMeasure_UnitMeasureCode] PRIMARY KEY  CLUSTERED ([UnitMeasureCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_UnitMeasure_Name] ON [UnitMeasure]
( 
	[Name]                ASC
)
go

ALTER TABLE [Vendor]
	ADD CONSTRAINT [PK_Vendor_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Vendor_AccountNumber] ON [Vendor]
( 
	[AccountNumber]       ASC
)
go

ALTER TABLE [WorkOrder]
	ADD CONSTRAINT [PK_WorkOrder_WorkOrderID] PRIMARY KEY  CLUSTERED ([WorkOrderID] ASC)
go

ALTER TABLE [WorkOrderRouting]
	ADD CONSTRAINT [PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence] PRIMARY KEY  CLUSTERED ([WorkOrderID] ASC,[ProductID] ASC,[OperationSequence] ASC)
go

CREATE NONCLUSTERED INDEX [IX_WorkOrderRouting_ProductID] ON [WorkOrderRouting]
( 
	[ProductID]           ASC
)
go

CREATE VIEW [Sales].[vIndividualCustomer] AS  SELECT p.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.Name AS StateProvinceName, a.[PostalCode], cr.Name AS CountryRegionName, p.[Demographics] FROM Person.Person AS p   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = p.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]   INNER JOIN   Sales.Customer AS c ON c.[PersonID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID] WHERE c.StoreID IS NULL
go

CREATE VIEW [Sales].[vPersonDemographics] AS  SELECT p.[BusinessEntityID],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalPurchaseYTD[1]' , 'money' )  AS [TotalPurchaseYTD],  CONVERT(datetime,  REPLACE(  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        DateFirstPurchase[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [DateFirstPurchase],  CONVERT(datetime,  REPLACE(  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        BirthDate[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [BirthDate],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        MaritalStatus[1]' , 'nvarchar(1)' )  AS [MaritalStatus],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        YearlyIncome[1]' , 'nvarchar(30)' )  AS [YearlyIncome],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Gender[1]' , 'nvarchar(1)' )  AS [Gender],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalChildren[1]' , 'integer' )  AS [TotalChildren],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberChildrenAtHome[1]' , 'integer' )  AS [NumberChildrenAtHome],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Education[1]' , 'nvarchar(30)' )  AS [Education],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Occupation[1]' , 'nvarchar(30)' )  AS [Occupation],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        HomeOwnerFlag[1]' , 'bit' )  AS [HomeOwnerFlag],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberCarsOwned[1]' , 'integer' )  AS [NumberCarsOwned] FROM Person.Person AS p   CROSS APPLY   p.Demographics.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
    /IndividualSurvey' ) AS [IndividualSurvey] 
(ref)
 WHERE [Demographics] IS NOT NULL
go

CREATE VIEW [Production].[vProductAndDescription] WITH SCHEMABINDING  AS  SELECT p.[ProductID], p.[Name], pm.[Name] AS [ProductModel], pmx.[CultureID], pd.[Description] FROM Production.Product AS p   INNER JOIN   Production.ProductModel AS pm ON p.[ProductModelID] = pm.[ProductModelID]   INNER JOIN   Production.ProductModelProductDescriptionCulture AS pmx ON pm.[ProductModelID] = pmx.[ProductModelID]   INNER JOIN   Production.ProductDescription AS pd ON pmx.[ProductDescriptionID] = pd.[ProductDescriptionID]
go

CREATE VIEW [vProductModelCatalogDescription]([ProductModelID],[Name],[Summary],[Manufacturer],[Copyright],[ProductURL],[WarrantyPeriod],[WarrantyDescription],[NoOfYears],[MaintenanceDescription],[Wheel],[Saddle],[Pedal],[BikeFrame],[Crankset],[PictureAngle],[PictureSize],[ProductPhotoID],[Material],[Color],[ProductLine],[Style],[RiderExperience],[rowguid],[ModifiedDate])
AS
SELECT [ProductModel].[ProductModelID],[ProductModel].[Name], [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace html="http://www.w3.org/1999/xhtml"; 
        (/p1:ProductDescription/p1:Summary/html:p)[1]' , 'nvarchar(max)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:Name)[1]' , 'nvarchar(max)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:Copyright)[1]' , 'nvarchar(30)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Manufacturer/p1:ProductURL)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Warranty/wm:WarrantyPeriod)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Warranty/wm:Description)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Maintenance/wm:NoOfYears)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wm="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelWarrAndMain"; 
        (/p1:ProductDescription/p1:Features/wm:Maintenance/wm:Description)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:wheel)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:saddle)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:pedal)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:BikeFrame)[1]' , 'nvarchar(max)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        declare namespace wf="http://www.adventure-works.com/schemas/OtherFeatures"; 
        (/p1:ProductDescription/p1:Features/wf:crankset)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:Angle)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:Size)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Picture/p1:ProductPhotoID)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Material)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Color)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/ProductLine)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/Style)[1]' , 'nvarchar(256)' ) , [CatalogDescription].value( N'declare namespace p1="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelDescription"; 
        (/p1:ProductDescription/p1:Specifications/RiderExperience)[1]' , 'nvarchar(1024)' ) ,[ProductModel].[rowguid],[ProductModel].[ModifiedDate]
	FROM [ProductModel]
		WHERE [CatalogDescription] IS NOT NULL
go

CREATE VIEW [Production].[vProductModelInstructions] AS  SELECT [ProductModelID], [Name],  [Instructions].value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
        (/root/text())[1]' , 'nvarchar(max)' )  AS [Instructions],  [MfgInstructions].ref.value( '@LocationID [1]' , 'int' )  AS [LocationID],  [MfgInstructions].ref.value( '@SetupHours [1]' , 'decimal(9, 4)' )  AS [SetupHours],  [MfgInstructions].ref.value( '@MachineHours [1]' , 'decimal(9, 4)' )  AS [MachineHours],  [MfgInstructions].ref.value( '@LaborHours [1]' , 'decimal(9, 4)' )  AS [LaborHours],  [MfgInstructions].ref.value( '@LotSize [1]' , 'int' )  AS [LotSize],  [Steps].ref.value( 'string(.)[1]' , 'nvarchar(1024)' )  AS [Step], [rowguid], [ModifiedDate] FROM Production.ProductModel   CROSS APPLY   Instructions.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
    /root/Location' ) AS MfgInstructions 
(ref)
   CROSS APPLY   MfgInstructions.ref.nodes( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ProductModelManuInstructions"; 
    step' ) AS Steps 
(ref)

go

CREATE VIEW [Sales].[vSalesPerson] AS  SELECT s.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], a.[AddressLine1], a.[AddressLine2], a.[City], sp.Name AS StateProvinceName, a.[PostalCode], cr.Name AS CountryRegionName, st.Name AS TerritoryName, st.Group AS TerritoryGroup, s.[SalesQuota], s.[SalesYTD], s.[SalesLastYear] FROM Sales.SalesPerson AS s   INNER JOIN   HumanResources.Employee AS e ON e.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   LEFT OUTER JOIN   Sales.SalesTerritory AS st ON st.[TerritoryID] = s.[TerritoryID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [vStoreWithDemographics]([BusinessEntityID],[Name],[AnnualSales],[AnnualRevenue],[BankName],[BusinessType],[YearOpened],[Specialty],[SquareFeet],[Brands],[Internet],[NumberEmployees])
AS
SELECT s.[BusinessEntityID],s.[Name], s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualSales)[1]' , 'money' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualRevenue)[1]' , 'money' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BankName)[1]' , 'nvarchar(50)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BusinessType)[1]' , 'nvarchar(5)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/YearOpened)[1]' , 'integer' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Specialty)[1]' , 'nvarchar(50)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/SquareFeet)[1]' , 'integer' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Brands)[1]' , 'nvarchar(30)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Internet)[1]' , 'nvarchar(30)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/NumberEmployees)[1]' , 'integer' ) 
	FROM [Store] s
go

CREATE VIEW [Sales].[vStoreWithContacts] AS  SELECT s.[BusinessEntityID], s.[Name], ct.[Name] AS [ContactType], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion] FROM Sales.Store AS s   INNER JOIN   Person.BusinessEntityContact AS bec ON bec.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.ContactType AS ct ON ct.[ContactTypeID] = bec.[ContactTypeID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = bec.[PersonID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Sales].[vStoreWithAddresses] AS  SELECT s.[BusinessEntityID], s.[Name], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName] FROM Sales.Store AS s   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]
go

CREATE VIEW [Purchasing].[vVendorWithContacts] AS  SELECT v.[BusinessEntityID], v.[Name], ct.[Name] AS [ContactType], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion] FROM Purchasing.Vendor AS v   INNER JOIN   Person.BusinessEntityContact AS bec ON bec.[BusinessEntityID] = v.[BusinessEntityID]   INNER JOIN   Person.ContactType AS ct ON ct.[ContactTypeID] = bec.[ContactTypeID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = bec.[PersonID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Purchasing].[vVendorWithAddresses] AS  SELECT v.[BusinessEntityID], v.[Name], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName] FROM Purchasing.Vendor AS v   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = v.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]
go

CREATE VIEW [Person].[vAdditionalContactInfo] AS  SELECT [BusinessEntityID], [FirstName], [MiddleName], [LastName],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber)[1]/act:number' , 'nvarchar(50)' )  AS [TelephoneNumber],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [TelephoneSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes";
        (act:homePostalAddress/act:Street)[1]' , 'nvarchar(50)' )  AS [Street],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:City)[1]' , 'nvarchar(50)' )  AS [City],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:StateProvince)[1]' , 'nvarchar(50)' )  AS [StateProvince],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:PostalCode)[1]' , 'nvarchar(50)' )  AS [PostalCode],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:CountryRegion)[1]' , 'nvarchar(50)' )  AS [CountryRegion],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' )  AS [HomeAddressSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:eMailAddress)[1]' , 'nvarchar(128)' )  AS [EMailAddress],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [EMailSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/act:telephoneNumber/act:number)[1]' , 'nvarchar(50)' )  AS [EMailTelephoneNumber], [rowguid], [ModifiedDate] FROM Person.Person   OUTER APPLY   AdditionalContactInfo.nodes( 'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
    /ci:AdditionalContactInfo' ) AS ContactInfo (ref) WHERE [AdditionalContactInfo] IS NOT NULL
go

CREATE VIEW [HumanResources].[vEmployee] AS  SELECT e.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName], p.[AdditionalContactInfo] FROM HumanResources.Employee AS e   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.BusinessEntityID = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pp.[PhoneNumberTypeID] = pnt.[PhoneNumberTypeID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON p.[BusinessEntityID] = ea.[BusinessEntityID]
go

CREATE VIEW [HumanResources].[vEmployeeDepartment] AS  SELECT e.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], d.[Name] AS [Department], d.[GroupName], edh.[StartDate] FROM HumanResources.Employee AS e   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   HumanResources.EmployeeDepartmentHistory AS edh ON e.[BusinessEntityID] = edh.[BusinessEntityID]   INNER JOIN   HumanResources.Department AS d ON edh.[DepartmentID] = d.[DepartmentID] WHERE edh.EndDate IS NULL
go

CREATE VIEW [HumanResources].[vEmployeeDepartmentHistory] AS  SELECT e.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], s.[Name] AS [Shift], d.[Name] AS [Department], d.[GroupName], edh.[StartDate], edh.[EndDate] FROM HumanResources.Employee AS e   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = e.[BusinessEntityID]   INNER JOIN   HumanResources.EmployeeDepartmentHistory AS edh ON e.[BusinessEntityID] = edh.[BusinessEntityID]   INNER JOIN   HumanResources.Department AS d ON edh.[DepartmentID] = d.[DepartmentID]   INNER JOIN   HumanResources.Shift AS s ON s.[ShiftID] = edh.[ShiftID]
go

CREATE VIEW [HumanResources].[vJobCandidate] AS  SELECT jc.[JobCandidateID], jc.[BusinessEntityID],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Prefix)[1]' , 'nvarchar(30)' )  AS [Name.Prefix],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume";
        (/Resume/Name/Name.First)[1]' , 'nvarchar(30)' )  AS [Name.First],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Middle)[1]' , 'nvarchar(30)' )  AS [Name.Middle],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Last)[1]' , 'nvarchar(30)' )  AS [Name.Last],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Name/Name.Suffix)[1]' , 'nvarchar(30)' )  AS [Name.Suffix],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/Skills)[1]' , 'nvarchar(max)' )  AS [Skills],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Type)[1]' , 'nvarchar(30)' )  AS [Addr.Type],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.CountryRegion)[1]' , 'nvarchar(100)' )  AS [Addr.Loc.CountryRegion],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.State)[1]' , 'nvarchar(100)' )  AS [Addr.Loc.State],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.Location/Location/Loc.City)[1]' , 'nvarchar(100)' )  AS [Addr.Loc.City],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Address/Addr.PostalCode)[1]' , 'nvarchar(20)' )  AS [Addr.PostalCode],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/EMail)[1]' , 'nvarchar(max)' )  AS [EMail],  [Resume].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (/Resume/WebSite)[1]' , 'nvarchar(max)' )  AS [WebSite], jc.[ModifiedDate] FROM HumanResources.JobCandidate AS jc   CROSS APPLY   jc.Resume.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume' ) AS Resume (ref)
go

CREATE VIEW [HumanResources].[vJobCandidateEmployment] AS  SELECT jc.[JobCandidateID],  CONVERT(datetime,  REPLACE(  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.StartDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Emp.StartDate],  CONVERT(datetime,  REPLACE(  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.EndDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Emp.EndDate],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.OrgName)[1]' , 'nvarchar(100)' )  AS [Emp.OrgName],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.JobTitle)[1]' , 'nvarchar(100)' )  AS [Emp.JobTitle],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Responsibility)[1]' , 'nvarchar(max)' )  AS [Emp.Responsibility],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.FunctionCategory)[1]' , 'nvarchar(max)' )  AS [Emp.FunctionCategory],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.IndustryCategory)[1]' , 'nvarchar(max)' )  AS [Emp.IndustryCategory],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.CountryRegion)[1]' , 'nvarchar(max)' )  AS [Emp.Loc.CountryRegion],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.State)[1]' , 'nvarchar(max)' )  AS [Emp.Loc.State],  [Employment].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Emp.Location/Location/Loc.City)[1]' , 'nvarchar(max)' )  AS [Emp.Loc.City] FROM HumanResources.JobCandidate AS jc   CROSS APPLY   jc.Resume.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume/Employment' ) AS Employment (ref)
go

CREATE VIEW [HumanResources].[vJobCandidateEducation] AS  SELECT jc.[JobCandidateID],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Level)[1]' , 'nvarchar(max)' )  AS [Edu.Level],  CONVERT(datetime,  REPLACE(  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.StartDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Edu.StartDate],  CONVERT(datetime,  REPLACE(  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.EndDate)[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [Edu.EndDate],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Degree)[1]' , 'nvarchar(50)' )  AS [Edu.Degree],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Major)[1]' , 'nvarchar(50)' )  AS [Edu.Major],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Minor)[1]' , 'nvarchar(50)' )  AS [Edu.Minor],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.GPA)[1]' , 'nvarchar(5)' )  AS [Edu.GPA],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.GPAScale)[1]' , 'nvarchar(5)' )  AS [Edu.GPAScale],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.School)[1]' , 'nvarchar(100)' )  AS [Edu.School],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.CountryRegion)[1]' , 'nvarchar(100)' )  AS [Edu.Loc.CountryRegion],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.State)[1]' , 'nvarchar(100)' )  AS [Edu.Loc.State],  [Education].ref.value( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
        (Edu.Location/Location/Loc.City)[1]' , 'nvarchar(100)' )  AS [Edu.Loc.City] FROM HumanResources.JobCandidate AS jc   CROSS APPLY   jc.Resume.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/Resume"; 
    /Resume/Education' ) AS [Education] (ref)
go

CREATE VIEW [Person].[vStateProvinceCountryRegion] WITH SCHEMABINDING  AS  SELECT sp.[StateProvinceID], sp.[StateProvinceCode], sp.[IsOnlyStateProvinceFlag], sp.[Name] AS [StateProvinceName], sp.[TerritoryID], cr.[CountryRegionCode], cr.[Name] AS [CountryRegionName] FROM Person.StateProvince AS sp   INNER JOIN   Person.CountryRegion AS cr ON sp.[CountryRegionCode] = cr.[CountryRegionCode]
go

CREATE VIEW [Sales].[vSalesPersonSalesByFiscalYears] AS  SELECT pvt.[SalesPersonID], pvt.[FullName], pvt.[JobTitle], pvt.[SalesTerritory], pvt.[2002], pvt.[2003], pvt.[2004] FROM (  SELECT soh.[SalesPersonID], p.[FirstName] + ' ' +  Coalesce(p.[MiddleName] , '')  + ' ' + p.[LastName] AS [FullName], e.[JobTitle], st.[Name] AS [SalesTerritory], soh.[SubTotal],  Year( DateAdd(m, 6, soh.[OrderDate])) AS [FiscalYear] FROM Sales.SalesPerson AS sp   INNER JOIN   Sales.SalesOrderHeader AS soh ON sp.[BusinessEntityID] = soh.[SalesPersonID]   INNER JOIN   Sales.SalesTerritory AS st ON sp.[TerritoryID] = st.[TerritoryID]   INNER JOIN   HumanResources.Employee AS e ON soh.[SalesPersonID] = e.[BusinessEntityID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = sp.[BusinessEntityID] ) AS soh  PIVOT ( SUM( [SubTotal]) FOR FiscalYear IN 
([2002], 
	[2003], 
	[2004])
 )   pvt
go


ALTER TABLE [Address] WITH CHECK 
	ADD CONSTRAINT [FK_Address_StateProvince_StateProvinceID] FOREIGN KEY ([StateProvinceID]) REFERENCES [StateProvince]([StateProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Address]
	  WITH CHECK CHECK CONSTRAINT [FK_Address_StateProvince_StateProvinceID]
go


ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_EndDate]
		CHECK  ( [EndDate]>[StartDate] OR [EndDate] IS NULL ) 
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_ProductAssemblyID]
		CHECK  ( [ProductAssemblyID]<>[ComponentID] ) 
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_BOMLevel]
		CHECK  ( [ProductAssemblyID] IS NULL AND [BOMLevel]=(0) AND [PerAssemblyQty]=(1.00) OR [ProductAssemblyID] IS NOT NULL AND [BOMLevel]>=(1) ) 
go


ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_BillOfMaterials_Product_ProductAssemblyID] FOREIGN KEY ([ProductAssemblyID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_BillOfMaterials_Product_ProductAssemblyID]
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_BillOfMaterials_Product_ComponentID] FOREIGN KEY ([ComponentID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_BillOfMaterials_Product_ComponentID]
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_BillOfMaterials_UnitMeasure_UnitMeasureCode] FOREIGN KEY ([UnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_BillOfMaterials_UnitMeasure_UnitMeasureCode]
go


ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID] FOREIGN KEY ([AddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID] FOREIGN KEY ([AddressTypeID]) REFERENCES [AddressType]([AddressTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_Person_PersonID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID] FOREIGN KEY ([ContactTypeID]) REFERENCES [ContactType]([ContactTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [CountryRegionCurrency] WITH CHECK 
	ADD CONSTRAINT [FK_CountryRegionCurrency_Currency_CurrencyCode] FOREIGN KEY ([CurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CountryRegionCurrency]
	  WITH CHECK CHECK CONSTRAINT [FK_CountryRegionCurrency_Currency_CurrencyCode]
go


ALTER TABLE [CurrencyRate] WITH CHECK 
	ADD CONSTRAINT [FK_CurrencyRate_Currency_FromCurrencyCode] FOREIGN KEY ([FromCurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CurrencyRate]
	  WITH CHECK CHECK CONSTRAINT [FK_CurrencyRate_Currency_FromCurrencyCode]
go

ALTER TABLE [CurrencyRate] WITH CHECK 
	ADD CONSTRAINT [FK_CurrencyRate_Currency_ToCurrencyCode] FOREIGN KEY ([ToCurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CurrencyRate]
	  WITH CHECK CHECK CONSTRAINT [FK_CurrencyRate_Currency_ToCurrencyCode]
go


ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Customer_Store_StoreID] FOREIGN KEY ([StoreID]) REFERENCES [Store]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Customer_Store_StoreID]
go

ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Customer_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Customer_SalesTerritory_TerritoryID]
go


ALTER TABLE [EmailAddress] WITH CHECK 
	ADD CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmailAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID]
go


ALTER TABLE [Employee] WITH CHECK 
	ADD CONSTRAINT [FK_Employee_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Employee]
	  WITH CHECK CHECK CONSTRAINT [FK_Employee_Person_BusinessEntityID]
go


ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_EmployeeDepartmentHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT [FK_EmployeeDepartmentHistory_Department_DepartmentID] FOREIGN KEY ([DepartmentID]) REFERENCES [Department]([DepartmentID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeeDepartmentHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_EmployeeDepartmentHistory_Department_DepartmentID]
go

ALTER TABLE [EmployeeDepartmentHistory] WITH CHECK 
	ADD CONSTRAINT [FK_EmployeeDepartmentHistory_Employee_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeeDepartmentHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_EmployeeDepartmentHistory_Employee_BusinessEntityID]
go


ALTER TABLE [EmployeePayHistory] WITH CHECK 
	ADD CONSTRAINT [FK_EmployeePayHistory_Employee_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmployeePayHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_EmployeePayHistory_Employee_BusinessEntityID]
go


ALTER TABLE [JobCandidate] WITH CHECK 
	ADD CONSTRAINT [FK_JobCandidate_Employee_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Employee]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [JobCandidate]
	  WITH CHECK CHECK CONSTRAINT [FK_JobCandidate_Employee_BusinessEntityID]
go


ALTER TABLE [Person] WITH CHECK 
	ADD CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Person]
	  WITH CHECK CHECK CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [PersonCreditCard] WITH CHECK 
	ADD CONSTRAINT [FK_PersonCreditCard_CreditCard_CreditCardID] FOREIGN KEY ([CreditCardID]) REFERENCES [CreditCard]([CreditCardID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonCreditCard]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonCreditCard_CreditCard_CreditCardID]
go


ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID]
go

ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID] FOREIGN KEY ([PhoneNumberTypeID]) REFERENCES [PhoneNumberType]([PhoneNumberTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID]
go


ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT  [CK_Product_SellEndDate]
		CHECK  ( [SellEndDate]>=[SellStartDate] OR [SellEndDate] IS NULL ) 
go


ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_UnitMeasure_SizeUnitMeasureCode] FOREIGN KEY ([SizeUnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_UnitMeasure_SizeUnitMeasureCode]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_UnitMeasure_WeightUnitMeasureCode] FOREIGN KEY ([WeightUnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_UnitMeasure_WeightUnitMeasureCode]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_ProductModel_ProductModelID] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_ProductModel_ProductModelID]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_ProductSubcategory_ProductSubcategoryID] FOREIGN KEY ([ProductSubcategoryID]) REFERENCES [ProductSubcategory]([ProductSubcategoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_ProductSubcategory_ProductSubcategoryID]
go


ALTER TABLE [ProductCostHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_ProductCostHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [ProductCostHistory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductCostHistory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductCostHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductCostHistory_Product_ProductID]
go


ALTER TABLE [ProductDocument] WITH CHECK 
	ADD CONSTRAINT [FK_ProductDocument_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductDocument]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductDocument_Product_ProductID]
go

ALTER TABLE [ProductDocument] WITH CHECK 
	ADD CONSTRAINT [FK_ProductDocument_Document_DocumentNode] FOREIGN KEY ([DocumentNode]) REFERENCES [Document]([DocumentNode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductDocument]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductDocument_Document_DocumentNode]
go


ALTER TABLE [ProductInventory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductInventory_Location_LocationID] FOREIGN KEY ([LocationID]) REFERENCES [Location]([LocationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductInventory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductInventory_Location_LocationID]
go

ALTER TABLE [ProductInventory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductInventory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductInventory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductInventory_Product_ProductID]
go


ALTER TABLE [ProductListPriceHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_ProductListPriceHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [ProductListPriceHistory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductListPriceHistory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductListPriceHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductListPriceHistory_Product_ProductID]
go


ALTER TABLE [ProductModelIllustration] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelIllustration_ProductModel_ProductModelID] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelIllustration]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelIllustration_ProductModel_ProductModelID]
go

ALTER TABLE [ProductModelIllustration] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelIllustration_Illustration_IllustrationID] FOREIGN KEY ([IllustrationID]) REFERENCES [Illustration]([IllustrationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelIllustration]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelIllustration_Illustration_IllustrationID]
go


ALTER TABLE [ProductModelProductDescriptionCulture] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID] FOREIGN KEY ([ProductDescriptionID]) REFERENCES [ProductDescription]([ProductDescriptionID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID]
go

ALTER TABLE [ProductModelProductDescriptionCulture] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelProductDescriptionCulture_Culture_CultureID] FOREIGN KEY ([CultureID]) REFERENCES [Culture]([CultureID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelProductDescriptionCulture_Culture_CultureID]
go

ALTER TABLE [ProductModelProductDescriptionCulture] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID]
go


ALTER TABLE [ProductProductPhoto] WITH CHECK 
	ADD CONSTRAINT [FK_ProductProductPhoto_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductProductPhoto]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductProductPhoto_Product_ProductID]
go

ALTER TABLE [ProductProductPhoto] WITH CHECK 
	ADD CONSTRAINT [FK_ProductProductPhoto_ProductPhoto_ProductPhotoID] FOREIGN KEY ([ProductPhotoID]) REFERENCES [ProductPhoto]([ProductPhotoID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductProductPhoto]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductProductPhoto_ProductPhoto_ProductPhotoID]
go


ALTER TABLE [ProductReview] WITH CHECK 
	ADD CONSTRAINT [FK_ProductReview_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductReview]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductReview_Product_ProductID]
go


ALTER TABLE [ProductSubcategory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductSubcategory_ProductCategory_ProductCategoryID] FOREIGN KEY ([ProductCategoryID]) REFERENCES [ProductCategory]([ProductCategoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductSubcategory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductSubcategory_ProductCategory_ProductCategoryID]
go


ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_ProductVendor_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductVendor_Product_ProductID]
go

ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_ProductVendor_UnitMeasure_UnitMeasureCode] FOREIGN KEY ([UnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductVendor_UnitMeasure_UnitMeasureCode]
go

ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_ProductVendor_Vendor_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Vendor]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductVendor_Vendor_BusinessEntityID]
go


ALTER TABLE [PurchaseOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderDetail_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderDetail_Product_ProductID]
go

ALTER TABLE [PurchaseOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID] FOREIGN KEY ([PurchaseOrderID]) REFERENCES [PurchaseOrderHeader]([PurchaseOrderID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID]
go


ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_PurchaseOrderHeader_ShipDate]
		CHECK  ( [ShipDate]>=[OrderDate] OR [ShipDate] IS NULL ) 
go


ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderHeader_Vendor_VendorID] FOREIGN KEY ([VendorID]) REFERENCES [Vendor]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderHeader_Vendor_VendorID]
go

ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderHeader_ShipMethod_ShipMethodID] FOREIGN KEY ([ShipMethodID]) REFERENCES [ShipMethod]([ShipMethodID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderHeader_ShipMethod_ShipMethodID]
go


ALTER TABLE [SalesOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID] FOREIGN KEY ([SalesOrderID]) REFERENCES [SalesOrderHeader]([SalesOrderID])
		ON DELETE CASCADE
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID]
go

ALTER TABLE [SalesOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID] FOREIGN KEY ([SpecialOfferID],[ProductID]) REFERENCES [SpecialOfferProduct]([SpecialOfferID],[ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID]
go


ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesOrderHeader_DueDate]
		CHECK  ( [DueDate]>=[OrderDate] ) 
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesOrderHeader_ShipDate]
		CHECK  ( [ShipDate]>=[OrderDate] OR [ShipDate] IS NULL ) 
go


ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_CreditCard_CreditCardID] FOREIGN KEY ([CreditCardID]) REFERENCES [CreditCard]([CreditCardID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_CreditCard_CreditCardID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_CurrencyRate_CurrencyRateID] FOREIGN KEY ([CurrencyRateID]) REFERENCES [CurrencyRate]([CurrencyRateID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_CurrencyRate_CurrencyRateID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_Customer_CustomerID] FOREIGN KEY ([CustomerID]) REFERENCES [Customer]([CustomerID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_Customer_CustomerID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_SalesPerson_SalesPersonID] FOREIGN KEY ([SalesPersonID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_SalesPerson_SalesPersonID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_ShipMethod_ShipMethodID] FOREIGN KEY ([ShipMethodID]) REFERENCES [ShipMethod]([ShipMethodID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_ShipMethod_ShipMethodID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_SalesTerritory_TerritoryID]
go


ALTER TABLE [SalesOrderHeaderSalesReason] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID] FOREIGN KEY ([SalesReasonID]) REFERENCES [SalesReason]([SalesReasonID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID]
go

ALTER TABLE [SalesOrderHeaderSalesReason] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID] FOREIGN KEY ([SalesOrderID]) REFERENCES [SalesOrderHeader]([SalesOrderID])
		ON DELETE CASCADE
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID]
go


ALTER TABLE [SalesPerson] WITH CHECK 
	ADD CONSTRAINT [FK_SalesPerson_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPerson]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesPerson_SalesTerritory_TerritoryID]
go


ALTER TABLE [SalesPersonQuotaHistory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPersonQuotaHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID]
go


ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesTerritoryHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritoryHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID]
go

ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesTerritoryHistory_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritoryHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesTerritoryHistory_SalesTerritory_TerritoryID]
go


ALTER TABLE [ShoppingCartItem] WITH CHECK 
	ADD CONSTRAINT [FK_ShoppingCartItem_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ShoppingCartItem]
	  WITH CHECK CHECK CONSTRAINT [FK_ShoppingCartItem_Product_ProductID]
go


ALTER TABLE [SpecialOffer] WITH CHECK 
	ADD CONSTRAINT  [CK_SpecialOffer_EndDate]
		CHECK  ( [EndDate]>=[StartDate] ) 
go


ALTER TABLE [SpecialOfferProduct] WITH CHECK 
	ADD CONSTRAINT [FK_SpecialOfferProduct_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SpecialOfferProduct]
	  WITH CHECK CHECK CONSTRAINT [FK_SpecialOfferProduct_Product_ProductID]
go

ALTER TABLE [SpecialOfferProduct] WITH CHECK 
	ADD CONSTRAINT [FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID] FOREIGN KEY ([SpecialOfferID]) REFERENCES [SpecialOffer]([SpecialOfferID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SpecialOfferProduct]
	  WITH CHECK CHECK CONSTRAINT [FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID]
go


ALTER TABLE [specl_char_test]
	ADD CONSTRAINT [R_43] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_pwd]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go


ALTER TABLE [StateProvince] WITH CHECK 
	ADD CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StateProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode]
go


ALTER TABLE [Store] WITH CHECK 
	ADD CONSTRAINT [FK_Store_SalesPerson_SalesPersonID] FOREIGN KEY ([SalesPersonID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Store]
	  WITH CHECK CHECK CONSTRAINT [FK_Store_SalesPerson_SalesPersonID]
go


ALTER TABLE [tbl_pwd] WITH CHECK 
	ADD CONSTRAINT [FK_Password_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_pwd]
	  WITH CHECK CHECK CONSTRAINT [FK_Password_Person_BusinessEntityID]
go


ALTER TABLE [TransactionHistory] WITH CHECK 
	ADD CONSTRAINT [FK_TransactionHistory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [TransactionHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_TransactionHistory_Product_ProductID]
go


ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrder_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrder_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrder]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrder_Product_ProductID]
go

ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrder_ScrapReason_ScrapReasonID] FOREIGN KEY ([ScrapReasonID]) REFERENCES [ScrapReason]([ScrapReasonID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrder]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrder_ScrapReason_ScrapReasonID]
go


ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrderRouting_ScheduledEndDate]
		CHECK  ( [ScheduledEndDate]>=[ScheduledStartDate] ) 
go

ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrderRouting_ActualEndDate]
		CHECK  ( [ActualEndDate]>=[ActualStartDate] OR [ActualEndDate] IS NULL OR [ActualStartDate] IS NULL ) 
go


ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrderRouting_Location_LocationID] FOREIGN KEY ([LocationID]) REFERENCES [Location]([LocationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrderRouting]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrderRouting_Location_LocationID]
go

ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrderRouting_WorkOrder_WorkOrderID] FOREIGN KEY ([WorkOrderID]) REFERENCES [WorkOrder]([WorkOrderID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrderRouting]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrderRouting_WorkOrder_WorkOrderID]
go

CREATE TRIGGER [dVendor] ON Vendor
   WITH 
 EXECUTE AS CALLER  INSTEAD OF DELETE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @DeleteCount int;

        SELECT @DeleteCount = COUNT(*) FROM deleted;
        IF @DeleteCount > 0 
        BEGIN
            RAISERROR
                (N'Vendors cannot be deleted. They can only be marked as not active.', -- Message
                10, -- Severity.
                1); -- State.

        -- Rollback any active or uncommittable transactions
            IF @@TRANCOUNT > 0
            BEGIN
                ROLLBACK TRANSACTION;
            END
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [dVendor] ON Vendor
go

CREATE TRIGGER [iWorkOrder] ON WorkOrder
   WITH 
 EXECUTE AS CALLER  AFTER INSERT 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory](
            [ProductID]
            ,[ReferenceOrderID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[WorkOrderID]
            ,'W'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,0
        FROM inserted;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iWorkOrder] ON WorkOrder
go

CREATE TRIGGER [uWorkOrder] ON WorkOrder
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty])
        BEGIN
            INSERT INTO [Production].[TransactionHistory](
                [ProductID]
                ,[ReferenceOrderID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity])
            SELECT 
                inserted.[ProductID]
                ,inserted.[WorkOrderID]
                ,'W'
                ,GETDATE()
                ,inserted.[OrderQty]
            FROM inserted;
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uWorkOrder] ON WorkOrder
go

CREATE TRIGGER [iPurchaseOrderDetail] ON PurchaseOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER INSERT 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory]
            ([ProductID]
            ,[ReferenceOrderID]
            ,[ReferenceOrderLineID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[PurchaseOrderID]
            ,inserted.[PurchaseOrderDetailID]
            ,'P'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,inserted.[UnitPrice]
        FROM inserted 
            INNER JOIN [Purchasing].[PurchaseOrderHeader] 
            ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID];

        -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
        -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Purchasing].[PurchaseOrderHeader]
        SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
            (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                FROM [Purchasing].[PurchaseOrderDetail]
                WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
        WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN (SELECT inserted.[PurchaseOrderID] FROM inserted);
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iPurchaseOrderDetail] ON PurchaseOrderDetail
go

CREATE TRIGGER [uPurchaseOrderDetail] ON PurchaseOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice])
        -- Insert record into TransactionHistory 
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[PurchaseOrderID]
                ,inserted.[PurchaseOrderDetailID]
                ,'P'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Purchasing].[PurchaseOrderDetail] 
                ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID];

            -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
            -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
                (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                    FROM [Purchasing].[PurchaseOrderDetail]
                    WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                        = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

            UPDATE [Purchasing].[PurchaseOrderDetail]
            SET [Purchasing].[PurchaseOrderDetail].[ModifiedDate] = GETDATE()
            FROM inserted
            WHERE inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID]
                AND inserted.[PurchaseOrderDetailID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderDetailID];
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uPurchaseOrderDetail] ON PurchaseOrderDetail
go

CREATE TRIGGER [uPurchaseOrderHeader] ON PurchaseOrderHeader
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[RevisionNumber] = 
                [Purchasing].[PurchaseOrderHeader].[RevisionNumber] + 1
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN 
                (SELECT inserted.[PurchaseOrderID] FROM inserted);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uPurchaseOrderHeader] ON PurchaseOrderHeader
go

CREATE TRIGGER [iduSalesOrderDetail] ON SalesOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER DELETE,INSERT,UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- If inserting or updating these columns
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice]) OR UPDATE([UnitPriceDiscount]) 
        -- Insert record into TransactionHistory
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[SalesOrderID]
                ,inserted.[SalesOrderDetailID]
                ,'S'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] 
                ON inserted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID];

            UPDATE [Person].[Person] 
            SET [Demographics].modify('declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
                with data(/IndividualSurvey/TotalPurchaseYTD)[1] + sql:column ("inserted.LineTotal")') 
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] AS SOH
                ON inserted.[SalesOrderID] = SOH.[SalesOrderID] 
                INNER JOIN [Sales].[Customer] AS C
                ON SOH.[CustomerID] = C.[CustomerID]
            WHERE C.[PersonID] = [Person].[Person].[BusinessEntityID];
        END;

        -- Update SubTotal in SalesOrderHeader record. Note that this causes the 
        -- SalesOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Sales].[SalesOrderHeader]
        SET [Sales].[SalesOrderHeader].[SubTotal] = 
            (SELECT SUM([Sales].[SalesOrderDetail].[LineTotal])
                FROM [Sales].[SalesOrderDetail]
                WHERE [Sales].[SalesOrderHeader].[SalesOrderID] = [Sales].[SalesOrderDetail].[SalesOrderID])
        WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN (SELECT inserted.[SalesOrderID] FROM inserted);

        UPDATE [Person].[Person] 
        SET [Demographics].modify('declare default element namespace 
            "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
            with data(/IndividualSurvey/TotalPurchaseYTD)[1] - sql:column("deleted.LineTotal")') 
        FROM deleted 
            INNER JOIN [Sales].[SalesOrderHeader] 
            ON deleted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] 
            INNER JOIN [Sales].[Customer]
            ON [Sales].[Customer].[CustomerID] = [Sales].[SalesOrderHeader].[CustomerID]
        WHERE [Sales].[Customer].[PersonID] = [Person].[Person].[BusinessEntityID];
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iduSalesOrderDetail] ON SalesOrderDetail
go

CREATE TRIGGER [uSalesOrderHeader] ON SalesOrderHeader
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Sales].[SalesOrderHeader]
            SET [Sales].[SalesOrderHeader].[RevisionNumber] = 
                [Sales].[SalesOrderHeader].[RevisionNumber] + 1
            WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN 
                (SELECT inserted.[SalesOrderID] FROM inserted);
        END;

        -- Update the SalesPerson SalesYTD when SubTotal is updated
        IF UPDATE([SubTotal])
        BEGIN
            DECLARE @StartDate datetime,
                    @EndDate datetime

            SET @StartDate = [dbo].[ufnGetAccountingStartDate]();
            SET @EndDate = [dbo].[ufnGetAccountingEndDate]();

            UPDATE [Sales].[SalesPerson]
            SET [Sales].[SalesPerson].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesPerson].[BusinessEntityID] = [Sales].[SalesOrderHeader].[SalesPersonID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesPerson].[BusinessEntityID] 
                IN (SELECT DISTINCT inserted.[SalesPersonID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);

            -- Update the SalesTerritory SalesYTD when SubTotal is updated
            UPDATE [Sales].[SalesTerritory]
            SET [Sales].[SalesTerritory].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesTerritory].[TerritoryID] = [Sales].[SalesOrderHeader].[TerritoryID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesTerritory].[TerritoryID] 
                IN (SELECT DISTINCT inserted.[TerritoryID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uSalesOrderHeader] ON SalesOrderHeader
go

CREATE TRIGGER Person.tD_Password ON Person.tbl_pwd FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_pwd */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.tbl_pwd  Person.specl_char_test on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014007", PARENT_OWNER="Person", PARENT_TABLE="tbl_pwd"
    CHILD_OWNER="Person", CHILD_TABLE="specl_char_test"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_43", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person.specl_char_test
      WHERE
        /*  %JoinFKPK(Person.specl_char_test,deleted," = "," AND") */
        Person.specl_char_test.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person.tbl_pwd because Person.specl_char_test exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_Password ON Person.tbl_pwd FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_pwd */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.tbl_pwd  Person.specl_char_test on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000154b0", PARENT_OWNER="Person", PARENT_TABLE="tbl_pwd"
    CHILD_OWNER="Person", CHILD_TABLE="specl_char_test"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_43", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person.specl_char_test
      WHERE
        /*  %JoinFKPK(Person.specl_char_test,deleted," = "," AND") */
        Person.specl_char_test.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person.tbl_pwd because Person.specl_char_test exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iuPerson] ON Person
   WITH 
 EXECUTE AS CALLER  AFTER INSERT,UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

 
go


ENABLE TRIGGER [iuPerson] ON Person
go

CREATE TRIGGER [dEmployee] ON Employee
   WITH 
 EXECUTE AS CALLER  INSTEAD OF DELETE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN
        RAISERROR
            (N'Employees cannot be deleted. They can only be marked as not current.', -- Message
            10, -- Severity.
            1); -- State.

        -- Rollback any active or uncommittable transactions
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END
    END;
END;

 
go


ENABLE TRIGGER [dEmployee] ON Employee
go

CREATE TRIGGER Person.tD_specl_char_test ON Person.specl_char_test FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on specl_char_test */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person.tbl_pwd  Person.specl_char_test on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00019270", PARENT_OWNER="Person", PARENT_TABLE="tbl_pwd"
    CHILD_OWNER="Person", CHILD_TABLE="specl_char_test"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_43", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person.tbl_pwd
      WHERE
        /* %JoinFKPK(deleted,Person.tbl_pwd," = "," AND") */
        deleted.BusinessEntityID = Person.tbl_pwd.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person.specl_char_test
          WHERE
            /* %JoinFKPK(Person.specl_char_test,Person.tbl_pwd," = "," AND") */
            Person.specl_char_test.BusinessEntityID = Person.tbl_pwd.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person.specl_char_test because Person.tbl_pwd exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Person.tU_specl_char_test ON Person.specl_char_test FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on specl_char_test */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insprimary_col_ char(18), 
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person.tbl_pwd  Person.specl_char_test on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019907", PARENT_OWNER="Person", PARENT_TABLE="tbl_pwd"
    CHILD_OWNER="Person", CHILD_TABLE="specl_char_test"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_43", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person.tbl_pwd
        WHERE
          /* %JoinFKPK(inserted,Person.tbl_pwd) */
          inserted.BusinessEntityID = Person.tbl_pwd.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person.specl_char_test because Person.tbl_pwd does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go





CREATE TRIGGER tD_Address ON Address FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Address */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Address  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028539", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Address because BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* StateProvince  Address on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (SELECT * FROM deleted,StateProvince
      WHERE
        /* %JoinFKPK(deleted,StateProvince," = "," AND") */
        deleted.StateProvinceID = StateProvince.StateProvinceID AND
        NOT EXISTS (
          SELECT * FROM Address
          WHERE
            /* %JoinFKPK(Address,StateProvince," = "," AND") */
            Address.StateProvinceID = StateProvince.StateProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Address because StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Address ON Address FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Address */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Address  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c68f", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Address because BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* StateProvince  Address on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,StateProvince
        WHERE
          /* %JoinFKPK(inserted,StateProvince) */
          inserted.StateProvinceID = StateProvince.StateProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Address because StateProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_AddressType ON AddressType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AddressType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014e9a", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete AddressType because BusinessEntityAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_AddressType ON AddressType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AddressType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00016f4c", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update AddressType because BusinessEntityAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BillOfMaterials ON BillOfMaterials FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BillOfMaterials */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* UnitMeasure  BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000425d6", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,UnitMeasure," = "," AND") */
        deleted.UnitMeasureCode = UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM BillOfMaterials
          WHERE
            /* %JoinFKPK(BillOfMaterials,UnitMeasure," = "," AND") */
            BillOfMaterials.UnitMeasureCode = UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BillOfMaterials because UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ComponentID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM BillOfMaterials
          WHERE
            /* %JoinFKPK(BillOfMaterials,Product," = "," AND") */
            BillOfMaterials.ComponentID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BillOfMaterials because Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductAssemblyID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM BillOfMaterials
          WHERE
            /* %JoinFKPK(BillOfMaterials,Product," = "," AND") */
            BillOfMaterials.ProductAssemblyID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BillOfMaterials because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BillOfMaterials ON BillOfMaterials FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BillOfMaterials */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBillOfMaterialsID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* UnitMeasure  BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00048628", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,UnitMeasure) */
          inserted.UnitMeasureCode = UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BillOfMaterials because UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ComponentID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ComponentID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BillOfMaterials because Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductAssemblyID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductAssemblyID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductAssemblyID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BillOfMaterials because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntity ON BusinessEntity FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntity */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a31a", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntity ON BusinessEntity FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntity */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00041047", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because Person exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityAddress ON BusinessEntityAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047170", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,BusinessEntity," = "," AND") */
            BusinessEntityAddress.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (SELECT * FROM deleted,AddressType
      WHERE
        /* %JoinFKPK(deleted,AddressType," = "," AND") */
        deleted.AddressTypeID = AddressType.AddressTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,AddressType," = "," AND") */
            BusinessEntityAddress.AddressTypeID = AddressType.AddressTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because AddressType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
    IF EXISTS (SELECT * FROM deleted,Address
      WHERE
        /* %JoinFKPK(deleted,Address," = "," AND") */
        deleted.AddressID = Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,Address," = "," AND") */
            BusinessEntityAddress.AddressID = Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because Address exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityAddress ON BusinessEntityAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insAddressID int, 
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00048c81", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,AddressType
        WHERE
          /* %JoinFKPK(inserted,AddressType) */
          inserted.AddressTypeID = AddressType.AddressTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because AddressType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Address  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Address
        WHERE
          /* %JoinFKPK(inserted,Address) */
          inserted.AddressID = Address.AddressID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because Address does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityContact ON BusinessEntityContact FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000488e0", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,BusinessEntity," = "," AND") */
            BusinessEntityContact.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ContactType  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (SELECT * FROM deleted,ContactType
      WHERE
        /* %JoinFKPK(deleted,ContactType," = "," AND") */
        deleted.ContactTypeID = ContactType.ContactTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,ContactType," = "," AND") */
            BusinessEntityContact.ContactTypeID = ContactType.ContactTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because ContactType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.PersonID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,Person," = "," AND") */
            BusinessEntityContact.PersonID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityContact ON BusinessEntityContact FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPersonID int, 
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004a3b9", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ContactType  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ContactType
        WHERE
          /* %JoinFKPK(inserted,ContactType) */
          inserted.ContactTypeID = ContactType.ContactTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because ContactType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.PersonID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContactType ON ContactType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContactType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ContactType  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015148", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ContactType because BusinessEntityContact exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContactType ON ContactType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContactType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ContactType  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017223", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ContactType because BusinessEntityContact exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CountryRegion ON CountryRegion FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegion */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CountryRegion  StateProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001350d", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CountryRegion because StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CountryRegion ON CountryRegion FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegion */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CountryRegion  StateProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000153e8", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CountryRegion because StateProvince exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CountryRegionCurrency ON CountryRegionCurrency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegionCurrency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Currency  CountryRegionCurrency on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00018bfb", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Currency
      WHERE
        /* %JoinFKPK(deleted,Currency," = "," AND") */
        deleted.CurrencyCode = Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM CountryRegionCurrency
          WHERE
            /* %JoinFKPK(CountryRegionCurrency,Currency," = "," AND") */
            CountryRegionCurrency.CurrencyCode = Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CountryRegionCurrency because Currency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CountryRegionCurrency ON CountryRegionCurrency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegionCurrency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3), 
           @insCurrencyCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Currency  CountryRegionCurrency on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018964", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Currency
        WHERE
          /* %JoinFKPK(inserted,Currency) */
          inserted.CurrencyCode = Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CountryRegionCurrency because Currency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CreditCard ON CreditCard FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CreditCard */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CreditCard  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000247c3", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CreditCard because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CreditCard  PersonCreditCard on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonCreditCard
      WHERE
        /*  %JoinFKPK(PersonCreditCard,deleted," = "," AND") */
        PersonCreditCard.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CreditCard because PersonCreditCard exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CreditCard ON CreditCard FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CreditCard */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCreditCardID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CreditCard  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000289a2", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CreditCard because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CreditCard  PersonCreditCard on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonCreditCard
      WHERE
        /*  %JoinFKPK(PersonCreditCard,deleted," = "," AND") */
        PersonCreditCard.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CreditCard because PersonCreditCard exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Culture ON Culture FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Culture */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Culture  ProductModelProductDescriptionCulture on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001725b", PARENT_OWNER="", PARENT_TABLE="Culture"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(ProductModelProductDescriptionCulture,deleted," = "," AND") */
        ProductModelProductDescriptionCulture.CultureID = deleted.CultureID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Culture because ProductModelProductDescriptionCulture exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Culture ON Culture FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Culture */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCultureID nchar(6),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Culture  ProductModelProductDescriptionCulture on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001919d", PARENT_OWNER="", PARENT_TABLE="Culture"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CultureID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(ProductModelProductDescriptionCulture,deleted," = "," AND") */
        ProductModelProductDescriptionCulture.CultureID = deleted.CultureID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Culture because ProductModelProductDescriptionCulture exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Currency ON Currency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Currency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000374bf", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.ToCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Currency because CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.FromCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Currency because CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CountryRegionCurrency on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(CountryRegionCurrency,deleted," = "," AND") */
        CountryRegionCurrency.CurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Currency because CountryRegionCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Currency ON Currency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Currency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003c3ee", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.ToCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Currency because CurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.FromCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Currency because CurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CountryRegionCurrency on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(CountryRegionCurrency,deleted," = "," AND") */
        CountryRegionCurrency.CurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Currency because CountryRegionCurrency exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CurrencyRate ON CurrencyRate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CurrencyRate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CurrencyRate  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003e232", PARENT_OWNER="", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", FK_COLUMNS="CurrencyRateID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CurrencyRateID = deleted.CurrencyRateID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CurrencyRate because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Currency
      WHERE
        /* %JoinFKPK(deleted,Currency," = "," AND") */
        deleted.ToCurrencyCode = Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM CurrencyRate
          WHERE
            /* %JoinFKPK(CurrencyRate,Currency," = "," AND") */
            CurrencyRate.ToCurrencyCode = Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CurrencyRate because Currency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Currency
      WHERE
        /* %JoinFKPK(deleted,Currency," = "," AND") */
        deleted.FromCurrencyCode = Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM CurrencyRate
          WHERE
            /* %JoinFKPK(CurrencyRate,Currency," = "," AND") */
            CurrencyRate.FromCurrencyCode = Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CurrencyRate because Currency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CurrencyRate ON CurrencyRate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CurrencyRate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyRateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CurrencyRate  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00043919", PARENT_OWNER="", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", FK_COLUMNS="CurrencyRateID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyRateID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CurrencyRateID = deleted.CurrencyRateID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CurrencyRate because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ToCurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Currency
        WHERE
          /* %JoinFKPK(inserted,Currency) */
          inserted.ToCurrencyCode = Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CurrencyRate because Currency does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(FromCurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Currency
        WHERE
          /* %JoinFKPK(inserted,Currency) */
          inserted.FromCurrencyCode = Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CurrencyRate because Currency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Customer ON Customer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Customer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Customer  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003adca", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Customer_CustomerID", FK_COLUMNS="CustomerID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CustomerID = deleted.CustomerID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Customer
          WHERE
            /* %JoinFKPK(Customer,SalesTerritory," = "," AND") */
            Customer.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Customer because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Store  Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
    IF EXISTS (SELECT * FROM deleted,Store
      WHERE
        /* %JoinFKPK(deleted,Store," = "," AND") */
        deleted.StoreID = Store.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Customer
          WHERE
            /* %JoinFKPK(Customer,Store," = "," AND") */
            Customer.StoreID = Store.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Customer because Store exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Customer ON Customer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Customer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustomerID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Customer  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00043c3f", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Customer_CustomerID", FK_COLUMNS="CustomerID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustomerID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CustomerID = deleted.CustomerID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Customer because SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Store  Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StoreID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Store
        WHERE
          /* %JoinFKPK(inserted,Store) */
          inserted.StoreID = Store.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.StoreID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Customer because Store does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Department ON Department FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Department */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Department  EmployeeDepartmentHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001560b", PARENT_OWNER="", PARENT_TABLE="Department"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Department_DepartmentID", FK_COLUMNS="DepartmentID" */
    IF EXISTS (
      SELECT * FROM deleted,EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(EmployeeDepartmentHistory,deleted," = "," AND") */
        EmployeeDepartmentHistory.DepartmentID = deleted.DepartmentID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Department because EmployeeDepartmentHistory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Department ON Department FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Department */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDepartmentID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Department  EmployeeDepartmentHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017a49", PARENT_OWNER="", PARENT_TABLE="Department"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Department_DepartmentID", FK_COLUMNS="DepartmentID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DepartmentID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(EmployeeDepartmentHistory,deleted," = "," AND") */
        EmployeeDepartmentHistory.DepartmentID = deleted.DepartmentID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Department because EmployeeDepartmentHistory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Document ON Document FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Document */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Document  ProductDocument on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013510", PARENT_OWNER="", PARENT_TABLE="Document"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
    IF EXISTS (
      SELECT * FROM deleted,ProductDocument
      WHERE
        /*  %JoinFKPK(ProductDocument,deleted," = "," AND") */
        ProductDocument.DocumentNode = deleted.DocumentNode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Document because ProductDocument exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Document ON Document FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Document */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDocumentNode hierarchyid,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Document  ProductDocument on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001513b", PARENT_OWNER="", PARENT_TABLE="Document"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DocumentNode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductDocument
      WHERE
        /*  %JoinFKPK(ProductDocument,deleted," = "," AND") */
        ProductDocument.DocumentNode = deleted.DocumentNode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Document because ProductDocument exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EmailAddress ON EmailAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmailAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  EmailAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016d02", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM EmailAddress
          WHERE
            /* %JoinFKPK(EmailAddress,Person," = "," AND") */
            EmailAddress.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmailAddress because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EmailAddress ON EmailAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmailAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insEmailAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  EmailAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001812e", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmailAddress because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Employee ON Employee FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Employee */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Employee  EmployeeDepartmentHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0005565b", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmployeeDepartmentHistory
      WHERE
        /*  %JoinFKPK(EmployeeDepartmentHistory,deleted," = "," AND") */
        EmployeeDepartmentHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Employee because EmployeeDepartmentHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Employee  JobCandidate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_JobCandidate_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,JobCandidate
      WHERE
        /*  %JoinFKPK(JobCandidate,deleted," = "," AND") */
        JobCandidate.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Employee because JobCandidate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Employee  EmployeePayHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeePayHistory_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmployeePayHistory
      WHERE
        /*  %JoinFKPK(EmployeePayHistory,deleted," = "," AND") */
        EmployeePayHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Employee because EmployeePayHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  Employee on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Employee_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Employee because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EmployeeDepartmentHistory ON EmployeeDepartmentHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmployeeDepartmentHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Employee  EmployeeDepartmentHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003169f", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Employee
      WHERE
        /* %JoinFKPK(deleted,Employee," = "," AND") */
        deleted.BusinessEntityID = Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM EmployeeDepartmentHistory
          WHERE
            /* %JoinFKPK(EmployeeDepartmentHistory,Employee," = "," AND") */
            EmployeeDepartmentHistory.BusinessEntityID = Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmployeeDepartmentHistory because Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Department  EmployeeDepartmentHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Department"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Department_DepartmentID", FK_COLUMNS="DepartmentID" */
    IF EXISTS (SELECT * FROM deleted,Department
      WHERE
        /* %JoinFKPK(deleted,Department," = "," AND") */
        deleted.DepartmentID = Department.DepartmentID AND
        NOT EXISTS (
          SELECT * FROM EmployeeDepartmentHistory
          WHERE
            /* %JoinFKPK(EmployeeDepartmentHistory,Department," = "," AND") */
            EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmployeeDepartmentHistory because Department exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EmployeeDepartmentHistory ON EmployeeDepartmentHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmployeeDepartmentHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insDepartmentID smallint, 
           @insShiftID tinyint, 
           @insStartDate date,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Employee  EmployeeDepartmentHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00033354", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Employee
        WHERE
          /* %JoinFKPK(inserted,Employee) */
          inserted.BusinessEntityID = Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmployeeDepartmentHistory because Employee does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Department  EmployeeDepartmentHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Department"
    CHILD_OWNER="", CHILD_TABLE="EmployeeDepartmentHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeeDepartmentHistory_Department_DepartmentID", FK_COLUMNS="DepartmentID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DepartmentID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Department
        WHERE
          /* %JoinFKPK(inserted,Department) */
          inserted.DepartmentID = Department.DepartmentID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmployeeDepartmentHistory because Department does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EmployeePayHistory ON EmployeePayHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmployeePayHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Employee  EmployeePayHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00018783", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeePayHistory_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Employee
      WHERE
        /* %JoinFKPK(deleted,Employee," = "," AND") */
        deleted.BusinessEntityID = Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM EmployeePayHistory
          WHERE
            /* %JoinFKPK(EmployeePayHistory,Employee," = "," AND") */
            EmployeePayHistory.BusinessEntityID = Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmployeePayHistory because Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EmployeePayHistory ON EmployeePayHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmployeePayHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insRateChangeDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Employee  EmployeePayHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001908f", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="EmployeePayHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmployeePayHistory_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Employee
        WHERE
          /* %JoinFKPK(inserted,Employee) */
          inserted.BusinessEntityID = Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmployeePayHistory because Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Illustration ON Illustration FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Illustration */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Illustration  ProductModelIllustration on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001591e", PARENT_OWNER="", PARENT_TABLE="Illustration"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductModelIllustration
      WHERE
        /*  %JoinFKPK(ProductModelIllustration,deleted," = "," AND") */
        ProductModelIllustration.IllustrationID = deleted.IllustrationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Illustration because ProductModelIllustration exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Illustration ON Illustration FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Illustration */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insIllustrationID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Illustration  ProductModelIllustration on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017833", PARENT_OWNER="", PARENT_TABLE="Illustration"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(IllustrationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductModelIllustration
      WHERE
        /*  %JoinFKPK(ProductModelIllustration,deleted," = "," AND") */
        ProductModelIllustration.IllustrationID = deleted.IllustrationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Illustration because ProductModelIllustration exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_JobCandidate ON JobCandidate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on JobCandidate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Employee  JobCandidate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017832", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_JobCandidate_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Employee
      WHERE
        /* %JoinFKPK(deleted,Employee," = "," AND") */
        deleted.BusinessEntityID = Employee.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM JobCandidate
          WHERE
            /* %JoinFKPK(JobCandidate,Employee," = "," AND") */
            JobCandidate.BusinessEntityID = Employee.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last JobCandidate because Employee exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_JobCandidate ON JobCandidate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on JobCandidate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insJobCandidateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Employee  JobCandidate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001bb8b", PARENT_OWNER="", PARENT_TABLE="Employee"
    CHILD_OWNER="", CHILD_TABLE="JobCandidate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_JobCandidate_Employee_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Employee
        WHERE
          /* %JoinFKPK(inserted,Employee) */
          inserted.BusinessEntityID = Employee.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.BusinessEntityID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update JobCandidate because Employee does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Location ON Location FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Location */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Location  WorkOrderRouting on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00025ab9", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (
      SELECT * FROM deleted,WorkOrderRouting
      WHERE
        /*  %JoinFKPK(WorkOrderRouting,deleted," = "," AND") */
        WorkOrderRouting.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Location because WorkOrderRouting exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Location  ProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductInventory
      WHERE
        /*  %JoinFKPK(ProductInventory,deleted," = "," AND") */
        ProductInventory.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Location because ProductInventory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Location ON Location FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Location */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insLocationID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Location  WorkOrderRouting on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00027dc3", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,WorkOrderRouting
      WHERE
        /*  %JoinFKPK(WorkOrderRouting,deleted," = "," AND") */
        WorkOrderRouting.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Location because WorkOrderRouting exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Location  ProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductInventory
      WHERE
        /*  %JoinFKPK(ProductInventory,deleted," = "," AND") */
        ProductInventory.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Location because ProductInventory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Person ON Person FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Person */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  Employee on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0006bfbd", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Employee_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Employee
      WHERE
        /*  %JoinFKPK(Employee,deleted," = "," AND") */
        Employee.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because Employee exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  EmailAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,EmailAddress
      WHERE
        /*  %JoinFKPK(EmailAddress,deleted," = "," AND") */
        EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because EmailAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because PersonPhone exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  tbl_pwd on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_pwd"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_pwd
      WHERE
        /*  %JoinFKPK(tbl_pwd,deleted," = "," AND") */
        tbl_pwd.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because tbl_pwd exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person
          WHERE
            /* %JoinFKPK(Person,BusinessEntity," = "," AND") */
            Person.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person because BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Person ON Person FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Person */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  Employee on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00078112", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Employee"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Employee_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Employee
      WHERE
        /*  %JoinFKPK(Employee,deleted," = "," AND") */
        Employee.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because Employee exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  EmailAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmailAddress
      WHERE
        /*  %JoinFKPK(EmailAddress,deleted," = "," AND") */
        EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because EmailAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because PersonPhone exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  tbl_pwd on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_pwd"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_pwd
      WHERE
        /*  %JoinFKPK(tbl_pwd,deleted," = "," AND") */
        tbl_pwd.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because tbl_pwd exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person because BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PersonCreditCard ON PersonCreditCard FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonCreditCard */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CreditCard  PersonCreditCard on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017c31", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (SELECT * FROM deleted,CreditCard
      WHERE
        /* %JoinFKPK(deleted,CreditCard," = "," AND") */
        deleted.CreditCardID = CreditCard.CreditCardID AND
        NOT EXISTS (
          SELECT * FROM PersonCreditCard
          WHERE
            /* %JoinFKPK(PersonCreditCard,CreditCard," = "," AND") */
            PersonCreditCard.CreditCardID = CreditCard.CreditCardID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonCreditCard because CreditCard exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PersonCreditCard ON PersonCreditCard FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonCreditCard */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insCreditCardID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CreditCard  PersonCreditCard on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000192d2", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CreditCard
        WHERE
          /* %JoinFKPK(inserted,CreditCard) */
          inserted.CreditCardID = CreditCard.CreditCardID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonCreditCard because CreditCard does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PersonPhone ON PersonPhone FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonPhone */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhoneNumberType  PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002e659", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (SELECT * FROM deleted,PhoneNumberType
      WHERE
        /* %JoinFKPK(deleted,PhoneNumberType," = "," AND") */
        deleted.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID AND
        NOT EXISTS (
          SELECT * FROM PersonPhone
          WHERE
            /* %JoinFKPK(PersonPhone,PhoneNumberType," = "," AND") */
            PersonPhone.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhone because PhoneNumberType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM PersonPhone
          WHERE
            /* %JoinFKPK(PersonPhone,Person," = "," AND") */
            PersonPhone.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhone because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PersonPhone ON PersonPhone FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonPhone */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPhoneNumber Domain_2181, 
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhoneNumberType  PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003116d", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,PhoneNumberType
        WHERE
          /* %JoinFKPK(inserted,PhoneNumberType) */
          inserted.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhone because PhoneNumberType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhone because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PhoneNumberType ON PhoneNumberType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PhoneNumberType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhoneNumberType  PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013c75", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PhoneNumberType because PersonPhone exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PhoneNumberType ON PhoneNumberType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PhoneNumberType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhoneNumberType  PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00015b34", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update PhoneNumberType because PersonPhone exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Product ON Product FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Product */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  PurchaseOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0014af44", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(PurchaseOrderDetail,deleted," = "," AND") */
        PurchaseOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because PurchaseOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  WorkOrder on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,WorkOrder
      WHERE
        /*  %JoinFKPK(WorkOrder,deleted," = "," AND") */
        WorkOrder.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because WorkOrder exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductVendor
      WHERE
        /*  %JoinFKPK(ProductVendor,deleted," = "," AND") */
        ProductVendor.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductVendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductReview on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductReview
      WHERE
        /*  %JoinFKPK(ProductReview,deleted," = "," AND") */
        ProductReview.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductReview exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  TransactionHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,TransactionHistory
      WHERE
        /*  %JoinFKPK(TransactionHistory,deleted," = "," AND") */
        TransactionHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because TransactionHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductProductPhoto on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductProductPhoto
      WHERE
        /*  %JoinFKPK(ProductProductPhoto,deleted," = "," AND") */
        ProductProductPhoto.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductProductPhoto exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
    IF EXISTS (
      SELECT * FROM deleted,BillOfMaterials
      WHERE
        /*  %JoinFKPK(BillOfMaterials,deleted," = "," AND") */
        BillOfMaterials.ComponentID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
    IF EXISTS (
      SELECT * FROM deleted,BillOfMaterials
      WHERE
        /*  %JoinFKPK(BillOfMaterials,deleted," = "," AND") */
        BillOfMaterials.ProductAssemblyID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  SpecialOfferProduct on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(SpecialOfferProduct,deleted," = "," AND") */
        SpecialOfferProduct.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because SpecialOfferProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductListPriceHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductListPriceHistory
      WHERE
        /*  %JoinFKPK(ProductListPriceHistory,deleted," = "," AND") */
        ProductListPriceHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductListPriceHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductInventory
      WHERE
        /*  %JoinFKPK(ProductInventory,deleted," = "," AND") */
        ProductInventory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductInventory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductDocument on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductDocument
      WHERE
        /*  %JoinFKPK(ProductDocument,deleted," = "," AND") */
        ProductDocument.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductDocument exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ShoppingCartItem on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ShoppingCartItem_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ShoppingCartItem
      WHERE
        /*  %JoinFKPK(ShoppingCartItem,deleted," = "," AND") */
        ShoppingCartItem.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ShoppingCartItem exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductCostHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductCostHistory
      WHERE
        /*  %JoinFKPK(ProductCostHistory,deleted," = "," AND") */
        ProductCostHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Product because ProductCostHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductSubcategory  Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
    IF EXISTS (SELECT * FROM deleted,ProductSubcategory
      WHERE
        /* %JoinFKPK(deleted,ProductSubcategory," = "," AND") */
        deleted.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID AND
        NOT EXISTS (
          SELECT * FROM Product
          WHERE
            /* %JoinFKPK(Product,ProductSubcategory," = "," AND") */
            Product.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Product because ProductSubcategory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductModel  Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,ProductModel
      WHERE
        /* %JoinFKPK(deleted,ProductModel," = "," AND") */
        deleted.ProductModelID = ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Product
          WHERE
            /* %JoinFKPK(Product,ProductModel," = "," AND") */
            Product.ProductModelID = ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Product because ProductModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* UnitMeasure  Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,UnitMeasure," = "," AND") */
        deleted.WeightUnitMeasureCode = UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Product
          WHERE
            /* %JoinFKPK(Product,UnitMeasure," = "," AND") */
            Product.WeightUnitMeasureCode = UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Product because UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* UnitMeasure  Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,UnitMeasure," = "," AND") */
        deleted.SizeUnitMeasureCode = UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Product
          WHERE
            /* %JoinFKPK(Product,UnitMeasure," = "," AND") */
            Product.SizeUnitMeasureCode = UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Product because UnitMeasure exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Product ON Product FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Product */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  PurchaseOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0016ebca", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(PurchaseOrderDetail,deleted," = "," AND") */
        PurchaseOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because PurchaseOrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  WorkOrder on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,WorkOrder
      WHERE
        /*  %JoinFKPK(WorkOrder,deleted," = "," AND") */
        WorkOrder.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because WorkOrder exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductVendor
      WHERE
        /*  %JoinFKPK(ProductVendor,deleted," = "," AND") */
        ProductVendor.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductReview on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductReview
      WHERE
        /*  %JoinFKPK(ProductReview,deleted," = "," AND") */
        ProductReview.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductReview exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  TransactionHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,TransactionHistory
      WHERE
        /*  %JoinFKPK(TransactionHistory,deleted," = "," AND") */
        TransactionHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because TransactionHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductProductPhoto on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductProductPhoto
      WHERE
        /*  %JoinFKPK(ProductProductPhoto,deleted," = "," AND") */
        ProductProductPhoto.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductProductPhoto exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BillOfMaterials
      WHERE
        /*  %JoinFKPK(BillOfMaterials,deleted," = "," AND") */
        BillOfMaterials.ComponentID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BillOfMaterials
      WHERE
        /*  %JoinFKPK(BillOfMaterials,deleted," = "," AND") */
        BillOfMaterials.ProductAssemblyID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  SpecialOfferProduct on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(SpecialOfferProduct,deleted," = "," AND") */
        SpecialOfferProduct.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because SpecialOfferProduct exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductListPriceHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductListPriceHistory
      WHERE
        /*  %JoinFKPK(ProductListPriceHistory,deleted," = "," AND") */
        ProductListPriceHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductListPriceHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductInventory
      WHERE
        /*  %JoinFKPK(ProductInventory,deleted," = "," AND") */
        ProductInventory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductInventory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductDocument on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductDocument
      WHERE
        /*  %JoinFKPK(ProductDocument,deleted," = "," AND") */
        ProductDocument.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductDocument exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ShoppingCartItem on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ShoppingCartItem_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ShoppingCartItem
      WHERE
        /*  %JoinFKPK(ShoppingCartItem,deleted," = "," AND") */
        ShoppingCartItem.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ShoppingCartItem exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductCostHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductCostHistory
      WHERE
        /*  %JoinFKPK(ProductCostHistory,deleted," = "," AND") */
        ProductCostHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Product because ProductCostHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductSubcategory  Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductSubcategory
        WHERE
          /* %JoinFKPK(inserted,ProductSubcategory) */
          inserted.ProductSubcategoryID = ProductSubcategory.ProductSubcategoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductSubcategoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Product because ProductSubcategory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductModel  Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductModel
        WHERE
          /* %JoinFKPK(inserted,ProductModel) */
          inserted.ProductModelID = ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductModelID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Product because ProductModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* UnitMeasure  Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(WeightUnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,UnitMeasure) */
          inserted.WeightUnitMeasureCode = UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.WeightUnitMeasureCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Product because UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* UnitMeasure  Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SizeUnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,UnitMeasure) */
          inserted.SizeUnitMeasureCode = UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SizeUnitMeasureCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Product because UnitMeasure does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductCategory ON ProductCategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductCategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductCategory  ProductSubcategory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014be7", PARENT_OWNER="", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductSubcategory
      WHERE
        /*  %JoinFKPK(ProductSubcategory,deleted," = "," AND") */
        ProductSubcategory.ProductCategoryID = deleted.ProductCategoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductCategory because ProductSubcategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductCategory ON ProductCategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductCategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductCategoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductCategory  ProductSubcategory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017655", PARENT_OWNER="", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductCategoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductSubcategory
      WHERE
        /*  %JoinFKPK(ProductSubcategory,deleted," = "," AND") */
        ProductSubcategory.ProductCategoryID = deleted.ProductCategoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductCategory because ProductSubcategory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductCostHistory ON ProductCostHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductCostHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  ProductCostHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016ecf", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductCostHistory
          WHERE
            /* %JoinFKPK(ProductCostHistory,Product," = "," AND") */
            ProductCostHistory.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductCostHistory because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductCostHistory ON ProductCostHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductCostHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  ProductCostHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00017c15", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductCostHistory because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductDescription ON ProductDescription FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductDescription */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductDescription  ProductModelProductDescriptionCulture on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a30c", PARENT_OWNER="", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(ProductModelProductDescriptionCulture,deleted," = "," AND") */
        ProductModelProductDescriptionCulture.ProductDescriptionID = deleted.ProductDescriptionID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductDescription because ProductModelProductDescriptionCulture exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductDescription ON ProductDescription FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductDescription */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductDescriptionID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductDescription  ProductModelProductDescriptionCulture on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001bd86", PARENT_OWNER="", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductDescriptionID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(ProductModelProductDescriptionCulture,deleted," = "," AND") */
        ProductModelProductDescriptionCulture.ProductDescriptionID = deleted.ProductDescriptionID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductDescription because ProductModelProductDescriptionCulture exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductDocument ON ProductDocument FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductDocument */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Document  ProductDocument on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002c82b", PARENT_OWNER="", PARENT_TABLE="Document"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
    IF EXISTS (SELECT * FROM deleted,Document
      WHERE
        /* %JoinFKPK(deleted,Document," = "," AND") */
        deleted.DocumentNode = Document.DocumentNode AND
        NOT EXISTS (
          SELECT * FROM ProductDocument
          WHERE
            /* %JoinFKPK(ProductDocument,Document," = "," AND") */
            ProductDocument.DocumentNode = Document.DocumentNode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductDocument because Document exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductDocument on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductDocument
          WHERE
            /* %JoinFKPK(ProductDocument,Product," = "," AND") */
            ProductDocument.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductDocument because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductDocument ON ProductDocument FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductDocument */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insDocumentNode hierarchyid,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Document  ProductDocument on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002fff2", PARENT_OWNER="", PARENT_TABLE="Document"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DocumentNode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Document
        WHERE
          /* %JoinFKPK(inserted,Document) */
          inserted.DocumentNode = Document.DocumentNode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductDocument because Document does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductDocument on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductDocument because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductInventory ON ProductInventory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductInventory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  ProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002ce5a", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductInventory
          WHERE
            /* %JoinFKPK(ProductInventory,Product," = "," AND") */
            ProductInventory.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductInventory because Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Location  ProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (SELECT * FROM deleted,Location
      WHERE
        /* %JoinFKPK(deleted,Location," = "," AND") */
        deleted.LocationID = Location.LocationID AND
        NOT EXISTS (
          SELECT * FROM ProductInventory
          WHERE
            /* %JoinFKPK(ProductInventory,Location," = "," AND") */
            ProductInventory.LocationID = Location.LocationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductInventory because Location exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductInventory ON ProductInventory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductInventory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insLocationID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  ProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002df80", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductInventory because Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Location  ProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Location
        WHERE
          /* %JoinFKPK(inserted,Location) */
          inserted.LocationID = Location.LocationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductInventory because Location does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductListPriceHistory ON ProductListPriceHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductListPriceHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  ProductListPriceHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017ba1", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductListPriceHistory
          WHERE
            /* %JoinFKPK(ProductListPriceHistory,Product," = "," AND") */
            ProductListPriceHistory.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductListPriceHistory because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductListPriceHistory ON ProductListPriceHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductListPriceHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  ProductListPriceHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018b10", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductListPriceHistory because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductModel ON ProductModel FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModel */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductModel  ProductModelProductDescriptionCulture on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003d5dd", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(ProductModelProductDescriptionCulture,deleted," = "," AND") */
        ProductModelProductDescriptionCulture.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductModel because ProductModelProductDescriptionCulture exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductModel  ProductModelIllustration on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductModelIllustration
      WHERE
        /*  %JoinFKPK(ProductModelIllustration,deleted," = "," AND") */
        ProductModelIllustration.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductModel because ProductModelIllustration exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductModel  Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductModel because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductModel ON ProductModel FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModel */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductModel  ProductModelProductDescriptionCulture on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00041515", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(ProductModelProductDescriptionCulture,deleted," = "," AND") */
        ProductModelProductDescriptionCulture.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductModel because ProductModelProductDescriptionCulture exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductModel  ProductModelIllustration on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductModelIllustration
      WHERE
        /*  %JoinFKPK(ProductModelIllustration,deleted," = "," AND") */
        ProductModelIllustration.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductModel because ProductModelIllustration exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductModel  Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductModel because Product exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductModelIllustration ON ProductModelIllustration FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModelIllustration */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Illustration  ProductModelIllustration on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000313b9", PARENT_OWNER="", PARENT_TABLE="Illustration"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
    IF EXISTS (SELECT * FROM deleted,Illustration
      WHERE
        /* %JoinFKPK(deleted,Illustration," = "," AND") */
        deleted.IllustrationID = Illustration.IllustrationID AND
        NOT EXISTS (
          SELECT * FROM ProductModelIllustration
          WHERE
            /* %JoinFKPK(ProductModelIllustration,Illustration," = "," AND") */
            ProductModelIllustration.IllustrationID = Illustration.IllustrationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductModelIllustration because Illustration exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductModel  ProductModelIllustration on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,ProductModel
      WHERE
        /* %JoinFKPK(deleted,ProductModel," = "," AND") */
        deleted.ProductModelID = ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM ProductModelIllustration
          WHERE
            /* %JoinFKPK(ProductModelIllustration,ProductModel," = "," AND") */
            ProductModelIllustration.ProductModelID = ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductModelIllustration because ProductModel exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductModelIllustration ON ProductModelIllustration FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModelIllustration */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int, 
           @insIllustrationID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Illustration  ProductModelIllustration on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00033042", PARENT_OWNER="", PARENT_TABLE="Illustration"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(IllustrationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Illustration
        WHERE
          /* %JoinFKPK(inserted,Illustration) */
          inserted.IllustrationID = Illustration.IllustrationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductModelIllustration because Illustration does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductModel  ProductModelIllustration on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductModel
        WHERE
          /* %JoinFKPK(inserted,ProductModel) */
          inserted.ProductModelID = ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductModelIllustration because ProductModel does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductModelProductDescriptionCulture ON ProductModelProductDescriptionCulture FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModelProductDescriptionCulture */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductModel  ProductModelProductDescriptionCulture on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00054bc9", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,ProductModel
      WHERE
        /* %JoinFKPK(deleted,ProductModel," = "," AND") */
        deleted.ProductModelID = ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM ProductModelProductDescriptionCulture
          WHERE
            /* %JoinFKPK(ProductModelProductDescriptionCulture,ProductModel," = "," AND") */
            ProductModelProductDescriptionCulture.ProductModelID = ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductModelProductDescriptionCulture because ProductModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Culture  ProductModelProductDescriptionCulture on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Culture"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
    IF EXISTS (SELECT * FROM deleted,Culture
      WHERE
        /* %JoinFKPK(deleted,Culture," = "," AND") */
        deleted.CultureID = Culture.CultureID AND
        NOT EXISTS (
          SELECT * FROM ProductModelProductDescriptionCulture
          WHERE
            /* %JoinFKPK(ProductModelProductDescriptionCulture,Culture," = "," AND") */
            ProductModelProductDescriptionCulture.CultureID = Culture.CultureID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductModelProductDescriptionCulture because Culture exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductDescription  ProductModelProductDescriptionCulture on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
    IF EXISTS (SELECT * FROM deleted,ProductDescription
      WHERE
        /* %JoinFKPK(deleted,ProductDescription," = "," AND") */
        deleted.ProductDescriptionID = ProductDescription.ProductDescriptionID AND
        NOT EXISTS (
          SELECT * FROM ProductModelProductDescriptionCulture
          WHERE
            /* %JoinFKPK(ProductModelProductDescriptionCulture,ProductDescription," = "," AND") */
            ProductModelProductDescriptionCulture.ProductDescriptionID = ProductDescription.ProductDescriptionID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductModelProductDescriptionCulture because ProductDescription exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductModelProductDescriptionCulture ON ProductModelProductDescriptionCulture FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModelProductDescriptionCulture */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int, 
           @insProductDescriptionID int, 
           @insCultureID nchar(6),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductModel  ProductModelProductDescriptionCulture on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000532a1", PARENT_OWNER="", PARENT_TABLE="ProductModel"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductModel
        WHERE
          /* %JoinFKPK(inserted,ProductModel) */
          inserted.ProductModelID = ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductModelProductDescriptionCulture because ProductModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Culture  ProductModelProductDescriptionCulture on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Culture"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CultureID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Culture
        WHERE
          /* %JoinFKPK(inserted,Culture) */
          inserted.CultureID = Culture.CultureID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductModelProductDescriptionCulture because Culture does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductDescription  ProductModelProductDescriptionCulture on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductDescriptionID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductDescription
        WHERE
          /* %JoinFKPK(inserted,ProductDescription) */
          inserted.ProductDescriptionID = ProductDescription.ProductDescriptionID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductModelProductDescriptionCulture because ProductDescription does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductPhoto ON ProductPhoto FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductPhoto */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductPhoto  ProductProductPhoto on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000149f1", PARENT_OWNER="", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
    IF EXISTS (
      SELECT * FROM deleted,ProductProductPhoto
      WHERE
        /*  %JoinFKPK(ProductProductPhoto,deleted," = "," AND") */
        ProductProductPhoto.ProductPhotoID = deleted.ProductPhotoID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductPhoto because ProductProductPhoto exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductPhoto ON ProductPhoto FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductPhoto */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductPhotoID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductPhoto  ProductProductPhoto on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00016f0f", PARENT_OWNER="", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductPhotoID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductProductPhoto
      WHERE
        /*  %JoinFKPK(ProductProductPhoto,deleted," = "," AND") */
        ProductProductPhoto.ProductPhotoID = deleted.ProductPhotoID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductPhoto because ProductProductPhoto exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductProductPhoto ON ProductProductPhoto FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductProductPhoto */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductPhoto  ProductProductPhoto on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002f783", PARENT_OWNER="", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
    IF EXISTS (SELECT * FROM deleted,ProductPhoto
      WHERE
        /* %JoinFKPK(deleted,ProductPhoto," = "," AND") */
        deleted.ProductPhotoID = ProductPhoto.ProductPhotoID AND
        NOT EXISTS (
          SELECT * FROM ProductProductPhoto
          WHERE
            /* %JoinFKPK(ProductProductPhoto,ProductPhoto," = "," AND") */
            ProductProductPhoto.ProductPhotoID = ProductPhoto.ProductPhotoID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductProductPhoto because ProductPhoto exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductProductPhoto on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductProductPhoto
          WHERE
            /* %JoinFKPK(ProductProductPhoto,Product," = "," AND") */
            ProductProductPhoto.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductProductPhoto because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductProductPhoto ON ProductProductPhoto FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductProductPhoto */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insProductPhotoID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductPhoto  ProductProductPhoto on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000312cb", PARENT_OWNER="", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductPhotoID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductPhoto
        WHERE
          /* %JoinFKPK(inserted,ProductPhoto) */
          inserted.ProductPhotoID = ProductPhoto.ProductPhotoID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductProductPhoto because ProductPhoto does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductProductPhoto on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductProductPhoto because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductReview ON ProductReview FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductReview */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  ProductReview on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000158cc", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductReview
          WHERE
            /* %JoinFKPK(ProductReview,Product," = "," AND") */
            ProductReview.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductReview because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductReview ON ProductReview FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductReview */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductReviewID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  ProductReview on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00017753", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductReview because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductSubcategory ON ProductSubcategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductSubcategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ProductSubcategory  Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002c0ba", PARENT_OWNER="", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.ProductSubcategoryID = deleted.ProductSubcategoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ProductSubcategory because Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ProductCategory  ProductSubcategory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
    IF EXISTS (SELECT * FROM deleted,ProductCategory
      WHERE
        /* %JoinFKPK(deleted,ProductCategory," = "," AND") */
        deleted.ProductCategoryID = ProductCategory.ProductCategoryID AND
        NOT EXISTS (
          SELECT * FROM ProductSubcategory
          WHERE
            /* %JoinFKPK(ProductSubcategory,ProductCategory," = "," AND") */
            ProductSubcategory.ProductCategoryID = ProductCategory.ProductCategoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductSubcategory because ProductCategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductSubcategory ON ProductSubcategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductSubcategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductSubcategoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ProductSubcategory  Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002f629", PARENT_OWNER="", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.ProductSubcategoryID = deleted.ProductSubcategoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ProductSubcategory because Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ProductCategory  ProductSubcategory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductCategoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ProductCategory
        WHERE
          /* %JoinFKPK(inserted,ProductCategory) */
          inserted.ProductCategoryID = ProductCategory.ProductCategoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductSubcategory because ProductCategory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ProductVendor ON ProductVendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductVendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Vendor  ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00041ced", PARENT_OWNER="", PARENT_TABLE="Vendor"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Vendor
      WHERE
        /* %JoinFKPK(deleted,Vendor," = "," AND") */
        deleted.BusinessEntityID = Vendor.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM ProductVendor
          WHERE
            /* %JoinFKPK(ProductVendor,Vendor," = "," AND") */
            ProductVendor.BusinessEntityID = Vendor.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductVendor because Vendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* UnitMeasure  ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,UnitMeasure," = "," AND") */
        deleted.UnitMeasureCode = UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM ProductVendor
          WHERE
            /* %JoinFKPK(ProductVendor,UnitMeasure," = "," AND") */
            ProductVendor.UnitMeasureCode = UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductVendor because UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ProductVendor
          WHERE
            /* %JoinFKPK(ProductVendor,Product," = "," AND") */
            ProductVendor.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ProductVendor because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ProductVendor ON ProductVendor FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductVendor */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Vendor  ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004551e", PARENT_OWNER="", PARENT_TABLE="Vendor"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Vendor
        WHERE
          /* %JoinFKPK(inserted,Vendor) */
          inserted.BusinessEntityID = Vendor.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductVendor because Vendor does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* UnitMeasure  ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,UnitMeasure) */
          inserted.UnitMeasureCode = UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductVendor because UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ProductVendor because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PurchaseOrderDetail ON PurchaseOrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PurchaseOrderHeader  PurchaseOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00030e5f", PARENT_OWNER="", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", FK_COLUMNS="PurchaseOrderID" */
    IF EXISTS (SELECT * FROM deleted,PurchaseOrderHeader
      WHERE
        /* %JoinFKPK(deleted,PurchaseOrderHeader," = "," AND") */
        deleted.PurchaseOrderID = PurchaseOrderHeader.PurchaseOrderID AND
        NOT EXISTS (
          SELECT * FROM PurchaseOrderDetail
          WHERE
            /* %JoinFKPK(PurchaseOrderDetail,PurchaseOrderHeader," = "," AND") */
            PurchaseOrderDetail.PurchaseOrderID = PurchaseOrderHeader.PurchaseOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PurchaseOrderDetail because PurchaseOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  PurchaseOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM PurchaseOrderDetail
          WHERE
            /* %JoinFKPK(PurchaseOrderDetail,Product," = "," AND") */
            PurchaseOrderDetail.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PurchaseOrderDetail because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PurchaseOrderHeader ON PurchaseOrderHeader FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PurchaseOrderHeader  PurchaseOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00040e0c", PARENT_OWNER="", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", FK_COLUMNS="PurchaseOrderID" */
    IF EXISTS (
      SELECT * FROM deleted,PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(PurchaseOrderDetail,deleted," = "," AND") */
        PurchaseOrderDetail.PurchaseOrderID = deleted.PurchaseOrderID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PurchaseOrderHeader because PurchaseOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ShipMethod  PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (SELECT * FROM deleted,ShipMethod
      WHERE
        /* %JoinFKPK(deleted,ShipMethod," = "," AND") */
        deleted.ShipMethodID = ShipMethod.ShipMethodID AND
        NOT EXISTS (
          SELECT * FROM PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(PurchaseOrderHeader,ShipMethod," = "," AND") */
            PurchaseOrderHeader.ShipMethodID = ShipMethod.ShipMethodID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PurchaseOrderHeader because ShipMethod exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Vendor  PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Vendor"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_Vendor_VendorID", FK_COLUMNS="VendorID" */
    IF EXISTS (SELECT * FROM deleted,Vendor
      WHERE
        /* %JoinFKPK(deleted,Vendor," = "," AND") */
        deleted.VendorID = Vendor.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(PurchaseOrderHeader,Vendor," = "," AND") */
            PurchaseOrderHeader.VendorID = Vendor.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PurchaseOrderHeader because Vendor exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesOrderDetail ON SalesOrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SpecialOfferProduct  SalesOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000353c5", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
    IF EXISTS (SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /* %JoinFKPK(deleted,SpecialOfferProduct," = "," AND") */
        deleted.SpecialOfferID = SpecialOfferProduct.SpecialOfferID AND
        deleted.ProductID = SpecialOfferProduct.ProductID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderDetail
          WHERE
            /* %JoinFKPK(SalesOrderDetail,SpecialOfferProduct," = "," AND") */
            SalesOrderDetail.SpecialOfferID = SpecialOfferProduct.SpecialOfferID AND
            SalesOrderDetail.ProductID = SpecialOfferProduct.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderDetail because SpecialOfferProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    IF EXISTS (SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /* %JoinFKPK(deleted,SalesOrderHeader," = "," AND") */
        deleted.SalesOrderID = SalesOrderHeader.SalesOrderID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderDetail
          WHERE
            /* %JoinFKPK(SalesOrderDetail,SalesOrderHeader," = "," AND") */
            SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderDetail because SalesOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesOrderDetail ON SalesOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int, 
           @insSalesOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SpecialOfferProduct  SalesOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000360b4", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SpecialOfferID) OR
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SpecialOfferProduct
        WHERE
          /* %JoinFKPK(inserted,SpecialOfferProduct) */
          inserted.SpecialOfferID = SpecialOfferProduct.SpecialOfferID and
          inserted.ProductID = SpecialOfferProduct.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderDetail because SpecialOfferProduct does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesOrderHeader  SalesOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesOrderHeader
        WHERE
          /* %JoinFKPK(inserted,SalesOrderHeader) */
          inserted.SalesOrderID = SalesOrderHeader.SalesOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderDetail because SalesOrderHeader does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesOrderHeader ON SalesOrderHeader FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderDetail on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="000a7faa", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    DELETE SalesOrderDetail
      FROM SalesOrderDetail,deleted
      WHERE
        /*  %JoinFKPK(SalesOrderDetail,deleted," = "," AND") */
        SalesOrderDetail.SalesOrderID = deleted.SalesOrderID

    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderHeaderSalesReason on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    DELETE SalesOrderHeaderSalesReason
      FROM SalesOrderHeaderSalesReason,deleted
      WHERE
        /*  %JoinFKPK(SalesOrderHeaderSalesReason,deleted," = "," AND") */
        SalesOrderHeaderSalesReason.SalesOrderID = deleted.SalesOrderID

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,SalesTerritory," = "," AND") */
            SalesOrderHeader.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ShipMethod  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (SELECT * FROM deleted,ShipMethod
      WHERE
        /* %JoinFKPK(deleted,ShipMethod," = "," AND") */
        deleted.ShipMethodID = ShipMethod.ShipMethodID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,ShipMethod," = "," AND") */
            SalesOrderHeader.ShipMethodID = ShipMethod.ShipMethodID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because ShipMethod exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.SalesPersonID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,SalesPerson," = "," AND") */
            SalesOrderHeader.SalesPersonID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Customer_CustomerID", FK_COLUMNS="CustomerID" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustomerID = Customer.CustomerID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,Customer," = "," AND") */
            SalesOrderHeader.CustomerID = Customer.CustomerID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CurrencyRate  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", FK_COLUMNS="CurrencyRateID" */
    IF EXISTS (SELECT * FROM deleted,CurrencyRate
      WHERE
        /* %JoinFKPK(deleted,CurrencyRate," = "," AND") */
        deleted.CurrencyRateID = CurrencyRate.CurrencyRateID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,CurrencyRate," = "," AND") */
            SalesOrderHeader.CurrencyRateID = CurrencyRate.CurrencyRateID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CreditCard  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (SELECT * FROM deleted,CreditCard
      WHERE
        /* %JoinFKPK(deleted,CreditCard," = "," AND") */
        deleted.CreditCardID = CreditCard.CreditCardID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,CreditCard," = "," AND") */
            SalesOrderHeader.CreditCardID = CreditCard.CreditCardID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because CreditCard exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesOrderHeaderSalesReason ON SalesOrderHeaderSalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderHeaderSalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderHeaderSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000349ba", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    IF EXISTS (SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /* %JoinFKPK(deleted,SalesOrderHeader," = "," AND") */
        deleted.SalesOrderID = SalesOrderHeader.SalesOrderID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeaderSalesReason
          WHERE
            /* %JoinFKPK(SalesOrderHeaderSalesReason,SalesOrderHeader," = "," AND") */
            SalesOrderHeaderSalesReason.SalesOrderID = SalesOrderHeader.SalesOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeaderSalesReason because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesReason  SalesOrderHeaderSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
    IF EXISTS (SELECT * FROM deleted,SalesReason
      WHERE
        /* %JoinFKPK(deleted,SalesReason," = "," AND") */
        deleted.SalesReasonID = SalesReason.SalesReasonID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeaderSalesReason
          WHERE
            /* %JoinFKPK(SalesOrderHeaderSalesReason,SalesReason," = "," AND") */
            SalesOrderHeaderSalesReason.SalesReasonID = SalesReason.SalesReasonID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeaderSalesReason because SalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesOrderHeaderSalesReason ON SalesOrderHeaderSalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeaderSalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int, 
           @insSalesReasonID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesOrderHeader  SalesOrderHeaderSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00034985", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesOrderHeader
        WHERE
          /* %JoinFKPK(inserted,SalesOrderHeader) */
          inserted.SalesOrderID = SalesOrderHeader.SalesOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderHeaderSalesReason because SalesOrderHeader does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesReason  SalesOrderHeaderSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesReasonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesReason
        WHERE
          /* %JoinFKPK(inserted,SalesReason) */
          inserted.SalesReasonID = SalesReason.SalesReasonID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderHeaderSalesReason because SalesReason does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesPerson ON SalesPerson FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesPerson */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesPerson  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000609f8", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  Store on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Store
      WHERE
        /*  %JoinFKPK(Store,deleted," = "," AND") */
        Store.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesTerritoryHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because SalesTerritoryHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesPersonQuotaHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesPersonQuotaHistory
      WHERE
        /*  %JoinFKPK(SalesPersonQuotaHistory,deleted," = "," AND") */
        SalesPersonQuotaHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because SalesPersonQuotaHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesPerson on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM SalesPerson
          WHERE
            /* %JoinFKPK(SalesPerson,SalesTerritory," = "," AND") */
            SalesPerson.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesPerson because SalesTerritory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesPerson ON SalesPerson FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesPerson */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesPerson  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0006c49f", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  Store on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Store
      WHERE
        /*  %JoinFKPK(Store,deleted," = "," AND") */
        Store.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because Store exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  SalesTerritoryHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because SalesTerritoryHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  SalesPersonQuotaHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesPersonQuotaHistory
      WHERE
        /*  %JoinFKPK(SalesPersonQuotaHistory,deleted," = "," AND") */
        SalesPersonQuotaHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because SalesPersonQuotaHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesPerson on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesPerson because SalesTerritory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesPersonQuotaHistory ON SalesPersonQuotaHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesPersonQuotaHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesPerson  SalesPersonQuotaHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a195", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.BusinessEntityID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM SalesPersonQuotaHistory
          WHERE
            /* %JoinFKPK(SalesPersonQuotaHistory,SalesPerson," = "," AND") */
            SalesPersonQuotaHistory.BusinessEntityID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesPersonQuotaHistory because SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesPersonQuotaHistory ON SalesPersonQuotaHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesPersonQuotaHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insQuotaDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesPerson  SalesPersonQuotaHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b023", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesPerson
        WHERE
          /* %JoinFKPK(inserted,SalesPerson) */
          inserted.BusinessEntityID = SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesPersonQuotaHistory because SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesReason ON SalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesReason  SalesOrderHeaderSalesReason on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015ee8", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(SalesOrderHeaderSalesReason,deleted," = "," AND") */
        SalesOrderHeaderSalesReason.SalesReasonID = deleted.SalesReasonID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesReason because SalesOrderHeaderSalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesReason ON SalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesReasonID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesReason  SalesOrderHeaderSalesReason on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017f88", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesReasonID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(SalesOrderHeaderSalesReason,deleted," = "," AND") */
        SalesOrderHeaderSalesReason.SalesReasonID = deleted.SalesReasonID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesReason because SalesOrderHeaderSalesReason exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesTerritory ON SalesTerritory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTerritory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000477d0", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesTerritoryHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because SalesTerritoryHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesPerson on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesPerson
      WHERE
        /*  %JoinFKPK(SalesPerson,deleted," = "," AND") */
        SalesPerson.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesTerritory ON SalesTerritory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTerritory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTerritoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0004f735", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesTerritoryHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because SalesTerritoryHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesPerson on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesPerson
      WHERE
        /*  %JoinFKPK(SalesPerson,deleted," = "," AND") */
        SalesPerson.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because SalesPerson exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesTerritoryHistory ON SalesTerritoryHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTerritoryHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesTerritoryHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003224a", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM SalesTerritoryHistory
          WHERE
            /* %JoinFKPK(SalesTerritoryHistory,SalesTerritory," = "," AND") */
            SalesTerritoryHistory.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesTerritoryHistory because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesTerritoryHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.BusinessEntityID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM SalesTerritoryHistory
          WHERE
            /* %JoinFKPK(SalesTerritoryHistory,SalesPerson," = "," AND") */
            SalesTerritoryHistory.BusinessEntityID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesTerritoryHistory because SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesTerritoryHistory ON SalesTerritoryHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTerritoryHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insTerritoryID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesTerritoryHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00032b72", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesTerritoryHistory because SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  SalesTerritoryHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesPerson
        WHERE
          /* %JoinFKPK(inserted,SalesPerson) */
          inserted.BusinessEntityID = SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesTerritoryHistory because SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ScrapReason ON ScrapReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ScrapReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ScrapReason  WorkOrder on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00012da3", PARENT_OWNER="", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
    IF EXISTS (
      SELECT * FROM deleted,WorkOrder
      WHERE
        /*  %JoinFKPK(WorkOrder,deleted," = "," AND") */
        WorkOrder.ScrapReasonID = deleted.ScrapReasonID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ScrapReason because WorkOrder exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ScrapReason ON ScrapReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ScrapReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insScrapReasonID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ScrapReason  WorkOrder on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00014de7", PARENT_OWNER="", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ScrapReasonID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,WorkOrder
      WHERE
        /*  %JoinFKPK(WorkOrder,deleted," = "," AND") */
        WorkOrder.ScrapReasonID = deleted.ScrapReasonID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ScrapReason because WorkOrder exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ShipMethod ON ShipMethod FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ShipMethod */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ShipMethod  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00025a82", PARENT_OWNER="", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ShipMethod because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ShipMethod  PurchaseOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (
      SELECT * FROM deleted,PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(PurchaseOrderHeader,deleted," = "," AND") */
        PurchaseOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ShipMethod because PurchaseOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ShipMethod ON ShipMethod FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ShipMethod */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShipMethodID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ShipMethod  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000299f2", PARENT_OWNER="", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ShipMethod because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ShipMethod  PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(PurchaseOrderHeader,deleted," = "," AND") */
        PurchaseOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ShipMethod because PurchaseOrderHeader exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ShoppingCartItem ON ShoppingCartItem FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ShoppingCartItem */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  ShoppingCartItem on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000163d0", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ShoppingCartItem_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM ShoppingCartItem
          WHERE
            /* %JoinFKPK(ShoppingCartItem,Product," = "," AND") */
            ShoppingCartItem.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last ShoppingCartItem because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ShoppingCartItem ON ShoppingCartItem FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ShoppingCartItem */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShoppingCartItemID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  ShoppingCartItem on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00017a51", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="ShoppingCartItem"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ShoppingCartItem_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update ShoppingCartItem because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SpecialOffer ON SpecialOffer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SpecialOffer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SpecialOffer  SpecialOfferProduct on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015906", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
    IF EXISTS (
      SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(SpecialOfferProduct,deleted," = "," AND") */
        SpecialOfferProduct.SpecialOfferID = deleted.SpecialOfferID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SpecialOffer because SpecialOfferProduct exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SpecialOffer ON SpecialOffer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SpecialOffer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSpecialOfferID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SpecialOffer  SpecialOfferProduct on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017199", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SpecialOfferID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(SpecialOfferProduct,deleted," = "," AND") */
        SpecialOfferProduct.SpecialOfferID = deleted.SpecialOfferID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SpecialOffer because SpecialOfferProduct exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SpecialOfferProduct ON SpecialOfferProduct FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SpecialOfferProduct */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SpecialOfferProduct  SalesOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000440ec", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderDetail
      WHERE
        /*  %JoinFKPK(SalesOrderDetail,deleted," = "," AND") */
        SalesOrderDetail.SpecialOfferID = deleted.SpecialOfferID AND
        SalesOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SpecialOfferProduct because SalesOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SpecialOffer  SpecialOfferProduct on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
    IF EXISTS (SELECT * FROM deleted,SpecialOffer
      WHERE
        /* %JoinFKPK(deleted,SpecialOffer," = "," AND") */
        deleted.SpecialOfferID = SpecialOffer.SpecialOfferID AND
        NOT EXISTS (
          SELECT * FROM SpecialOfferProduct
          WHERE
            /* %JoinFKPK(SpecialOfferProduct,SpecialOffer," = "," AND") */
            SpecialOfferProduct.SpecialOfferID = SpecialOffer.SpecialOfferID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SpecialOfferProduct because SpecialOffer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  SpecialOfferProduct on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM SpecialOfferProduct
          WHERE
            /* %JoinFKPK(SpecialOfferProduct,Product," = "," AND") */
            SpecialOfferProduct.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SpecialOfferProduct because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SpecialOfferProduct ON SpecialOfferProduct FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SpecialOfferProduct */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSpecialOfferID int, 
           @insProductID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SpecialOfferProduct  SalesOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0004a5ab", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SpecialOfferID) OR
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderDetail
      WHERE
        /*  %JoinFKPK(SalesOrderDetail,deleted," = "," AND") */
        SalesOrderDetail.SpecialOfferID = deleted.SpecialOfferID AND
        SalesOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SpecialOfferProduct because SalesOrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SpecialOffer  SpecialOfferProduct on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SpecialOfferID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SpecialOffer
        WHERE
          /* %JoinFKPK(inserted,SpecialOffer) */
          inserted.SpecialOfferID = SpecialOffer.SpecialOfferID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SpecialOfferProduct because SpecialOffer does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Product  SpecialOfferProduct on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SpecialOfferProduct because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_StateProvince ON StateProvince FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on StateProvince */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StateProvince  Address on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028ff4", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,Address
      WHERE
        /*  %JoinFKPK(Address,deleted," = "," AND") */
        Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete StateProvince because Address exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  StateProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,CountryRegion
      WHERE
        /* %JoinFKPK(deleted,CountryRegion," = "," AND") */
        deleted.CountryRegionCode = CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM StateProvince
          WHERE
            /* %JoinFKPK(StateProvince,CountryRegion," = "," AND") */
            StateProvince.CountryRegionCode = CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last StateProvince because CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_StateProvince ON StateProvince FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on StateProvince */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStateProvinceID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StateProvince  Address on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c27e", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Address
      WHERE
        /*  %JoinFKPK(Address,deleted," = "," AND") */
        Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update StateProvince because Address exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  StateProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CountryRegion
        WHERE
          /* %JoinFKPK(inserted,CountryRegion) */
          inserted.CountryRegionCode = CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update StateProvince because CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Store ON Store FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Store */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Store  Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00024a2b", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.StoreID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Store because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  Store on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.SalesPersonID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Store
          WHERE
            /* %JoinFKPK(Store,SalesPerson," = "," AND") */
            Store.SalesPersonID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Store because SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Store ON Store FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Store */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Store  Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002b2bf", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.StoreID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Store because Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  Store on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesPersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesPerson
        WHERE
          /* %JoinFKPK(inserted,SalesPerson) */
          inserted.SalesPersonID = SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SalesPersonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Store because SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_TransactionHistory ON TransactionHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on TransactionHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Product  TransactionHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017509", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM TransactionHistory
          WHERE
            /* %JoinFKPK(TransactionHistory,Product," = "," AND") */
            TransactionHistory.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last TransactionHistory because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_TransactionHistory ON TransactionHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on TransactionHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTransactionID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Product  TransactionHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001805e", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Product
        WHERE
          /* %JoinFKPK(inserted,Product) */
          inserted.ProductID = Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update TransactionHistory because Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_UnitMeasure ON UnitMeasure FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on UnitMeasure */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* UnitMeasure  ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000468a6", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,ProductVendor
      WHERE
        /*  %JoinFKPK(ProductVendor,deleted," = "," AND") */
        ProductVendor.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete UnitMeasure because ProductVendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* UnitMeasure  BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,BillOfMaterials
      WHERE
        /*  %JoinFKPK(BillOfMaterials,deleted," = "," AND") */
        BillOfMaterials.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete UnitMeasure because BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* UnitMeasure  Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.WeightUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete UnitMeasure because Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* UnitMeasure  Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.SizeUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete UnitMeasure because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_UnitMeasure ON UnitMeasure FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on UnitMeasure */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insUnitMeasureCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* UnitMeasure  ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0004e33d", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductVendor
      WHERE
        /*  %JoinFKPK(ProductVendor,deleted," = "," AND") */
        ProductVendor.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update UnitMeasure because ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* UnitMeasure  BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BillOfMaterials
      WHERE
        /*  %JoinFKPK(BillOfMaterials,deleted," = "," AND") */
        BillOfMaterials.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update UnitMeasure because BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* UnitMeasure  Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.WeightUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update UnitMeasure because Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* UnitMeasure  Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Product
      WHERE
        /*  %JoinFKPK(Product,deleted," = "," AND") */
        Product.SizeUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update UnitMeasure because Product exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tU_Vendor ON Vendor FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Vendor */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Vendor  PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000287ff", PARENT_OWNER="", PARENT_TABLE="Vendor"
    CHILD_OWNER="", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_Vendor_VendorID", FK_COLUMNS="VendorID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(PurchaseOrderHeader,deleted," = "," AND") */
        PurchaseOrderHeader.VendorID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Vendor because PurchaseOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Vendor  ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Vendor"
    CHILD_OWNER="", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,ProductVendor
      WHERE
        /*  %JoinFKPK(ProductVendor,deleted," = "," AND") */
        ProductVendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Vendor because ProductVendor exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_WorkOrder ON WorkOrder FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on WorkOrder */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* WorkOrder  WorkOrderRouting on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a518", PARENT_OWNER="", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
    IF EXISTS (
      SELECT * FROM deleted,WorkOrderRouting
      WHERE
        /*  %JoinFKPK(WorkOrderRouting,deleted," = "," AND") */
        WorkOrderRouting.WorkOrderID = deleted.WorkOrderID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete WorkOrder because WorkOrderRouting exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ScrapReason  WorkOrder on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
    IF EXISTS (SELECT * FROM deleted,ScrapReason
      WHERE
        /* %JoinFKPK(deleted,ScrapReason," = "," AND") */
        deleted.ScrapReasonID = ScrapReason.ScrapReasonID AND
        NOT EXISTS (
          SELECT * FROM WorkOrder
          WHERE
            /* %JoinFKPK(WorkOrder,ScrapReason," = "," AND") */
            WorkOrder.ScrapReasonID = ScrapReason.ScrapReasonID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last WorkOrder because ScrapReason exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Product  WorkOrder on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Product"
    CHILD_OWNER="", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Product
      WHERE
        /* %JoinFKPK(deleted,Product," = "," AND") */
        deleted.ProductID = Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM WorkOrder
          WHERE
            /* %JoinFKPK(WorkOrder,Product," = "," AND") */
            WorkOrder.ProductID = Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last WorkOrder because Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_WorkOrderRouting ON WorkOrderRouting FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on WorkOrderRouting */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* WorkOrder  WorkOrderRouting on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002cde1", PARENT_OWNER="", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
    IF EXISTS (SELECT * FROM deleted,WorkOrder
      WHERE
        /* %JoinFKPK(deleted,WorkOrder," = "," AND") */
        deleted.WorkOrderID = WorkOrder.WorkOrderID AND
        NOT EXISTS (
          SELECT * FROM WorkOrderRouting
          WHERE
            /* %JoinFKPK(WorkOrderRouting,WorkOrder," = "," AND") */
            WorkOrderRouting.WorkOrderID = WorkOrder.WorkOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last WorkOrderRouting because WorkOrder exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Location  WorkOrderRouting on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (SELECT * FROM deleted,Location
      WHERE
        /* %JoinFKPK(deleted,Location," = "," AND") */
        deleted.LocationID = Location.LocationID AND
        NOT EXISTS (
          SELECT * FROM WorkOrderRouting
          WHERE
            /* %JoinFKPK(WorkOrderRouting,Location," = "," AND") */
            WorkOrderRouting.LocationID = Location.LocationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last WorkOrderRouting because Location exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_WorkOrderRouting ON WorkOrderRouting FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrderRouting */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int, 
           @insProductID int, 
           @insOperationSequence smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* WorkOrder  WorkOrderRouting on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002ecd0", PARENT_OWNER="", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(WorkOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,WorkOrder
        WHERE
          /* %JoinFKPK(inserted,WorkOrder) */
          inserted.WorkOrderID = WorkOrder.WorkOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update WorkOrderRouting because WorkOrder does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Location  WorkOrderRouting on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Location"
    CHILD_OWNER="", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Location
        WHERE
          /* %JoinFKPK(inserted,Location) */
          inserted.LocationID = Location.LocationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update WorkOrderRouting because Location does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


