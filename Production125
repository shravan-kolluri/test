
CREATE TYPE [AccountNumber]
	FROM NVARCHAR(15) NULL
go

CREATE TYPE [Flag]
	FROM BIT NOT NULL
go

CREATE TYPE [NameStyle]
	FROM BIT NOT NULL
go

CREATE TYPE [Name]
	FROM NVARCHAR(50) NULL
go

CREATE TYPE [OrderNumber]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Phone]
	FROM NVARCHAR(25) NULL
go

CREATE TABLE [BillOfMaterials]
( 
	[BillOfMaterialsID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductAssemblyID]  int  NULL ,
	[ComponentID]        int  NOT NULL ,
	[StartDate]          datetime  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_StartDate]
		 DEFAULT  getdate(),
	[EndDate]            datetime  NULL ,
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[BOMLevel]           smallint  NOT NULL ,
	[PerAssemblyQty]     decimal(8,2)  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_PerAssemblyQty]
		 DEFAULT  1.00,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BillOfMaterials_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [BillOfMaterials]
	 WITH CHECK ADD CONSTRAINT [CK_BillOfMaterials_PerAssemblyQty] CHECK  ( PerAssemblyQty >= 1.00 )
go

CREATE TABLE [Culture]
( 
	[CultureID]          nchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Culture_ModifiedDate]
		 DEFAULT  getdate(),
	[culture_group]      char(18) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

CREATE TABLE [Document]
( 
	[DocumentNode]       hierarchyid  NOT NULL ,
	[DocumentLevel]      AS ([DocumentNode].[GetLevel]()) ,
	[Title]              nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Owner]              int  NOT NULL ,
	[FolderFlag]         bit  NOT NULL 
	CONSTRAINT [DF_Document_FolderFlag]
		 DEFAULT  0,
	[FileName]           nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[FileExtension]      nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Revision]           nchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ChangeNumber]       int  NOT NULL 
	CONSTRAINT [DF_Document_ChangeNumber]
		 DEFAULT  0,
	[Status]             tinyint  NOT NULL ,
	[DocumentSummary]    nvarchar(max) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Document]           varbinary(max)  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Document_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Document_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Document]
	 WITH CHECK ADD CONSTRAINT [CK_Document_Status] CHECK  ( Status BETWEEN 1 AND 3 )
go

CREATE TABLE [Illustration]
( 
	[IllustrationID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Diagram]            xml  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Illustration_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Location]
( 
	[LocationID]         smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CostRate]           smallmoney  NOT NULL 
	CONSTRAINT [DF_Location_CostRate]
		 DEFAULT  0.00,
	[Availability]       decimal(8,2)  NOT NULL 
	CONSTRAINT [DF_Location_Availability]
		 DEFAULT  0.00,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Location_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Location]
	 WITH CHECK ADD CONSTRAINT [CK_Location_CostRate] CHECK  ( CostRate >= 0.00 )
go

ALTER TABLE [Location]
	 WITH CHECK ADD CONSTRAINT [CK_Location_Availability] CHECK  ( Availability >= 0.00 )
go

CREATE TABLE [new_table]
( 
	[col1]               char(18)  NULL 
)
go

CREATE TABLE [Product]
( 
	[ProductID]          int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ProductNumber]      nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[MakeFlag]           [Flag]  NOT NULL 
	CONSTRAINT [DF_Product_MakeFlag]
		 DEFAULT  1,
	[FinishedGoodsFlag]  [Flag]  NOT NULL 
	CONSTRAINT [DF_Product_FinishedGoodsFlag]
		 DEFAULT  1,
	[Color]              nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[SafetyStockLevel]   smallint  NOT NULL ,
	[ReorderPoint]       smallint  NOT NULL ,
	[StandardCost]       money  NOT NULL ,
	[ListPrice]          money  NOT NULL ,
	[Size]               nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[SizeUnitMeasureCode] nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[WeightUnitMeasureCode] nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Weight]             decimal(8,2)  NULL ,
	[DaysToManufacture]  int  NOT NULL ,
	[ProductLine]        nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Class]              nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Style]              nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ProductSubcategoryID] int  NULL ,
	[ProductModelID]     int  NULL ,
	[SellStartDate]      datetime  NOT NULL ,
	[SellEndDate]        datetime  NULL ,
	[DiscontinuedDate]   datetime  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Product_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Product_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_SafetyStockLevel] CHECK  ( [SafetyStockLevel]>(0) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ReorderPoint] CHECK  ( [ReorderPoint]>(0) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_StandardCost] CHECK  ( StandardCost >= 0.00 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ListPrice] CHECK  ( ListPrice >= 0.00 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Weight] CHECK  ( [Weight]>(0.00) )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_DaysToManufacture] CHECK  ( DaysToManufacture >= 0 )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_ProductLine] CHECK  ( upper([ProductLine])='R' OR upper([ProductLine])='M' OR upper([ProductLine])='T' OR upper([ProductLine])='S' OR [ProductLine] IS NULL )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Class] CHECK  ( upper([Class])='H' OR upper([Class])='M' OR upper([Class])='L' OR [Class] IS NULL )
go

ALTER TABLE [Product]
	 WITH CHECK ADD CONSTRAINT [CK_Product_Style] CHECK  ( upper([Style])='U' OR upper([Style])='M' OR upper([Style])='W' OR [Style] IS NULL )
go

CREATE TABLE [ProductCategory]
( 
	[ProductCategoryID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductCategory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductCategory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductCostHistory]
( 
	[ProductID]          int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[StandardCost]       money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductCostHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductCostHistory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductCostHistory_StandardCost] CHECK  ( StandardCost >= 0.00 )
go

CREATE TABLE [ProductDescription]
( 
	[ProductDescriptionID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[Description]        nvarchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductDescription_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductDescription_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductDocument]
( 
	[ProductID]          int  NOT NULL ,
	[DocumentNode]       hierarchyid  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductDocument_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductInventory]
( 
	[ProductID]          int  NOT NULL ,
	[LocationID]         smallint  NOT NULL ,
	[Shelf]              nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Bin]                tinyint  NOT NULL ,
	[Quantity]           smallint  NOT NULL 
	CONSTRAINT [DF_ProductInventory_Quantity]
		 DEFAULT  0,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductInventory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductInventory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductInventory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductInventory_Shelf] CHECK  ( [Shelf] like '[A-Za-z]' OR [Shelf]='N/A' )
go

ALTER TABLE [ProductInventory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductInventory_Bin] CHECK  ( Bin BETWEEN 0 AND 100 )
go

CREATE TABLE [ProductListPriceHistory]
( 
	[ProductID]          int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[ListPrice]          money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductListPriceHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductListPriceHistory]
	 WITH CHECK ADD CONSTRAINT [CK_ProductListPriceHistory_ListPrice] CHECK  ( [ListPrice]>(0.00) )
go

CREATE TABLE [ProductModel]
( 
	[ProductModelID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CatalogDescription] xml ( CONTENT [ProductDescriptionSchemaCollection] ) NULL ,
	[Instructions]       xml ( CONTENT [ManuInstructionsSchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductModel_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModel_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductModelIllustration]
( 
	[ProductModelID]     int  NOT NULL ,
	[IllustrationID]     int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModelIllustration_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductModelProductDescriptionCulture]
( 
	[ProductModelID]     int  NOT NULL ,
	[ProductDescriptionID] int  NOT NULL ,
	[CultureID]          nchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductModelProductDescriptionCulture_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductPhoto]
( 
	[ProductPhotoID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[ThumbNailPhoto]     varbinary(max)  NULL ,
	[ThumbnailPhotoFileName] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[LargePhoto]         varbinary(max)  NULL ,
	[LargePhotoFileName] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductPhoto_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductProductPhoto]
( 
	[ProductID]          int  NOT NULL ,
	[ProductPhotoID]     int  NOT NULL ,
	[Primary]            [Flag]  NOT NULL 
	CONSTRAINT [DF_ProductProductPhoto_Primary]
		 DEFAULT  0,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductProductPhoto_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductReview]
( 
	[ProductReviewID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReviewerName]       [Name]  NOT NULL ,
	[ReviewDate]         datetime  NOT NULL 
	CONSTRAINT [DF_ProductReview_ReviewDate]
		 DEFAULT  getdate(),
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Rating]             int  NOT NULL ,
	[Comments]           nvarchar(3850) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductReview_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductReview]
	 WITH CHECK ADD CONSTRAINT [CK_ProductReview_Rating] CHECK  ( Rating BETWEEN 1 AND 5 )
go

CREATE TABLE [ProductSubcategory]
( 
	[ProductSubcategoryID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductCategoryID]  int  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ProductSubcategory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductSubcategory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ProductVendor]
( 
	[ProductID]          int  NOT NULL ,
	[BusinessEntityID]   int  NOT NULL ,
	[AverageLeadTime]    int  NOT NULL ,
	[StandardPrice]      money  NOT NULL ,
	[LastReceiptCost]    money  NULL ,
	[LastReceiptDate]    datetime  NULL ,
	[MinOrderQty]        int  NOT NULL ,
	[MaxOrderQty]        int  NOT NULL ,
	[OnOrderQty]         int  NULL ,
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ProductVendor_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_AverageLeadTime] CHECK  ( AverageLeadTime >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_StandardPrice] CHECK  ( [StandardPrice]>(0.00) )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_LastReceiptCost] CHECK  ( [LastReceiptCost]>(0.00) )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_MinOrderQty] CHECK  ( MinOrderQty >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_MaxOrderQty] CHECK  ( MaxOrderQty >= 1 )
go

ALTER TABLE [ProductVendor]
	 WITH CHECK ADD CONSTRAINT [CK_ProductVendor_OnOrderQty] CHECK  ( OnOrderQty >= 0 )
go

CREATE TABLE [PurchaseOrderDetail]
( 
	[PurchaseOrderID]    int  NOT NULL ,
	[PurchaseOrderDetailID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[DueDate]            datetime  NOT NULL ,
	[OrderQty]           smallint  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[UnitPrice]          money  NOT NULL ,
	[LineTotal]          AS (isnull([OrderQty]*[UnitPrice],(0.00))) ,
	[ReceivedQty]        decimal(8,2)  NOT NULL ,
	[RejectedQty]        decimal(8,2)  NOT NULL ,
	[StockedQty]         AS (isnull([ReceivedQty]-[RejectedQty],(0.00))) ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderDetail_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_UnitPrice] CHECK  ( UnitPrice >= 0.00 )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_ReceivedQty] CHECK  ( ReceivedQty >= 0.00 )
go

ALTER TABLE [PurchaseOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderDetail_RejectedQty] CHECK  ( RejectedQty >= 0.00 )
go

CREATE TABLE [PurchaseOrderHeader]
( 
	[PurchaseOrderID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[RevisionNumber]     tinyint  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_RevisionNumber]
		 DEFAULT  0,
	[Status]             tinyint  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_Status]
		 DEFAULT  1,
	[EmployeeID]         int  NOT NULL ,
	[VendorID]           int  NOT NULL ,
	[ShipMethodID]       int  NOT NULL ,
	[OrderDate]          datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_OrderDate]
		 DEFAULT  getdate(),
	[ShipDate]           datetime  NULL ,
	[SubTotal]           money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_SubTotal]
		 DEFAULT  0.00,
	[TaxAmt]             money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_TaxAmt]
		 DEFAULT  0.00,
	[Freight]            money  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_Freight]
		 DEFAULT  0.00,
	[TotalDue]           AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))) PERSISTED NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PurchaseOrderHeader_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_Status] CHECK  ( Status BETWEEN 1 AND 4 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_SubTotal] CHECK  ( SubTotal >= 0.00 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_TaxAmt] CHECK  ( TaxAmt >= 0.00 )
go

ALTER TABLE [PurchaseOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_PurchaseOrderHeader_Freight] CHECK  ( Freight >= 0.00 )
go

CREATE TABLE [ScrapReason]
( 
	[ScrapReasonID]      smallint  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ScrapReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ShipMethod]
( 
	[ShipMethodID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ShipBase]           money  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ShipBase]
		 DEFAULT  0.00,
	[ShipRate]           money  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ShipRate]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_ShipMethod_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ShipMethod_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ShipMethod]
	 WITH CHECK ADD CONSTRAINT [CK_ShipMethod_ShipBase] CHECK  ( [ShipBase]>(0.00) )
go

ALTER TABLE [ShipMethod]
	 WITH CHECK ADD CONSTRAINT [CK_ShipMethod_ShipRate] CHECK  ( [ShipRate]>(0.00) )
go

CREATE TABLE [TransactionHistory]
( 
	[TransactionID]      int  IDENTITY ( 100000,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReferenceOrderID]   int  NOT NULL ,
	[ReferenceOrderLineID] int  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_ReferenceOrderLineID]
		 DEFAULT  0,
	[TransactionDate]    datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_TransactionDate]
		 DEFAULT  getdate(),
	[TransactionType]    nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL ,
	[ActualCost]         money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [TransactionHistory]
	 WITH CHECK ADD CONSTRAINT [CK_TransactionHistory_TransactionType] CHECK  ( [TransactionType]='P' OR [TransactionType]='S' OR [TransactionType]='W' )
go

CREATE TABLE [TransactionHistoryArchive]
( 
	[TransactionID]      int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[ReferenceOrderID]   int  NOT NULL ,
	[ReferenceOrderLineID] int  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_ReferenceOrderLineID]
		 DEFAULT  0,
	[TransactionDate]    datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_TransactionDate]
		 DEFAULT  getdate(),
	[TransactionType]    nchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL ,
	[ActualCost]         money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_TransactionHistoryArchive_ModifiedDate]
		 DEFAULT  getdate(),
	[email]              char(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

ALTER TABLE [TransactionHistoryArchive]
	 WITH CHECK ADD CONSTRAINT [CK_TransactionHistoryArchive_TransactionType] CHECK  ( [TransactionType]='P' OR [TransactionType]='S' OR [TransactionType]='W' )
go

CREATE TABLE [UnitMeasure]
( 
	[UnitMeasureCode]    nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_UnitMeasure_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Vendor]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AccountNumber]      [AccountNumber]  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CreditRating]       tinyint  NOT NULL ,
	[PreferredVendorStatus] [Flag]  NOT NULL 
	CONSTRAINT [DF_Vendor_PreferredVendorStatus]
		 DEFAULT  1,
	[ActiveFlag]         [Flag]  NOT NULL 
	CONSTRAINT [DF_Vendor_ActiveFlag]
		 DEFAULT  1,
	[PurchasingWebServiceURL] nvarchar(1024) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Vendor_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Vendor]
	 WITH CHECK ADD CONSTRAINT [CK_Vendor_CreditRating] CHECK  ( CreditRating BETWEEN 1 AND 5 )
go

CREATE TABLE [WorkOrder]
( 
	[WorkOrderID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[OrderQty]           int  NOT NULL ,
	[StockedQty]         AS (isnull([OrderQty]-[ScrappedQty],(0))) ,
	[ScrappedQty]        smallint  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[DueDate]            datetime  NOT NULL ,
	[ScrapReasonID]      smallint  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_WorkOrder_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [WorkOrder]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrder_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [WorkOrder]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrder_ScrappedQty] CHECK  ( ScrappedQty >= 0 )
go

CREATE TABLE [WorkOrderRouting]
( 
	[WorkOrderID]        int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[OperationSequence]  smallint  NOT NULL ,
	[LocationID]         smallint  NOT NULL ,
	[ScheduledStartDate] datetime  NOT NULL ,
	[ScheduledEndDate]   datetime  NOT NULL ,
	[ActualStartDate]    datetime  NULL ,
	[ActualEndDate]      datetime  NULL ,
	[ActualResourceHrs]  decimal(9,4)  NULL ,
	[PlannedCost]        money  NOT NULL ,
	[ActualCost]         money  NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_WorkOrderRouting_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_ActualResourceHrs] CHECK  ( ActualResourceHrs >= 0.0000 )
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_PlannedCost] CHECK  ( [PlannedCost]>(0.00) )
go

ALTER TABLE [WorkOrderRouting]
	 WITH CHECK ADD CONSTRAINT [CK_WorkOrderRouting_ActualCost] CHECK  ( [ActualCost]>(0.00) )
go

ALTER TABLE [BillOfMaterials]
	ADD CONSTRAINT [PK_BillOfMaterials_BillOfMaterialsID] PRIMARY KEY  NONCLUSTERED ([BillOfMaterialsID] ASC)
go

CREATE UNIQUE CLUSTERED INDEX [AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate] ON [BillOfMaterials]
( 
	[ProductAssemblyID]   ASC,
	[ComponentID]         ASC,
	[StartDate]           ASC
)
go

ALTER TABLE [Culture]
	ADD CONSTRAINT [PK_Culture_CultureID] PRIMARY KEY  CLUSTERED ([CultureID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Culture_Name] ON [Culture]
( 
	[Name]                ASC
)
go

ALTER TABLE [Document]
	ADD CONSTRAINT [PK_Document_DocumentNode] PRIMARY KEY  CLUSTERED ([DocumentNode] ASC)
go

ALTER TABLE [Document]
	ADD CONSTRAINT [UQ__Document__F73921F7C5112C2E] UNIQUE ([rowguid]  ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Document_DocumentLevel_DocumentNode] ON [Document]
( 
	[DocumentLevel]       ASC,
	[DocumentNode]        ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Document_rowguid] ON [Document]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Document_FileName_Revision] ON [Document]
( 
	[FileName]            ASC,
	[Revision]            ASC
)
go

ALTER TABLE [Illustration]
	ADD CONSTRAINT [PK_Illustration_IllustrationID] PRIMARY KEY  CLUSTERED ([IllustrationID] ASC)
go

ALTER TABLE [Location]
	ADD CONSTRAINT [PK_Location_LocationID] PRIMARY KEY  CLUSTERED ([LocationID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Location_Name] ON [Location]
( 
	[Name]                ASC
)
go

ALTER TABLE [Product]
	ADD CONSTRAINT [PK_Product_ProductID] PRIMARY KEY  CLUSTERED ([ProductID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_ProductNumber] ON [Product]
( 
	[ProductNumber]       ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_Name] ON [Product]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Product_rowguid] ON [Product]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductCategory]
	ADD CONSTRAINT [PK_ProductCategory_ProductCategoryID] PRIMARY KEY  CLUSTERED ([ProductCategoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductCategory_Name] ON [ProductCategory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductCategory_rowguid] ON [ProductCategory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductCostHistory]
	ADD CONSTRAINT [PK_ProductCostHistory_ProductID_StartDate] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[StartDate] ASC)
go

ALTER TABLE [ProductDescription]
	ADD CONSTRAINT [PK_ProductDescription_ProductDescriptionID] PRIMARY KEY  CLUSTERED ([ProductDescriptionID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductDescription_rowguid] ON [ProductDescription]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductDocument]
	ADD CONSTRAINT [PK_ProductDocument_ProductID_DocumentNode] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[DocumentNode] ASC)
go

ALTER TABLE [ProductInventory]
	ADD CONSTRAINT [PK_ProductInventory_ProductID_LocationID] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[LocationID] ASC)
go

ALTER TABLE [ProductListPriceHistory]
	ADD CONSTRAINT [PK_ProductListPriceHistory_ProductID_StartDate] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[StartDate] ASC)
go

ALTER TABLE [ProductModel]
	ADD CONSTRAINT [PK_ProductModel_ProductModelID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductModel_Name] ON [ProductModel]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductModel_rowguid] ON [ProductModel]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductModelIllustration]
	ADD CONSTRAINT [PK_ProductModelIllustration_ProductModelID_IllustrationID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC,[IllustrationID] ASC)
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	ADD CONSTRAINT [PK_ProductModelProductDescriptionCulture_ProductModelID_ProductDescriptionID_CultureID] PRIMARY KEY  CLUSTERED ([ProductModelID] ASC,[ProductDescriptionID] ASC,[CultureID] ASC)
go

ALTER TABLE [ProductPhoto]
	ADD CONSTRAINT [PK_ProductPhoto_ProductPhotoID] PRIMARY KEY  CLUSTERED ([ProductPhotoID] ASC)
go

ALTER TABLE [ProductProductPhoto]
	ADD CONSTRAINT [PK_ProductProductPhoto_ProductID_ProductPhotoID] PRIMARY KEY  NONCLUSTERED ([ProductID] ASC,[ProductPhotoID] ASC)
go

ALTER TABLE [ProductReview]
	ADD CONSTRAINT [PK_ProductReview_ProductReviewID] PRIMARY KEY  CLUSTERED ([ProductReviewID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_ProductReview_ProductID_Name] ON [ProductReview]
( 
	[ProductID]           ASC,
	[ReviewerName]        ASC
)
INCLUDE( [Comments] )
go

ALTER TABLE [ProductSubcategory]
	ADD CONSTRAINT [PK_ProductSubcategory_ProductSubcategoryID] PRIMARY KEY  CLUSTERED ([ProductSubcategoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductSubcategory_Name] ON [ProductSubcategory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ProductSubcategory_rowguid] ON [ProductSubcategory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ProductVendor]
	ADD CONSTRAINT [PK_ProductVendor_ProductID_BusinessEntityID] PRIMARY KEY  CLUSTERED ([ProductID] ASC,[BusinessEntityID] ASC)
go

ALTER TABLE [PurchaseOrderDetail]
	ADD CONSTRAINT [PK_PurchaseOrderDetail_PurchaseOrderID_PurchaseOrderDetailID] PRIMARY KEY  CLUSTERED ([PurchaseOrderID] ASC,[PurchaseOrderDetailID] ASC)
go

ALTER TABLE [PurchaseOrderHeader]
	ADD CONSTRAINT [PK_PurchaseOrderHeader_PurchaseOrderID] PRIMARY KEY  CLUSTERED ([PurchaseOrderID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PurchaseOrderHeader_EmployeeID] ON [PurchaseOrderHeader]
( 
	[EmployeeID]          ASC
)
go

ALTER TABLE [ScrapReason]
	ADD CONSTRAINT [PK_ScrapReason_ScrapReasonID] PRIMARY KEY  CLUSTERED ([ScrapReasonID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ScrapReason_Name] ON [ScrapReason]
( 
	[Name]                ASC
)
go

ALTER TABLE [ShipMethod]
	ADD CONSTRAINT [PK_ShipMethod_ShipMethodID] PRIMARY KEY  CLUSTERED ([ShipMethodID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ShipMethod_Name] ON [ShipMethod]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ShipMethod_rowguid] ON [ShipMethod]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [TransactionHistory]
	ADD CONSTRAINT [PK_TransactionHistory_TransactionID] PRIMARY KEY  CLUSTERED ([TransactionID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID] ON [TransactionHistory]
( 
	[ReferenceOrderID]    ASC,
	[ReferenceOrderLineID]  ASC
)
go

ALTER TABLE [TransactionHistoryArchive]
	ADD CONSTRAINT [PK_TransactionHistoryArchive_TransactionID] PRIMARY KEY  CLUSTERED ([TransactionID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistoryArchive_ProductID] ON [TransactionHistoryArchive]
( 
	[ProductID]           ASC
)
go

CREATE NONCLUSTERED INDEX [IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID] ON [TransactionHistoryArchive]
( 
	[ReferenceOrderID]    ASC,
	[ReferenceOrderLineID]  ASC
)
go

ALTER TABLE [UnitMeasure]
	ADD CONSTRAINT [PK_UnitMeasure_UnitMeasureCode] PRIMARY KEY  CLUSTERED ([UnitMeasureCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_UnitMeasure_Name] ON [UnitMeasure]
( 
	[Name]                ASC
)
go

ALTER TABLE [Vendor]
	ADD CONSTRAINT [PK_Vendor_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Vendor_AccountNumber] ON [Vendor]
( 
	[AccountNumber]       ASC
)
go

ALTER TABLE [WorkOrder]
	ADD CONSTRAINT [PK_WorkOrder_WorkOrderID] PRIMARY KEY  CLUSTERED ([WorkOrderID] ASC)
go

ALTER TABLE [WorkOrderRouting]
	ADD CONSTRAINT [PK_WorkOrderRouting_WorkOrderID_ProductID_OperationSequence] PRIMARY KEY  CLUSTERED ([WorkOrderID] ASC,[ProductID] ASC,[OperationSequence] ASC)
go

CREATE NONCLUSTERED INDEX [IX_WorkOrderRouting_ProductID] ON [WorkOrderRouting]
( 
	[ProductID]           ASC
)
go


ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_EndDate]
		CHECK  ( [EndDate]>[StartDate] OR [EndDate] IS NULL ) 
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_ProductAssemblyID]
		CHECK  ( [ProductAssemblyID]<>[ComponentID] ) 
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT  [CK_BillOfMaterials_BOMLevel]
		CHECK  ( [ProductAssemblyID] IS NULL AND [BOMLevel]=(0) AND [PerAssemblyQty]=(1.00) OR [ProductAssemblyID] IS NOT NULL AND [BOMLevel]>=(1) ) 
go


ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_BillOfMaterials_Product_ProductAssemblyID] FOREIGN KEY ([ProductAssemblyID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_BillOfMaterials_Product_ProductAssemblyID]
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_BillOfMaterials_Product_ComponentID] FOREIGN KEY ([ComponentID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_BillOfMaterials_Product_ComponentID]
go

ALTER TABLE [BillOfMaterials] WITH CHECK 
	ADD CONSTRAINT [FK_BillOfMaterials_UnitMeasure_UnitMeasureCode] FOREIGN KEY ([UnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BillOfMaterials]
	  WITH CHECK CHECK CONSTRAINT [FK_BillOfMaterials_UnitMeasure_UnitMeasureCode]
go


ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT  [CK_Product_SellEndDate]
		CHECK  ( [SellEndDate]>=[SellStartDate] OR [SellEndDate] IS NULL ) 
go


ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_UnitMeasure_SizeUnitMeasureCode] FOREIGN KEY ([SizeUnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_UnitMeasure_SizeUnitMeasureCode]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_UnitMeasure_WeightUnitMeasureCode] FOREIGN KEY ([WeightUnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_UnitMeasure_WeightUnitMeasureCode]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_ProductModel_ProductModelID] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_ProductModel_ProductModelID]
go

ALTER TABLE [Product] WITH CHECK 
	ADD CONSTRAINT [FK_Product_ProductSubcategory_ProductSubcategoryID] FOREIGN KEY ([ProductSubcategoryID]) REFERENCES [ProductSubcategory]([ProductSubcategoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Product]
	  WITH CHECK CHECK CONSTRAINT [FK_Product_ProductSubcategory_ProductSubcategoryID]
go


ALTER TABLE [ProductCostHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_ProductCostHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [ProductCostHistory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductCostHistory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductCostHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductCostHistory_Product_ProductID]
go


ALTER TABLE [ProductDocument] WITH CHECK 
	ADD CONSTRAINT [FK_ProductDocument_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductDocument]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductDocument_Product_ProductID]
go

ALTER TABLE [ProductDocument] WITH CHECK 
	ADD CONSTRAINT [FK_ProductDocument_Document_DocumentNode] FOREIGN KEY ([DocumentNode]) REFERENCES [Document]([DocumentNode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductDocument]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductDocument_Document_DocumentNode]
go


ALTER TABLE [ProductInventory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductInventory_Location_LocationID] FOREIGN KEY ([LocationID]) REFERENCES [Location]([LocationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductInventory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductInventory_Location_LocationID]
go

ALTER TABLE [ProductInventory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductInventory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductInventory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductInventory_Product_ProductID]
go


ALTER TABLE [ProductListPriceHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_ProductListPriceHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [ProductListPriceHistory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductListPriceHistory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductListPriceHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductListPriceHistory_Product_ProductID]
go


ALTER TABLE [ProductModelIllustration] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelIllustration_ProductModel_ProductModelID] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelIllustration]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelIllustration_ProductModel_ProductModelID]
go

ALTER TABLE [ProductModelIllustration] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelIllustration_Illustration_IllustrationID] FOREIGN KEY ([IllustrationID]) REFERENCES [Illustration]([IllustrationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelIllustration]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelIllustration_Illustration_IllustrationID]
go


ALTER TABLE [ProductModelProductDescriptionCulture] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID] FOREIGN KEY ([ProductDescriptionID]) REFERENCES [ProductDescription]([ProductDescriptionID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID]
go

ALTER TABLE [ProductModelProductDescriptionCulture] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelProductDescriptionCulture_Culture_CultureID] FOREIGN KEY ([CultureID]) REFERENCES [Culture]([CultureID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelProductDescriptionCulture_Culture_CultureID]
go

ALTER TABLE [ProductModelProductDescriptionCulture] WITH CHECK 
	ADD CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID] FOREIGN KEY ([ProductModelID]) REFERENCES [ProductModel]([ProductModelID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductModelProductDescriptionCulture]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID]
go


ALTER TABLE [ProductProductPhoto] WITH CHECK 
	ADD CONSTRAINT [FK_ProductProductPhoto_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductProductPhoto]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductProductPhoto_Product_ProductID]
go

ALTER TABLE [ProductProductPhoto] WITH CHECK 
	ADD CONSTRAINT [FK_ProductProductPhoto_ProductPhoto_ProductPhotoID] FOREIGN KEY ([ProductPhotoID]) REFERENCES [ProductPhoto]([ProductPhotoID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductProductPhoto]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductProductPhoto_ProductPhoto_ProductPhotoID]
go


ALTER TABLE [ProductReview] WITH CHECK 
	ADD CONSTRAINT [FK_ProductReview_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductReview]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductReview_Product_ProductID]
go


ALTER TABLE [ProductSubcategory] WITH CHECK 
	ADD CONSTRAINT [FK_ProductSubcategory_ProductCategory_ProductCategoryID] FOREIGN KEY ([ProductCategoryID]) REFERENCES [ProductCategory]([ProductCategoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductSubcategory]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductSubcategory_ProductCategory_ProductCategoryID]
go


ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_ProductVendor_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductVendor_Product_ProductID]
go

ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_ProductVendor_UnitMeasure_UnitMeasureCode] FOREIGN KEY ([UnitMeasureCode]) REFERENCES [UnitMeasure]([UnitMeasureCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductVendor_UnitMeasure_UnitMeasureCode]
go

ALTER TABLE [ProductVendor] WITH CHECK 
	ADD CONSTRAINT [FK_ProductVendor_Vendor_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Vendor]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [ProductVendor]
	  WITH CHECK CHECK CONSTRAINT [FK_ProductVendor_Vendor_BusinessEntityID]
go


ALTER TABLE [PurchaseOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderDetail_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderDetail_Product_ProductID]
go

ALTER TABLE [PurchaseOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID] FOREIGN KEY ([PurchaseOrderID]) REFERENCES [PurchaseOrderHeader]([PurchaseOrderID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID]
go


ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_PurchaseOrderHeader_ShipDate]
		CHECK  ( [ShipDate]>=[OrderDate] OR [ShipDate] IS NULL ) 
go


ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderHeader_Vendor_VendorID] FOREIGN KEY ([VendorID]) REFERENCES [Vendor]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderHeader_Vendor_VendorID]
go

ALTER TABLE [PurchaseOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_PurchaseOrderHeader_ShipMethod_ShipMethodID] FOREIGN KEY ([ShipMethodID]) REFERENCES [ShipMethod]([ShipMethodID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PurchaseOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_PurchaseOrderHeader_ShipMethod_ShipMethodID]
go


ALTER TABLE [TransactionHistory] WITH CHECK 
	ADD CONSTRAINT [FK_TransactionHistory_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [TransactionHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_TransactionHistory_Product_ProductID]
go


ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrder_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrder_Product_ProductID] FOREIGN KEY ([ProductID]) REFERENCES [Product]([ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrder]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrder_Product_ProductID]
go

ALTER TABLE [WorkOrder] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrder_ScrapReason_ScrapReasonID] FOREIGN KEY ([ScrapReasonID]) REFERENCES [ScrapReason]([ScrapReasonID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrder]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrder_ScrapReason_ScrapReasonID]
go


ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrderRouting_ScheduledEndDate]
		CHECK  ( [ScheduledEndDate]>=[ScheduledStartDate] ) 
go

ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT  [CK_WorkOrderRouting_ActualEndDate]
		CHECK  ( [ActualEndDate]>=[ActualStartDate] OR [ActualEndDate] IS NULL OR [ActualStartDate] IS NULL ) 
go


ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrderRouting_Location_LocationID] FOREIGN KEY ([LocationID]) REFERENCES [Location]([LocationID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrderRouting]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrderRouting_Location_LocationID]
go

ALTER TABLE [WorkOrderRouting] WITH CHECK 
	ADD CONSTRAINT [FK_WorkOrderRouting_WorkOrder_WorkOrderID] FOREIGN KEY ([WorkOrderID]) REFERENCES [WorkOrder]([WorkOrderID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [WorkOrderRouting]
	  WITH CHECK CHECK CONSTRAINT [FK_WorkOrderRouting_WorkOrder_WorkOrderID]
go

CREATE TRIGGER Production.tD_Illustration ON Production.Illustration FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Illustration */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Illustration  Production.ProductModelIllustration on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000178ae", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.IllustrationID = deleted.IllustrationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Illustration because Production.ProductModelIllustration exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Illustration ON Production.Illustration FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Illustration */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insIllustrationID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Illustration  Production.ProductModelIllustration on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001a068", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(IllustrationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.IllustrationID = deleted.IllustrationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Illustration because Production.ProductModelIllustration exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Location ON Production.Location FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Location */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Location  Production.WorkOrderRouting on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002a077", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Location because Production.WorkOrderRouting exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Location  Production.ProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Location because Production.ProductInventory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Location ON Production.Location FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Location */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insLocationID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Location  Production.WorkOrderRouting on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002b91e", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Location because Production.WorkOrderRouting exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Location  Production.ProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.LocationID = deleted.LocationID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Location because Production.ProductInventory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Product ON Production.Product FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Product */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.PurchaseOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0015bea4", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.WorkOrder on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.WorkOrder exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Purchasing.ProductVendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductReview on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductReview
      WHERE
        /*  %JoinFKPK(Production.ProductReview,deleted," = "," AND") */
        Production.ProductReview.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductReview exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.TransactionHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.TransactionHistory
      WHERE
        /*  %JoinFKPK(Production.TransactionHistory,deleted," = "," AND") */
        Production.TransactionHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.TransactionHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductProductPhoto on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductProductPhoto exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ComponentID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ProductAssemblyID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductListPriceHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductListPriceHistory
      WHERE
        /*  %JoinFKPK(Production.ProductListPriceHistory,deleted," = "," AND") */
        Production.ProductListPriceHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductListPriceHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductInventory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductInventory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductDocument on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductDocument exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductCostHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductCostHistory
      WHERE
        /*  %JoinFKPK(Production.ProductCostHistory,deleted," = "," AND") */
        Production.ProductCostHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Product because Production.ProductCostHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductSubcategory  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductSubcategory
      WHERE
        /* %JoinFKPK(deleted,Production.ProductSubcategory," = "," AND") */
        deleted.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.ProductSubcategory," = "," AND") */
            Production.Product.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.ProductSubcategory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductModel
      WHERE
        /* %JoinFKPK(deleted,Production.ProductModel," = "," AND") */
        deleted.ProductModelID = Production.ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.ProductModel," = "," AND") */
            Production.Product.ProductModelID = Production.ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.ProductModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.WeightUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.UnitMeasure," = "," AND") */
            Production.Product.WeightUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.SizeUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Production.Product
          WHERE
            /* %JoinFKPK(Production.Product,Production.UnitMeasure," = "," AND") */
            Production.Product.SizeUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.Product because Production.UnitMeasure exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Product ON Production.Product FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Product */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.PurchaseOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0017abfe", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.WorkOrder on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.WorkOrder exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Purchasing.ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductReview on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductReview
      WHERE
        /*  %JoinFKPK(Production.ProductReview,deleted," = "," AND") */
        Production.ProductReview.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductReview exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.TransactionHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.TransactionHistory
      WHERE
        /*  %JoinFKPK(Production.TransactionHistory,deleted," = "," AND") */
        Production.TransactionHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.TransactionHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductProductPhoto on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductProductPhoto exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ComponentID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.ProductAssemblyID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductListPriceHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductListPriceHistory
      WHERE
        /*  %JoinFKPK(Production.ProductListPriceHistory,deleted," = "," AND") */
        Production.ProductListPriceHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductListPriceHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductInventory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductInventory
      WHERE
        /*  %JoinFKPK(Production.ProductInventory,deleted," = "," AND") */
        Production.ProductInventory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductInventory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductDocument on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductDocument exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductCostHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductCostHistory
      WHERE
        /*  %JoinFKPK(Production.ProductCostHistory,deleted," = "," AND") */
        Production.ProductCostHistory.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Product because Production.ProductCostHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductSubcategory  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductSubcategory
        WHERE
          /* %JoinFKPK(inserted,Production.ProductSubcategory) */
          inserted.ProductSubcategoryID = Production.ProductSubcategory.ProductSubcategoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductSubcategoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.ProductSubcategory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductModel
        WHERE
          /* %JoinFKPK(inserted,Production.ProductModel) */
          inserted.ProductModelID = Production.ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductModelID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.ProductModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(WeightUnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.WeightUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.WeightUnitMeasureCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SizeUnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.SizeUnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SizeUnitMeasureCode IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.Product because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ScrapReason ON Production.ScrapReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ScrapReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ScrapReason  Production.WorkOrder on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014d29", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ScrapReasonID = deleted.ScrapReasonID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ScrapReason because Production.WorkOrder exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ScrapReason ON Production.ScrapReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ScrapReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insScrapReasonID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ScrapReason  Production.WorkOrder on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017c0a", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ScrapReasonID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /*  %JoinFKPK(Production.WorkOrder,deleted," = "," AND") */
        Production.WorkOrder.ScrapReasonID = deleted.ScrapReasonID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ScrapReason because Production.WorkOrder exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductCategory ON Production.ProductCategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductCategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductCategory  Production.ProductSubcategory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017289", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductSubcategory
      WHERE
        /*  %JoinFKPK(Production.ProductSubcategory,deleted," = "," AND") */
        Production.ProductSubcategory.ProductCategoryID = deleted.ProductCategoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductCategory because Production.ProductSubcategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductCategory ON Production.ProductCategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductCategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductCategoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductCategory  Production.ProductSubcategory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00019e62", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductCategoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductSubcategory
      WHERE
        /*  %JoinFKPK(Production.ProductSubcategory,deleted," = "," AND") */
        Production.ProductSubcategory.ProductCategoryID = deleted.ProductCategoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductCategory because Production.ProductSubcategory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tD_ShipMethod ON Purchasing.ShipMethod FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ShipMethod */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016db9", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.ShipMethod because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_ShipMethod ON Purchasing.ShipMethod FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ShipMethod */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insShipMethodID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00018b68", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.ShipMethodID = deleted.ShipMethodID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.ShipMethod because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductCostHistory ON Production.ProductCostHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductCostHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductCostHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a9a0", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductCostHistory
          WHERE
            /* %JoinFKPK(Production.ProductCostHistory,Production.Product," = "," AND") */
            Production.ProductCostHistory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductCostHistory because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductCostHistory ON Production.ProductCostHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductCostHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductCostHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001aa2d", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductCostHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductCostHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductCostHistory because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductDescription ON Production.ProductDescription FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductDescription */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductDescription  Production.ProductModelProductDescriptionCulture on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001cc01", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescriptionCulture,deleted," = "," AND") */
        Production.ProductModelProductDescriptionCulture.ProductDescriptionID = deleted.ProductDescriptionID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductDescription because Production.ProductModelProductDescriptionCulture exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductDescription ON Production.ProductDescription FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductDescription */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductDescriptionID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductDescription  Production.ProductModelProductDescriptionCulture on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001c70c", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductDescriptionID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescriptionCulture,deleted," = "," AND") */
        Production.ProductModelProductDescriptionCulture.ProductDescriptionID = deleted.ProductDescriptionID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductDescription because Production.ProductModelProductDescriptionCulture exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductDocument ON Production.ProductDocument FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductDocument */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Document  Production.ProductDocument on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00035fa0", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
    IF EXISTS (SELECT * FROM deleted,Production.Document
      WHERE
        /* %JoinFKPK(deleted,Production.Document," = "," AND") */
        deleted.DocumentNode = Production.Document.DocumentNode AND
        NOT EXISTS (
          SELECT * FROM Production.ProductDocument
          WHERE
            /* %JoinFKPK(Production.ProductDocument,Production.Document," = "," AND") */
            Production.ProductDocument.DocumentNode = Production.Document.DocumentNode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductDocument because Production.Document exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductDocument on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductDocument
          WHERE
            /* %JoinFKPK(Production.ProductDocument,Production.Product," = "," AND") */
            Production.ProductDocument.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductDocument because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductDocument ON Production.ProductDocument FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductDocument */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insDocumentNode hierarchyid,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Document  Production.ProductDocument on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000333af", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(DocumentNode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Document
        WHERE
          /* %JoinFKPK(inserted,Production.Document) */
          inserted.DocumentNode = Production.Document.DocumentNode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductDocument because Production.Document does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductDocument on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductDocument because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductInventory ON Production.ProductInventory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductInventory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00034327", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductInventory
          WHERE
            /* %JoinFKPK(Production.ProductInventory,Production.Product," = "," AND") */
            Production.ProductInventory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductInventory because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Location  Production.ProductInventory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (SELECT * FROM deleted,Production.Location
      WHERE
        /* %JoinFKPK(deleted,Production.Location," = "," AND") */
        deleted.LocationID = Production.Location.LocationID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductInventory
          WHERE
            /* %JoinFKPK(Production.ProductInventory,Production.Location," = "," AND") */
            Production.ProductInventory.LocationID = Production.Location.LocationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductInventory because Production.Location exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductInventory ON Production.ProductInventory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductInventory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insLocationID smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00034a3a", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductInventory because Production.Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Location  Production.ProductInventory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="ProductInventory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductInventory_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Location
        WHERE
          /* %JoinFKPK(inserted,Production.Location) */
          inserted.LocationID = Production.Location.LocationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductInventory because Production.Location does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductListPriceHistory ON Production.ProductListPriceHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductListPriceHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductListPriceHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001c199", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductListPriceHistory
          WHERE
            /* %JoinFKPK(Production.ProductListPriceHistory,Production.Product," = "," AND") */
            Production.ProductListPriceHistory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductListPriceHistory because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductListPriceHistory ON Production.ProductListPriceHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductListPriceHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductListPriceHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b23b", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductListPriceHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductListPriceHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductListPriceHistory because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductModel ON Production.ProductModel FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModel */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelProductDescriptionCulture on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000440ef", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescriptionCulture,deleted," = "," AND") */
        Production.ProductModelProductDescriptionCulture.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductModel because Production.ProductModelProductDescriptionCulture exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelIllustration on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductModel because Production.ProductModelIllustration exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductModel because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductModel ON Production.ProductModel FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModel */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelProductDescriptionCulture on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000497b8", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescriptionCulture,deleted," = "," AND") */
        Production.ProductModelProductDescriptionCulture.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductModel because Production.ProductModelProductDescriptionCulture exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelIllustration on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelIllustration
      WHERE
        /*  %JoinFKPK(Production.ProductModelIllustration,deleted," = "," AND") */
        Production.ProductModelIllustration.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductModel because Production.ProductModelIllustration exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductModelID = deleted.ProductModelID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductModel because Production.Product exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductModelIllustration ON Production.ProductModelIllustration FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModelIllustration */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Illustration  Production.ProductModelIllustration on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003c18d", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
    IF EXISTS (SELECT * FROM deleted,Production.Illustration
      WHERE
        /* %JoinFKPK(deleted,Production.Illustration," = "," AND") */
        deleted.IllustrationID = Production.Illustration.IllustrationID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelIllustration
          WHERE
            /* %JoinFKPK(Production.ProductModelIllustration,Production.Illustration," = "," AND") */
            Production.ProductModelIllustration.IllustrationID = Production.Illustration.IllustrationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelIllustration because Production.Illustration exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelIllustration on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductModel
      WHERE
        /* %JoinFKPK(deleted,Production.ProductModel," = "," AND") */
        deleted.ProductModelID = Production.ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelIllustration
          WHERE
            /* %JoinFKPK(Production.ProductModelIllustration,Production.ProductModel," = "," AND") */
            Production.ProductModelIllustration.ProductModelID = Production.ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelIllustration because Production.ProductModel exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductModelIllustration ON Production.ProductModelIllustration FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModelIllustration */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int, 
           @insIllustrationID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Illustration  Production.ProductModelIllustration on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00038b04", PARENT_OWNER="Production", PARENT_TABLE="Illustration"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_Illustration_IllustrationID", FK_COLUMNS="IllustrationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(IllustrationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Illustration
        WHERE
          /* %JoinFKPK(inserted,Production.Illustration) */
          inserted.IllustrationID = Production.Illustration.IllustrationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelIllustration because Production.Illustration does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelIllustration on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelIllustration"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelIllustration_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductModel
        WHERE
          /* %JoinFKPK(inserted,Production.ProductModel) */
          inserted.ProductModelID = Production.ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelIllustration because Production.ProductModel does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductModelProductDescriptionCulture ON Production.ProductModelProductDescriptionCulture FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductModelProductDescriptionCulture */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductModel  Production.ProductModelProductDescriptionCulture on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000611fa", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductModel
      WHERE
        /* %JoinFKPK(deleted,Production.ProductModel," = "," AND") */
        deleted.ProductModelID = Production.ProductModel.ProductModelID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelProductDescriptionCulture
          WHERE
            /* %JoinFKPK(Production.ProductModelProductDescriptionCulture,Production.ProductModel," = "," AND") */
            Production.ProductModelProductDescriptionCulture.ProductModelID = Production.ProductModel.ProductModelID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelProductDescriptionCulture because Production.ProductModel exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Culture  Production.ProductModelProductDescriptionCulture on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
    IF EXISTS (SELECT * FROM deleted,Production.Culture
      WHERE
        /* %JoinFKPK(deleted,Production.Culture," = "," AND") */
        deleted.CultureID = Production.Culture.CultureID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelProductDescriptionCulture
          WHERE
            /* %JoinFKPK(Production.ProductModelProductDescriptionCulture,Production.Culture," = "," AND") */
            Production.ProductModelProductDescriptionCulture.CultureID = Production.Culture.CultureID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelProductDescriptionCulture because Production.Culture exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductDescription  Production.ProductModelProductDescriptionCulture on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductDescription
      WHERE
        /* %JoinFKPK(deleted,Production.ProductDescription," = "," AND") */
        deleted.ProductDescriptionID = Production.ProductDescription.ProductDescriptionID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductModelProductDescriptionCulture
          WHERE
            /* %JoinFKPK(Production.ProductModelProductDescriptionCulture,Production.ProductDescription," = "," AND") */
            Production.ProductModelProductDescriptionCulture.ProductDescriptionID = Production.ProductDescription.ProductDescriptionID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductModelProductDescriptionCulture because Production.ProductDescription exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductModelProductDescriptionCulture ON Production.ProductModelProductDescriptionCulture FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductModelProductDescriptionCulture */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductModelID int, 
           @insProductDescriptionID int, 
           @insCultureID nchar(6),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductModel  Production.ProductModelProductDescriptionCulture on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00058a5e", PARENT_OWNER="Production", PARENT_TABLE="ProductModel"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductModel_ProductModelID", FK_COLUMNS="ProductModelID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductModelID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductModel
        WHERE
          /* %JoinFKPK(inserted,Production.ProductModel) */
          inserted.ProductModelID = Production.ProductModel.ProductModelID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelProductDescriptionCulture because Production.ProductModel does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Culture  Production.ProductModelProductDescriptionCulture on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CultureID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Culture
        WHERE
          /* %JoinFKPK(inserted,Production.Culture) */
          inserted.CultureID = Production.Culture.CultureID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelProductDescriptionCulture because Production.Culture does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductDescription  Production.ProductModelProductDescriptionCulture on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductDescription"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescriptionID", FK_COLUMNS="ProductDescriptionID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductDescriptionID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductDescription
        WHERE
          /* %JoinFKPK(inserted,Production.ProductDescription) */
          inserted.ProductDescriptionID = Production.ProductDescription.ProductDescriptionID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductModelProductDescriptionCulture because Production.ProductDescription does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_BillOfMaterials ON Production.BillOfMaterials FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BillOfMaterials */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000509fb", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Production.BillOfMaterials
          WHERE
            /* %JoinFKPK(Production.BillOfMaterials,Production.UnitMeasure," = "," AND") */
            Production.BillOfMaterials.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.BillOfMaterials because Production.UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ComponentID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.BillOfMaterials
          WHERE
            /* %JoinFKPK(Production.BillOfMaterials,Production.Product," = "," AND") */
            Production.BillOfMaterials.ComponentID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.BillOfMaterials because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.BillOfMaterials on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductAssemblyID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.BillOfMaterials
          WHERE
            /* %JoinFKPK(Production.BillOfMaterials,Production.Product," = "," AND") */
            Production.BillOfMaterials.ProductAssemblyID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.BillOfMaterials because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_BillOfMaterials ON Production.BillOfMaterials FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BillOfMaterials */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBillOfMaterialsID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00050198", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.BillOfMaterials because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ComponentID", FK_COLUMNS="ComponentID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ComponentID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ComponentID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.BillOfMaterials because Production.Product does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.BillOfMaterials on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_Product_ProductAssemblyID", FK_COLUMNS="ProductAssemblyID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductAssemblyID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductAssemblyID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ProductAssemblyID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.BillOfMaterials because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductPhoto ON Production.ProductPhoto FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductPhoto */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductPhoto  Production.ProductProductPhoto on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016bfe", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductPhotoID = deleted.ProductPhotoID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductPhoto because Production.ProductProductPhoto exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductPhoto ON Production.ProductPhoto FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductPhoto */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductPhotoID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductPhoto  Production.ProductProductPhoto on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00018b8a", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductPhotoID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductProductPhoto
      WHERE
        /*  %JoinFKPK(Production.ProductProductPhoto,deleted," = "," AND") */
        Production.ProductProductPhoto.ProductPhotoID = deleted.ProductPhotoID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductPhoto because Production.ProductProductPhoto exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductProductPhoto ON Production.ProductProductPhoto FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductProductPhoto */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductPhoto  Production.ProductProductPhoto on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003725f", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductPhoto
      WHERE
        /* %JoinFKPK(deleted,Production.ProductPhoto," = "," AND") */
        deleted.ProductPhotoID = Production.ProductPhoto.ProductPhotoID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductProductPhoto
          WHERE
            /* %JoinFKPK(Production.ProductProductPhoto,Production.ProductPhoto," = "," AND") */
            Production.ProductProductPhoto.ProductPhotoID = Production.ProductPhoto.ProductPhotoID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductProductPhoto because Production.ProductPhoto exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductProductPhoto on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductProductPhoto
          WHERE
            /* %JoinFKPK(Production.ProductProductPhoto,Production.Product," = "," AND") */
            Production.ProductProductPhoto.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductProductPhoto because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductProductPhoto ON Production.ProductProductPhoto FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductProductPhoto */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insProductPhotoID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductPhoto  Production.ProductProductPhoto on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000348c3", PARENT_OWNER="Production", PARENT_TABLE="ProductPhoto"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_ProductPhoto_ProductPhotoID", FK_COLUMNS="ProductPhotoID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductPhotoID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductPhoto
        WHERE
          /* %JoinFKPK(inserted,Production.ProductPhoto) */
          inserted.ProductPhotoID = Production.ProductPhoto.ProductPhotoID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductProductPhoto because Production.ProductPhoto does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductProductPhoto on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductProductPhoto"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductProductPhoto_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductProductPhoto because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_TransactionHistory ON Production.TransactionHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on TransactionHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.TransactionHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001b3ff", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.TransactionHistory
          WHERE
            /* %JoinFKPK(Production.TransactionHistory,Production.Product," = "," AND") */
            Production.TransactionHistory.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.TransactionHistory because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_TransactionHistory ON Production.TransactionHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on TransactionHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTransactionID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.TransactionHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019e03", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="TransactionHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_TransactionHistory_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.TransactionHistory because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductReview ON Production.ProductReview FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductReview */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Product  Production.ProductReview on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00019d6f", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductReview
          WHERE
            /* %JoinFKPK(Production.ProductReview,Production.Product," = "," AND") */
            Production.ProductReview.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductReview because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductReview ON Production.ProductReview FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductReview */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductReviewID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.ProductReview on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019652", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="ProductReview"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductReview_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductReview because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_ProductSubcategory ON Production.ProductSubcategory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductSubcategory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.ProductSubcategory  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00034bf4", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductSubcategoryID = deleted.ProductSubcategoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.ProductSubcategory because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ProductCategory  Production.ProductSubcategory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
    IF EXISTS (SELECT * FROM deleted,Production.ProductCategory
      WHERE
        /* %JoinFKPK(deleted,Production.ProductCategory," = "," AND") */
        deleted.ProductCategoryID = Production.ProductCategory.ProductCategoryID AND
        NOT EXISTS (
          SELECT * FROM Production.ProductSubcategory
          WHERE
            /* %JoinFKPK(Production.ProductSubcategory,Production.ProductCategory," = "," AND") */
            Production.ProductSubcategory.ProductCategoryID = Production.ProductCategory.ProductCategoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.ProductSubcategory because Production.ProductCategory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_ProductSubcategory ON Production.ProductSubcategory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductSubcategory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductSubcategoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ProductSubcategory  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00033a9c", PARENT_OWNER="Production", PARENT_TABLE="ProductSubcategory"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_ProductSubcategory_ProductSubcategoryID", FK_COLUMNS="ProductSubcategoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ProductSubcategoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.ProductSubcategoryID = deleted.ProductSubcategoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.ProductSubcategory because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.ProductCategory  Production.ProductSubcategory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ProductCategory"
    CHILD_OWNER="Production", CHILD_TABLE="ProductSubcategory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductSubcategory_ProductCategory_ProductCategoryID", FK_COLUMNS="ProductCategoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductCategoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ProductCategory
        WHERE
          /* %JoinFKPK(inserted,Production.ProductCategory) */
          inserted.ProductCategoryID = Production.ProductCategory.ProductCategoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.ProductSubcategory because Production.ProductCategory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tD_ProductVendor ON Purchasing.ProductVendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ProductVendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004d92e", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.Vendor
      WHERE
        /* %JoinFKPK(deleted,Purchasing.Vendor," = "," AND") */
        deleted.BusinessEntityID = Purchasing.Vendor.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.ProductVendor
          WHERE
            /* %JoinFKPK(Purchasing.ProductVendor,Purchasing.Vendor," = "," AND") */
            Purchasing.ProductVendor.BusinessEntityID = Purchasing.Vendor.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.ProductVendor because Purchasing.Vendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Purchasing.ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (SELECT * FROM deleted,Production.UnitMeasure
      WHERE
        /* %JoinFKPK(deleted,Production.UnitMeasure," = "," AND") */
        deleted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode AND
        NOT EXISTS (
          SELECT * FROM Purchasing.ProductVendor
          WHERE
            /* %JoinFKPK(Purchasing.ProductVendor,Production.UnitMeasure," = "," AND") */
            Purchasing.ProductVendor.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.ProductVendor because Production.UnitMeasure exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.ProductVendor on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.ProductVendor
          WHERE
            /* %JoinFKPK(Purchasing.ProductVendor,Production.Product," = "," AND") */
            Purchasing.ProductVendor.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.ProductVendor because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_ProductVendor ON Purchasing.ProductVendor FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ProductVendor */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insProductID int, 
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004d940", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.Vendor
        WHERE
          /* %JoinFKPK(inserted,Purchasing.Vendor) */
          inserted.BusinessEntityID = Purchasing.Vendor.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.ProductVendor because Purchasing.Vendor does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Purchasing.ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.UnitMeasure
        WHERE
          /* %JoinFKPK(inserted,Production.UnitMeasure) */
          inserted.UnitMeasureCode = Production.UnitMeasure.UnitMeasureCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.ProductVendor because Production.UnitMeasure does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.ProductVendor on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.ProductVendor because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_UnitMeasure ON Production.UnitMeasure FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on UnitMeasure */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Purchasing.ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00052619", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Purchasing.ProductVendor exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.BillOfMaterials on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Production.BillOfMaterials exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.WeightUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.UnitMeasure  Production.Product on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.SizeUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_UnitMeasure ON Production.UnitMeasure FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on UnitMeasure */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insUnitMeasureCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Purchasing.ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0005816d", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Purchasing.ProductVendor exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.BillOfMaterials on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="BillOfMaterials"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BillOfMaterials_UnitMeasure_UnitMeasureCode", FK_COLUMNS="UnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.BillOfMaterials
      WHERE
        /*  %JoinFKPK(Production.BillOfMaterials,deleted," = "," AND") */
        Production.BillOfMaterials.UnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Production.BillOfMaterials exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_WeightUnitMeasureCode", FK_COLUMNS="WeightUnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.WeightUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.UnitMeasure  Production.Product on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="UnitMeasure"
    CHILD_OWNER="Production", CHILD_TABLE="Product"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Product_UnitMeasure_SizeUnitMeasureCode", FK_COLUMNS="SizeUnitMeasureCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(UnitMeasureCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.Product
      WHERE
        /*  %JoinFKPK(Production.Product,deleted," = "," AND") */
        Production.Product.SizeUnitMeasureCode = deleted.UnitMeasureCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.UnitMeasure because Production.Product exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [dVendor] ON Vendor
   WITH 
 EXECUTE AS CALLER  INSTEAD OF DELETE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @DeleteCount int;

        SELECT @DeleteCount = COUNT(*) FROM deleted;
        IF @DeleteCount > 0 
        BEGIN
            RAISERROR
                (N'Vendors cannot be deleted. They can only be marked as not active.', -- Message
                10, -- Severity.
                1); -- State.

        -- Rollback any active or uncommittable transactions
            IF @@TRANCOUNT > 0
            BEGIN
                ROLLBACK TRANSACTION;
            END
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [dVendor] ON Vendor
go

CREATE TRIGGER Purchasing.tD_Vendor ON Purchasing.Vendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Vendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.ProductVendor on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001631b", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.Vendor because Purchasing.ProductVendor exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_Vendor ON Purchasing.Vendor FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Vendor */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002e6a0", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_Vendor_VendorID", FK_COLUMNS="VendorID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.VendorID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.Vendor because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.ProductVendor on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="ProductVendor"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductVendor_Vendor_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.ProductVendor
      WHERE
        /*  %JoinFKPK(Purchasing.ProductVendor,deleted," = "," AND") */
        Purchasing.ProductVendor.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.Vendor because Purchasing.ProductVendor exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_1190 ON Purchasing.Vendor FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Vendor */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015f45", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_Vendor_VendorID", FK_COLUMNS="VendorID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderHeader,deleted," = "," AND") */
        Purchasing.PurchaseOrderHeader.VendorID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.Vendor because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iWorkOrder] ON WorkOrder
   WITH 
 EXECUTE AS CALLER  AFTER INSERT 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory](
            [ProductID]
            ,[ReferenceOrderID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[WorkOrderID]
            ,'W'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,0
        FROM inserted;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iWorkOrder] ON WorkOrder
go

CREATE TRIGGER [uWorkOrder] ON WorkOrder
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty])
        BEGIN
            INSERT INTO [Production].[TransactionHistory](
                [ProductID]
                ,[ReferenceOrderID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity])
            SELECT 
                inserted.[ProductID]
                ,inserted.[WorkOrderID]
                ,'W'
                ,GETDATE()
                ,inserted.[OrderQty]
            FROM inserted;
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uWorkOrder] ON WorkOrder
go

CREATE TRIGGER Production.tD_WorkOrder ON Production.WorkOrder FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on WorkOrder */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.WorkOrder  Production.WorkOrderRouting on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004723f", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.WorkOrderID = deleted.WorkOrderID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.WorkOrder because Production.WorkOrderRouting exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.ScrapReason  Production.WorkOrder on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
    IF EXISTS (SELECT * FROM deleted,Production.ScrapReason
      WHERE
        /* %JoinFKPK(deleted,Production.ScrapReason," = "," AND") */
        deleted.ScrapReasonID = Production.ScrapReason.ScrapReasonID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrder
          WHERE
            /* %JoinFKPK(Production.WorkOrder,Production.ScrapReason," = "," AND") */
            Production.WorkOrder.ScrapReasonID = Production.ScrapReason.ScrapReasonID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrder because Production.ScrapReason exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Production.WorkOrder on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrder
          WHERE
            /* %JoinFKPK(Production.WorkOrder,Production.Product," = "," AND") */
            Production.WorkOrder.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrder because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_WorkOrder ON Production.WorkOrder FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrder */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Production.WorkOrder on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019cff", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrder because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.Trigger_1175 ON Production.WorkOrder FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrder */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.ScrapReason  Production.WorkOrder on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001d465", PARENT_OWNER="Production", PARENT_TABLE="ScrapReason"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrder"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrder_ScrapReason_ScrapReasonID", FK_COLUMNS="ScrapReasonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ScrapReasonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.ScrapReason
        WHERE
          /* %JoinFKPK(inserted,Production.ScrapReason) */
          inserted.ScrapReasonID = Production.ScrapReason.ScrapReasonID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.ScrapReasonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrder because Production.ScrapReason does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.Trigger_1188 ON Production.WorkOrder FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrder */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.WorkOrder  Production.WorkOrderRouting on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00018286", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(WorkOrderID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.WorkOrderRouting
      WHERE
        /*  %JoinFKPK(Production.WorkOrderRouting,deleted," = "," AND") */
        Production.WorkOrderRouting.WorkOrderID = deleted.WorkOrderID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.WorkOrder because Production.WorkOrderRouting exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [iPurchaseOrderDetail] ON PurchaseOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER INSERT 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO [Production].[TransactionHistory]
            ([ProductID]
            ,[ReferenceOrderID]
            ,[ReferenceOrderLineID]
            ,[TransactionType]
            ,[TransactionDate]
            ,[Quantity]
            ,[ActualCost])
        SELECT 
            inserted.[ProductID]
            ,inserted.[PurchaseOrderID]
            ,inserted.[PurchaseOrderDetailID]
            ,'P'
            ,GETDATE()
            ,inserted.[OrderQty]
            ,inserted.[UnitPrice]
        FROM inserted 
            INNER JOIN [Purchasing].[PurchaseOrderHeader] 
            ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID];

        -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
        -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Purchasing].[PurchaseOrderHeader]
        SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
            (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                FROM [Purchasing].[PurchaseOrderDetail]
                WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
        WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN (SELECT inserted.[PurchaseOrderID] FROM inserted);
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iPurchaseOrderDetail] ON PurchaseOrderDetail
go

CREATE TRIGGER [uPurchaseOrderDetail] ON PurchaseOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice])
        -- Insert record into TransactionHistory 
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[PurchaseOrderID]
                ,inserted.[PurchaseOrderDetailID]
                ,'P'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Purchasing].[PurchaseOrderDetail] 
                ON inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID];

            -- Update SubTotal in PurchaseOrderHeader record. Note that this causes the 
            -- PurchaseOrderHeader trigger to fire which will update the RevisionNumber.
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[SubTotal] = 
                (SELECT SUM([Purchasing].[PurchaseOrderDetail].[LineTotal])
                    FROM [Purchasing].[PurchaseOrderDetail]
                    WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                        = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID])
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] 
                IN (SELECT inserted.[PurchaseOrderID] FROM inserted);

            UPDATE [Purchasing].[PurchaseOrderDetail]
            SET [Purchasing].[PurchaseOrderDetail].[ModifiedDate] = GETDATE()
            FROM inserted
            WHERE inserted.[PurchaseOrderID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderID]
                AND inserted.[PurchaseOrderDetailID] = [Purchasing].[PurchaseOrderDetail].[PurchaseOrderDetailID];
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uPurchaseOrderDetail] ON PurchaseOrderDetail
go

CREATE TRIGGER Purchasing.tD_PurchaseOrderDetail ON Purchasing.PurchaseOrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000392a8", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", FK_COLUMNS="PurchaseOrderID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.PurchaseOrderHeader
      WHERE
        /* %JoinFKPK(deleted,Purchasing.PurchaseOrderHeader," = "," AND") */
        deleted.PurchaseOrderID = Purchasing.PurchaseOrderHeader.PurchaseOrderID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderDetail
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderDetail,Purchasing.PurchaseOrderHeader," = "," AND") */
            Purchasing.PurchaseOrderDetail.PurchaseOrderID = Purchasing.PurchaseOrderHeader.PurchaseOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderDetail because Purchasing.PurchaseOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Product  Purchasing.PurchaseOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
    IF EXISTS (SELECT * FROM deleted,Production.Product
      WHERE
        /* %JoinFKPK(deleted,Production.Product," = "," AND") */
        deleted.ProductID = Production.Product.ProductID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderDetail
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderDetail,Production.Product," = "," AND") */
            Purchasing.PurchaseOrderDetail.ProductID = Production.Product.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderDetail because Production.Product exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_PurchaseOrderDetail ON Purchasing.PurchaseOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int, 
           @insPurchaseOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Product  Purchasing.PurchaseOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001ab45", PARENT_OWNER="Production", PARENT_TABLE="Product"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_Product_ProductID", FK_COLUMNS="ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Product
        WHERE
          /* %JoinFKPK(inserted,Production.Product) */
          inserted.ProductID = Production.Product.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderDetail because Production.Product does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_1183 ON Purchasing.PurchaseOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int, 
           @insPurchaseOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001c8ee", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", FK_COLUMNS="PurchaseOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PurchaseOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.PurchaseOrderHeader
        WHERE
          /* %JoinFKPK(inserted,Purchasing.PurchaseOrderHeader) */
          inserted.PurchaseOrderID = Purchasing.PurchaseOrderHeader.PurchaseOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderDetail because Purchasing.PurchaseOrderHeader does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Culture ON Production.Culture FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Culture */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Culture  Production.ProductModelProductDescriptionCulture on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001975b", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescriptionCulture,deleted," = "," AND") */
        Production.ProductModelProductDescriptionCulture.CultureID = deleted.CultureID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Culture because Production.ProductModelProductDescriptionCulture exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Culture ON Production.Culture FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Culture */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCultureID nchar(6),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Culture  Production.ProductModelProductDescriptionCulture on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001ad7b", PARENT_OWNER="Production", PARENT_TABLE="Culture"
    CHILD_OWNER="Production", CHILD_TABLE="ProductModelProductDescriptionCulture"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductModelProductDescriptionCulture_Culture_CultureID", FK_COLUMNS="CultureID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CultureID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductModelProductDescriptionCulture
      WHERE
        /*  %JoinFKPK(Production.ProductModelProductDescriptionCulture,deleted," = "," AND") */
        Production.ProductModelProductDescriptionCulture.CultureID = deleted.CultureID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Culture because Production.ProductModelProductDescriptionCulture exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_WorkOrderRouting ON Production.WorkOrderRouting FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on WorkOrderRouting */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.WorkOrder  Production.WorkOrderRouting on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00035af8", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
    IF EXISTS (SELECT * FROM deleted,Production.WorkOrder
      WHERE
        /* %JoinFKPK(deleted,Production.WorkOrder," = "," AND") */
        deleted.WorkOrderID = Production.WorkOrder.WorkOrderID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrderRouting
          WHERE
            /* %JoinFKPK(Production.WorkOrderRouting,Production.WorkOrder," = "," AND") */
            Production.WorkOrderRouting.WorkOrderID = Production.WorkOrder.WorkOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrderRouting because Production.WorkOrder exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Production.Location  Production.WorkOrderRouting on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
    IF EXISTS (SELECT * FROM deleted,Production.Location
      WHERE
        /* %JoinFKPK(deleted,Production.Location," = "," AND") */
        deleted.LocationID = Production.Location.LocationID AND
        NOT EXISTS (
          SELECT * FROM Production.WorkOrderRouting
          WHERE
            /* %JoinFKPK(Production.WorkOrderRouting,Production.Location," = "," AND") */
            Production.WorkOrderRouting.LocationID = Production.Location.LocationID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Production.WorkOrderRouting because Production.Location exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_WorkOrderRouting ON Production.WorkOrderRouting FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on WorkOrderRouting */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insWorkOrderID int, 
           @insProductID int, 
           @insOperationSequence smallint,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.WorkOrder  Production.WorkOrderRouting on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000342e9", PARENT_OWNER="Production", PARENT_TABLE="WorkOrder"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_WorkOrder_WorkOrderID", FK_COLUMNS="WorkOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(WorkOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.WorkOrder
        WHERE
          /* %JoinFKPK(inserted,Production.WorkOrder) */
          inserted.WorkOrderID = Production.WorkOrder.WorkOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrderRouting because Production.WorkOrder does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Production.Location  Production.WorkOrderRouting on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Production", PARENT_TABLE="Location"
    CHILD_OWNER="Production", CHILD_TABLE="WorkOrderRouting"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_WorkOrderRouting_Location_LocationID", FK_COLUMNS="LocationID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(LocationID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Production.Location
        WHERE
          /* %JoinFKPK(inserted,Production.Location) */
          inserted.LocationID = Production.Location.LocationID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Production.WorkOrderRouting because Production.Location does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER [uPurchaseOrderHeader] ON PurchaseOrderHeader
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Purchasing].[PurchaseOrderHeader]
            SET [Purchasing].[PurchaseOrderHeader].[RevisionNumber] = 
                [Purchasing].[PurchaseOrderHeader].[RevisionNumber] + 1
            WHERE [Purchasing].[PurchaseOrderHeader].[PurchaseOrderID] IN 
                (SELECT inserted.[PurchaseOrderID] FROM inserted);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uPurchaseOrderHeader] ON PurchaseOrderHeader
go

CREATE TRIGGER Purchasing.tD_PurchaseOrderHeader ON Purchasing.PurchaseOrderHeader FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004d1ca", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", FK_COLUMNS="PurchaseOrderID" */
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.PurchaseOrderID = deleted.PurchaseOrderID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Purchasing.PurchaseOrderHeader because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.ShipMethod
      WHERE
        /* %JoinFKPK(deleted,Purchasing.ShipMethod," = "," AND") */
        deleted.ShipMethodID = Purchasing.ShipMethod.ShipMethodID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderHeader,Purchasing.ShipMethod," = "," AND") */
            Purchasing.PurchaseOrderHeader.ShipMethodID = Purchasing.ShipMethod.ShipMethodID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderHeader because Purchasing.ShipMethod exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_Vendor_VendorID", FK_COLUMNS="VendorID" */
    IF EXISTS (SELECT * FROM deleted,Purchasing.Vendor
      WHERE
        /* %JoinFKPK(deleted,Purchasing.Vendor," = "," AND") */
        deleted.VendorID = Purchasing.Vendor.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Purchasing.PurchaseOrderHeader
          WHERE
            /* %JoinFKPK(Purchasing.PurchaseOrderHeader,Purchasing.Vendor," = "," AND") */
            Purchasing.PurchaseOrderHeader.VendorID = Purchasing.Vendor.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Purchasing.PurchaseOrderHeader because Purchasing.Vendor exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.tU_PurchaseOrderHeader ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.PurchaseOrderHeader  Purchasing.PurchaseOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000199db", PARENT_OWNER="Purchasing", PARENT_TABLE="PurchaseOrderHeader"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderID", FK_COLUMNS="PurchaseOrderID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PurchaseOrderID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Purchasing.PurchaseOrderDetail
      WHERE
        /*  %JoinFKPK(Purchasing.PurchaseOrderDetail,deleted," = "," AND") */
        Purchasing.PurchaseOrderDetail.PurchaseOrderID = deleted.PurchaseOrderID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because Purchasing.PurchaseOrderDetail exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_1191 ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.Vendor  Purchasing.PurchaseOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001ab11", PARENT_OWNER="Purchasing", PARENT_TABLE="Vendor"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_Vendor_VendorID", FK_COLUMNS="VendorID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(VendorID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.Vendor
        WHERE
          /* %JoinFKPK(inserted,Purchasing.Vendor) */
          inserted.VendorID = Purchasing.Vendor.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because Purchasing.Vendor does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Purchasing.Trigger_1195 ON Purchasing.PurchaseOrderHeader FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PurchaseOrderHeader */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPurchaseOrderID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Purchasing.ShipMethod  Purchasing.PurchaseOrderHeader on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001c65d", PARENT_OWNER="Purchasing", PARENT_TABLE="ShipMethod"
    CHILD_OWNER="Purchasing", CHILD_TABLE="PurchaseOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PurchaseOrderHeader_ShipMethod_ShipMethodID", FK_COLUMNS="ShipMethodID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ShipMethodID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Purchasing.ShipMethod
        WHERE
          /* %JoinFKPK(inserted,Purchasing.ShipMethod) */
          inserted.ShipMethodID = Purchasing.ShipMethod.ShipMethodID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Purchasing.PurchaseOrderHeader because Purchasing.ShipMethod does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tD_Document ON Production.Document FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Document */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Production.Document  Production.ProductDocument on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001544c", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.DocumentNode = deleted.DocumentNode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Production.Document because Production.ProductDocument exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER Production.tU_Document ON Production.Document FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Document */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insDocumentNode hierarchyid,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Production.Document  Production.ProductDocument on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017987", PARENT_OWNER="Production", PARENT_TABLE="Document"
    CHILD_OWNER="Production", CHILD_TABLE="ProductDocument"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_ProductDocument_Document_DocumentNode", FK_COLUMNS="DocumentNode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(DocumentNode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Production.ProductDocument
      WHERE
        /*  %JoinFKPK(Production.ProductDocument,deleted," = "," AND") */
        Production.ProductDocument.DocumentNode = deleted.DocumentNode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Production.Document because Production.ProductDocument exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go



