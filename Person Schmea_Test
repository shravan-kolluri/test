
CREATE TYPE [NameStyle]
	FROM CHAR(18) NULL
go

CREATE TYPE [Name]
	FROM CHAR(18) NULL
go

CREATE TYPE [Phone]
	FROM CHAR(18) NULL
go

CREATE TYPE [Flag]
	FROM CHAR(18) NULL
go

CREATE TABLE [Address]
( 
	[AddressID]          int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[AddressLine1]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AddressLine2]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[City]               nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[PostalCode]         nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SpatialLocation]    geography  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Address_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Address_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [AddressType]
( 
	[AddressTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_AddressType_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_AddressType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntity]
( 
	[BusinessEntityID]   int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AddressID]          int  NOT NULL ,
	[AddressTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityContact]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonID]           int  NOT NULL ,
	[ContactTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ContactType]
( 
	[ContactTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ContactType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegion]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegion_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [E_14]
( 
	[s]                  char(18)  NOT NULL 
)
go

CREATE TABLE [EmailAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[EmailAddressID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_EmailAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmailAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Person]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonType]         nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[NameStyle]          [NameStyle]  NOT NULL 
	CONSTRAINT [DF_Person_NameStyle]
		 DEFAULT  0,
	[Title]              nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[FirstName]          [Name]  NOT NULL ,
	[MiddleName]         [Name]  NULL ,
	[LastName]           [Name]  NOT NULL ,
	[Suffix]             nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[EmailPromotion]     int  NOT NULL 
	CONSTRAINT [DF_Person_EmailPromotion]
		 DEFAULT  0,
	[AdditionalContactInfo] xml ( CONTENT [AdditionalContactInfoSchemaCollection] ) NULL ,
	[Demographics]       xml ( CONTENT [IndividualSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Person_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Person_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_PersonType] CHECK  ( [PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC') )
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_EmailPromotion] CHECK  ( EmailPromotion BETWEEN 0 AND 2 )
go

CREATE TABLE [PersonPhone]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PhoneNumber]        [Phone]  NOT NULL ,
	[PhoneNumberTypeID]  int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonPhone_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PhoneNumberType]
( 
	[PhoneNumberTypeID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PhoneNumberType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [pwd]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PasswordHash]       varchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[PasswordSalt]       varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Password_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Password_ModifiedDate]
		 DEFAULT  getdate(),
	[coly]               char(18)  NULL 
)
go

CREATE TABLE [StateProvince]
( 
	[StateProvinceID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceCode]  nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[IsOnlyStateProvinceFlag] [Flag]  NOT NULL 
	CONSTRAINT [DF_StateProvince_IsOnlyStateProvinceFlag]
		 DEFAULT  1,
	[Name]               [Name]  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_StateProvince_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_StateProvince_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Address]
	ADD CONSTRAINT [PK_Address_AddressID] PRIMARY KEY  CLUSTERED ([AddressID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Address_rowguid] ON [Address]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode] ON [Address]
( 
	[AddressLine1]        ASC,
	[AddressLine2]        ASC,
	[City]                ASC,
	[StateProvinceID]     ASC,
	[PostalCode]          ASC
)
go

ALTER TABLE [AddressType]
	ADD CONSTRAINT [PK_AddressType_AddressTypeID] PRIMARY KEY  CLUSTERED ([AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_rowguid] ON [AddressType]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_Name] ON [AddressType]
( 
	[Name]                ASC
)
go

ALTER TABLE [BusinessEntity]
	ADD CONSTRAINT [PK_BusinessEntity_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntity_rowguid] ON [BusinessEntity]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityAddress]
	ADD CONSTRAINT [PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[AddressID] ASC,[AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityAddress_rowguid] ON [BusinessEntityAddress]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityContact]
	ADD CONSTRAINT [PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PersonID] ASC,[ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityContact_rowguid] ON [BusinessEntityContact]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ContactType]
	ADD CONSTRAINT [PK_ContactType_ContactTypeID] PRIMARY KEY  CLUSTERED ([ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ContactType_Name] ON [ContactType]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegion]
	ADD CONSTRAINT [PK_CountryRegion_CountryRegionCode] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CountryRegion_Name] ON [CountryRegion]
( 
	[Name]                ASC
)
go

ALTER TABLE [E_14]
	ADD CONSTRAINT [XPKE_14] PRIMARY KEY  CLUSTERED ([s] ASC)
go

ALTER TABLE [EmailAddress]
	ADD CONSTRAINT [PK_EmailAddress_BusinessEntityID_EmailAddressID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[EmailAddressID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_EmailAddress_EmailAddress] ON [EmailAddress]
( 
	[EmailAddress]        ASC
)
go

ALTER TABLE [Person]
	ADD CONSTRAINT [PK_Person_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Person_rowguid] ON [Person]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Person_LastName_FirstName_MiddleName] ON [Person]
( 
	[LastName]            ASC,
	[FirstName]           ASC,
	[MiddleName]          ASC
)
go

ALTER TABLE [PersonPhone]
	ADD CONSTRAINT [PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PhoneNumber] ASC,[PhoneNumberTypeID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PersonPhone_PhoneNumber] ON [PersonPhone]
( 
	[PhoneNumber]         ASC
)
go

ALTER TABLE [PhoneNumberType]
	ADD CONSTRAINT [PK_PhoneNumberType_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([PhoneNumberTypeID] ASC)
go

ALTER TABLE [pwd]
	ADD CONSTRAINT [PK_Password_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

ALTER TABLE [StateProvince]
	ADD CONSTRAINT [PK_StateProvince_StateProvinceID] PRIMARY KEY  CLUSTERED ([StateProvinceID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_Name] ON [StateProvince]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_StateProvinceCode_CountryRegionCode] ON [StateProvince]
( 
	[StateProvinceCode]   ASC,
	[CountryRegionCode]   ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_rowguid] ON [StateProvince]
( 
	[rowguid]             ASC
)
go


ALTER TABLE [Address] WITH CHECK 
	ADD CONSTRAINT [FK_Address_StateProvince_StateProvinceID] FOREIGN KEY ([StateProvinceID]) REFERENCES [StateProvince]([StateProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Address]
	  WITH CHECK CHECK CONSTRAINT [FK_Address_StateProvince_StateProvinceID]
go


ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID] FOREIGN KEY ([AddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID] FOREIGN KEY ([AddressTypeID]) REFERENCES [AddressType]([AddressTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_Person_PersonID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID] FOREIGN KEY ([ContactTypeID]) REFERENCES [ContactType]([ContactTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [EmailAddress] WITH CHECK 
	ADD CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmailAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID]
go


ALTER TABLE [Person] WITH CHECK 
	ADD CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Person]
	  WITH CHECK CHECK CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID]
go

ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID] FOREIGN KEY ([PhoneNumberTypeID]) REFERENCES [PhoneNumberType]([PhoneNumberTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID]
go


ALTER TABLE [pwd] WITH CHECK 
	ADD CONSTRAINT [FK_Password_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [pwd]
	  WITH CHECK CHECK CONSTRAINT [FK_Password_Person_BusinessEntityID]
go


ALTER TABLE [StateProvince] WITH CHECK 
	ADD CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StateProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode]
go

CREATE TRIGGER [iuPerson] ON Person
   WITH 
 EXECUTE AS CALLER  AFTER INSERT,UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

 
go


ENABLE TRIGGER [iuPerson] ON Person
go


CREATE TRIGGER tD_Address ON Address FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Address */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Address  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028539", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Address because BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* StateProvince  Address on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (SELECT * FROM deleted,StateProvince
      WHERE
        /* %JoinFKPK(deleted,StateProvince," = "," AND") */
        deleted.StateProvinceID = StateProvince.StateProvinceID AND
        NOT EXISTS (
          SELECT * FROM Address
          WHERE
            /* %JoinFKPK(Address,StateProvince," = "," AND") */
            Address.StateProvinceID = StateProvince.StateProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Address because StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Address ON Address FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Address */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Address  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c68f", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Address because BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* StateProvince  Address on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,StateProvince
        WHERE
          /* %JoinFKPK(inserted,StateProvince) */
          inserted.StateProvinceID = StateProvince.StateProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Address because StateProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_AddressType ON AddressType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AddressType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014e9a", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete AddressType because BusinessEntityAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_AddressType ON AddressType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AddressType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00016f4c", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update AddressType because BusinessEntityAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntity ON BusinessEntity FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntity */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a31a", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntity ON BusinessEntity FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntity */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00041047", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because Person exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityAddress ON BusinessEntityAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047170", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,BusinessEntity," = "," AND") */
            BusinessEntityAddress.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (SELECT * FROM deleted,AddressType
      WHERE
        /* %JoinFKPK(deleted,AddressType," = "," AND") */
        deleted.AddressTypeID = AddressType.AddressTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,AddressType," = "," AND") */
            BusinessEntityAddress.AddressTypeID = AddressType.AddressTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because AddressType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
    IF EXISTS (SELECT * FROM deleted,Address
      WHERE
        /* %JoinFKPK(deleted,Address," = "," AND") */
        deleted.AddressID = Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,Address," = "," AND") */
            BusinessEntityAddress.AddressID = Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because Address exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityAddress ON BusinessEntityAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insAddressID int, 
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00048c81", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,AddressType
        WHERE
          /* %JoinFKPK(inserted,AddressType) */
          inserted.AddressTypeID = AddressType.AddressTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because AddressType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Address  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Address
        WHERE
          /* %JoinFKPK(inserted,Address) */
          inserted.AddressID = Address.AddressID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because Address does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityContact ON BusinessEntityContact FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000488e0", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,BusinessEntity," = "," AND") */
            BusinessEntityContact.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ContactType  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (SELECT * FROM deleted,ContactType
      WHERE
        /* %JoinFKPK(deleted,ContactType," = "," AND") */
        deleted.ContactTypeID = ContactType.ContactTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,ContactType," = "," AND") */
            BusinessEntityContact.ContactTypeID = ContactType.ContactTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because ContactType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.PersonID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,Person," = "," AND") */
            BusinessEntityContact.PersonID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityContact ON BusinessEntityContact FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPersonID int, 
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004a3b9", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ContactType  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ContactType
        WHERE
          /* %JoinFKPK(inserted,ContactType) */
          inserted.ContactTypeID = ContactType.ContactTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because ContactType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.PersonID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContactType ON ContactType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContactType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ContactType  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015148", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ContactType because BusinessEntityContact exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContactType ON ContactType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContactType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ContactType  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017223", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ContactType because BusinessEntityContact exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CountryRegion ON CountryRegion FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegion */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CountryRegion  StateProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001350d", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CountryRegion because StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CountryRegion ON CountryRegion FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegion */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CountryRegion  StateProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000153e8", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CountryRegion because StateProvince exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EmailAddress ON EmailAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmailAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  EmailAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016d02", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM EmailAddress
          WHERE
            /* %JoinFKPK(EmailAddress,Person," = "," AND") */
            EmailAddress.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmailAddress because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EmailAddress ON EmailAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmailAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insEmailAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  EmailAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001812e", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmailAddress because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Person ON Person FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Person */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  EmailAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005a644", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,EmailAddress
      WHERE
        /*  %JoinFKPK(EmailAddress,deleted," = "," AND") */
        EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because EmailAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because PersonPhone exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  pwd on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="pwd"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,pwd
      WHERE
        /*  %JoinFKPK(pwd,deleted," = "," AND") */
        pwd.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because pwd exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person
          WHERE
            /* %JoinFKPK(Person,BusinessEntity," = "," AND") */
            Person.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person because BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Person ON Person FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Person */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  EmailAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00063259", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmailAddress
      WHERE
        /*  %JoinFKPK(EmailAddress,deleted," = "," AND") */
        EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because EmailAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because PersonPhone exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  pwd on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="pwd"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,pwd
      WHERE
        /*  %JoinFKPK(pwd,deleted," = "," AND") */
        pwd.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because pwd exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person because BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PersonPhone ON PersonPhone FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonPhone */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhoneNumberType  PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002e659", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (SELECT * FROM deleted,PhoneNumberType
      WHERE
        /* %JoinFKPK(deleted,PhoneNumberType," = "," AND") */
        deleted.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID AND
        NOT EXISTS (
          SELECT * FROM PersonPhone
          WHERE
            /* %JoinFKPK(PersonPhone,PhoneNumberType," = "," AND") */
            PersonPhone.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhone because PhoneNumberType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM PersonPhone
          WHERE
            /* %JoinFKPK(PersonPhone,Person," = "," AND") */
            PersonPhone.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhone because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PersonPhone ON PersonPhone FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonPhone */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPhoneNumber Phone, 
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhoneNumberType  PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003116d", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,PhoneNumberType
        WHERE
          /* %JoinFKPK(inserted,PhoneNumberType) */
          inserted.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhone because PhoneNumberType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhone because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PhoneNumberType ON PhoneNumberType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PhoneNumberType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhoneNumberType  PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013c75", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PhoneNumberType because PersonPhone exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PhoneNumberType ON PhoneNumberType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PhoneNumberType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhoneNumberType  PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00015b34", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update PhoneNumberType because PersonPhone exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_pwd ON pwd FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on pwd */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  pwd on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015717", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="pwd"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM pwd
          WHERE
            /* %JoinFKPK(pwd,Person," = "," AND") */
            pwd.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last pwd because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_pwd ON pwd FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on pwd */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  pwd on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000177a8", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="pwd"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update pwd because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_StateProvince ON StateProvince FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on StateProvince */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StateProvince  Address on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00028ff4", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,Address
      WHERE
        /*  %JoinFKPK(Address,deleted," = "," AND") */
        Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete StateProvince because Address exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  StateProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,CountryRegion
      WHERE
        /* %JoinFKPK(deleted,CountryRegion," = "," AND") */
        deleted.CountryRegionCode = CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM StateProvince
          WHERE
            /* %JoinFKPK(StateProvince,CountryRegion," = "," AND") */
            StateProvince.CountryRegionCode = CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last StateProvince because CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_StateProvince ON StateProvince FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on StateProvince */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStateProvinceID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StateProvince  Address on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002c27e", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Address
      WHERE
        /*  %JoinFKPK(Address,deleted," = "," AND") */
        Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update StateProvince because Address exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  StateProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CountryRegion
        WHERE
          /* %JoinFKPK(inserted,CountryRegion) */
          inserted.CountryRegionCode = CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update StateProvince because CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


