
CREATE TYPE [NamStyle]
	FROM CHAR(18) NULL
go

CREATE TYPE [Nam]
	FROM CHAR(18) NULL
go

CREATE TYPE [Phn]
	FROM CHAR(18) NULL
go

CREATE TYPE [Flag]
	FROM CHAR(18) NULL
go

CREATE TABLE [Addr]
( 
	[Addr_ID]            int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[AddrLine1]          nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AddrLine2]          nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Cty]                nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StProvinceID]       int  NOT NULL ,
	[PostalCd]           nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SpatialLocation]    geography  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Address_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_Address_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [AddressType]
( 
	[AddressTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Nam]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_AddressType_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_AddressType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntity]
( 
	[BusinessEntityID]   int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityAddr]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AddrID]             int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_ModifiedDate]
		 DEFAULT  getdate(),
	[AddressTypeID]      int  NOT NULL 
)
go

CREATE TABLE [BusinessEntityContact]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonID]           int  NOT NULL ,
	[ContactTypID]       int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ContactTyp]
( 
	[ContactTypID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_ContactType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRgn]
( 
	[CountryRgnCd]       nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegion_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [E_19]
( 
	[a]                  char(18)  NOT NULL ,
	[s]                  char(18)  NULL 
)
go

CREATE TABLE [EmailAddr]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[EmailAddrID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[EmailAddr]          nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_EmailAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_EmailAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Password]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PasswordHash]       varchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[PasswordSalt]       varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Password_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Password_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Person]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonTyp]          nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[NamStyle]           [NamStyle]  NOT NULL 
	CONSTRAINT [DF_Person_NameStyle]
		 DEFAULT  0,
	[Ttle]               nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[FrstNam]            [Nam]  NOT NULL ,
	[MidNam]             [Nam]  NULL ,
	[LstNam]             [Nam]  NOT NULL ,
	[Suffix]             nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[EmailPromotion]     int  NOT NULL 
	CONSTRAINT [DF_Person_EmailPromotion]
		 DEFAULT  0,
	[AdditionalContactInfo] xml ( CONTENT [AdditionalContactInfoSchemaCollection] ) NULL ,
	[Demographics]       xml ( CONTENT [IndividualSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Person_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_Person_ModifiedDate]
		 DEFAULT  getdate(),
	[test_col]           nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_PersonType] CHECK  ( [PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC') )
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_EmailPromotion] CHECK  ( EmailPromotion BETWEEN 0 AND 2 )
go

CREATE TABLE [PersonPhn]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PhnNbr]             [Phn]  NOT NULL ,
	[PhnNbrTypID]        int  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_PersonPhone_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PhnNbrTyp]
( 
	[PhnNbrTypID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_PhoneNumberType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [StProvince]
( 
	[StProvinceID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[StProvinceCd]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CountryRgnCd]       nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[IsOnlyStProvinceFlag] [Flag]  NOT NULL 
	CONSTRAINT [DF_StateProvince_IsOnlyStateProvinceFlag]
		 DEFAULT  1,
	[Nam]                [Nam]  NOT NULL ,
	[TerriToryID]        int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_StateProvince_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_StateProvince_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Addr]
	ADD CONSTRAINT [PK_Address_AddressID] PRIMARY KEY  CLUSTERED ([Addr_ID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Address_rowguid] ON [Addr]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode] ON [Addr]
( 
	[AddrLine1]           ASC,
	[AddrLine2]           ASC,
	[Cty]                 ASC,
	[StProvinceID]        ASC,
	[PostalCd]            ASC
)
go

ALTER TABLE [AddressType]
	ADD CONSTRAINT [PK_AddressType_AddressTypeID] PRIMARY KEY  CLUSTERED ([AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_Name] ON [AddressType]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_rowguid] ON [AddressType]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntity]
	ADD CONSTRAINT [PK_BusinessEntity_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntity_rowguid] ON [BusinessEntity]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityAddr]
	ADD CONSTRAINT [PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[AddrID] ASC,[AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityAddress_rowguid] ON [BusinessEntityAddr]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityContact]
	ADD CONSTRAINT [PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PersonID] ASC,[ContactTypID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityContact_rowguid] ON [BusinessEntityContact]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ContactTyp]
	ADD CONSTRAINT [PK_ContactType_ContactTypeID] PRIMARY KEY  CLUSTERED ([ContactTypID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ContactType_Name] ON [ContactTyp]
( 
	[Nam]                 ASC
)
go

ALTER TABLE [CountryRgn]
	ADD CONSTRAINT [PK_CountryRegion_CountryRegionCode] PRIMARY KEY  CLUSTERED ([CountryRgnCd] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CountryRegion_Name] ON [CountryRgn]
( 
	[Nam]                 ASC
)
go

ALTER TABLE [E_19]
	ADD CONSTRAINT [XPKE_19] PRIMARY KEY  CLUSTERED ([a] ASC)
go

ALTER TABLE [EmailAddr]
	ADD CONSTRAINT [PK_EmailAddress_BusinessEntityID_EmailAddressID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[EmailAddrID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_EmailAddress_EmailAddress] ON [EmailAddr]
( 
	[EmailAddr]           ASC
)
go

ALTER TABLE [Password]
	ADD CONSTRAINT [PK_Password_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

ALTER TABLE [Person]
	ADD CONSTRAINT [PK_Person_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Person_rowguid] ON [Person]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Person_LastName_FirstName_MiddleName] ON [Person]
( 
	[LstNam]              ASC,
	[FrstNam]             ASC,
	[MidNam]              ASC
)
go

ALTER TABLE [PersonPhn]
	ADD CONSTRAINT [PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PhnNbr] ASC,[PhnNbrTypID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PersonPhone_PhoneNumber] ON [PersonPhn]
( 
	[PhnNbr]              ASC
)
go

ALTER TABLE [PhnNbrTyp]
	ADD CONSTRAINT [PK_PhoneNumberType_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([PhnNbrTypID] ASC)
go

ALTER TABLE [StProvince]
	ADD CONSTRAINT [PK_StateProvince_StateProvinceID] PRIMARY KEY  CLUSTERED ([StProvinceID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_Name] ON [StProvince]
( 
	[Nam]                 ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_StateProvinceCode_CountryRegionCode] ON [StProvince]
( 
	[StProvinceCd]        ASC,
	[CountryRgnCd]        ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_rowguid] ON [StProvince]
( 
	[rowguid]             ASC
)
go


ALTER TABLE [Addr] WITH CHECK 
	ADD CONSTRAINT [FK_Address_StateProvince_StateProvinceID] FOREIGN KEY ([StProvinceID]) REFERENCES [StProvince]([StProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Addr]
	  WITH CHECK CHECK CONSTRAINT [FK_Address_StateProvince_StateProvinceID]
go


ALTER TABLE [BusinessEntityAddr] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID] FOREIGN KEY ([AddrID]) REFERENCES [Addr]([Addr_ID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddr]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID]
go

ALTER TABLE [BusinessEntityAddr] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddr]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID]
go

ALTER TABLE [BusinessEntityAddr] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID] FOREIGN KEY ([AddressTypeID]) REFERENCES [AddressType]([AddressTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddr]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID]
go


ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_Person_PersonID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID] FOREIGN KEY ([ContactTypID]) REFERENCES [ContactTyp]([ContactTypID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [EmailAddr] WITH CHECK 
	ADD CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmailAddr]
	  WITH CHECK CHECK CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID]
go


ALTER TABLE [Password] WITH CHECK 
	ADD CONSTRAINT [FK_Password_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Password]
	  WITH CHECK CHECK CONSTRAINT [FK_Password_Person_BusinessEntityID]
go


ALTER TABLE [Person] WITH CHECK 
	ADD CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Person]
	  WITH CHECK CHECK CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [PersonPhn] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhn]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID]
go

ALTER TABLE [PersonPhn] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID] FOREIGN KEY ([PhnNbrTypID]) REFERENCES [PhnNbrTyp]([PhnNbrTypID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhn]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID]
go


ALTER TABLE [StProvince] WITH CHECK 
	ADD CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode] FOREIGN KEY ([CountryRgnCd]) REFERENCES [CountryRgn]([CountryRgnCd])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode]
go

CREATE TRIGGER [iuPerson] ON Person
   WITH 
 EXECUTE AS CALLER  AFTER INSERT,UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

 
go


ENABLE TRIGGER [iuPerson] ON Person
go


CREATE TRIGGER tD_Addr ON Addr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Addr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Addr  BusinessEntityAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00026481", PARENT_OWNER="", PARENT_TABLE="Addr"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddrID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(BusinessEntityAddr,deleted," = "," AND") */
        BusinessEntityAddr.AddrID = deleted.Addr_ID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Addr because BusinessEntityAddr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* StProvince  Addr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StProvince"
    CHILD_OWNER="", CHILD_TABLE="Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StProvinceID" */
    IF EXISTS (SELECT * FROM deleted,StProvince
      WHERE
        /* %JoinFKPK(deleted,StProvince," = "," AND") */
        deleted.StProvinceID = StProvince.StProvinceID AND
        NOT EXISTS (
          SELECT * FROM Addr
          WHERE
            /* %JoinFKPK(Addr,StProvince," = "," AND") */
            Addr.StProvinceID = StProvince.StProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Addr because StProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Addr ON Addr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Addr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddr_ID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Addr  BusinessEntityAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00029e6f", PARENT_OWNER="", PARENT_TABLE="Addr"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddrID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(Addr_ID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(BusinessEntityAddr,deleted," = "," AND") */
        BusinessEntityAddr.AddrID = deleted.Addr_ID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Addr because BusinessEntityAddr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* StProvince  Addr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StProvince"
    CHILD_OWNER="", CHILD_TABLE="Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,StProvince
        WHERE
          /* %JoinFKPK(inserted,StProvince) */
          inserted.StProvinceID = StProvince.StProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Addr because StProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_AddressType ON AddressType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AddressType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013efc", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(BusinessEntityAddr,deleted," = "," AND") */
        BusinessEntityAddr.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete AddressType because BusinessEntityAddr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_AddressType ON AddressType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AddressType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000159ef", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(BusinessEntityAddr,deleted," = "," AND") */
        BusinessEntityAddr.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update AddressType because BusinessEntityAddr exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntity ON BusinessEntity FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntity */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003957b", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(BusinessEntityAddr,deleted," = "," AND") */
        BusinessEntityAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityAddr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntity ON BusinessEntity FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntity */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003f5f4", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(BusinessEntityAddr,deleted," = "," AND") */
        BusinessEntityAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityAddr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because Person exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityAddr ON BusinessEntityAddr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityAddr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00046ae3", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (SELECT * FROM deleted,AddressType
      WHERE
        /* %JoinFKPK(deleted,AddressType," = "," AND") */
        deleted.AddressTypeID = AddressType.AddressTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddr
          WHERE
            /* %JoinFKPK(BusinessEntityAddr,AddressType," = "," AND") */
            BusinessEntityAddr.AddressTypeID = AddressType.AddressTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddr because AddressType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddr
          WHERE
            /* %JoinFKPK(BusinessEntityAddr,BusinessEntity," = "," AND") */
            BusinessEntityAddr.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddr because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Addr  BusinessEntityAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Addr"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddrID" */
    IF EXISTS (SELECT * FROM deleted,Addr
      WHERE
        /* %JoinFKPK(deleted,Addr," = "," AND") */
        deleted.AddrID = Addr.Addr_ID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddr
          WHERE
            /* %JoinFKPK(BusinessEntityAddr,Addr," = "," AND") */
            BusinessEntityAddr.AddrID = Addr.Addr_ID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddr because Addr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityAddr ON BusinessEntityAddr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityAddr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insAddrID int, 
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00046d19", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,AddressType
        WHERE
          /* %JoinFKPK(inserted,AddressType) */
          inserted.AddressTypeID = AddressType.AddressTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddr because AddressType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddr because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Addr  BusinessEntityAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Addr"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddrID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddrID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Addr
        WHERE
          /* %JoinFKPK(inserted,Addr) */
          inserted.AddrID = Addr.Addr_ID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddr because Addr does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityContact ON BusinessEntityContact FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047593", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,BusinessEntity," = "," AND") */
            BusinessEntityContact.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ContactTyp  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypID" */
    IF EXISTS (SELECT * FROM deleted,ContactTyp
      WHERE
        /* %JoinFKPK(deleted,ContactTyp," = "," AND") */
        deleted.ContactTypID = ContactTyp.ContactTypID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,ContactTyp," = "," AND") */
            BusinessEntityContact.ContactTypID = ContactTyp.ContactTypID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because ContactTyp exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.PersonID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,Person," = "," AND") */
            BusinessEntityContact.PersonID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityContact ON BusinessEntityContact FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPersonID int, 
           @insContactTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004a255", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ContactTyp  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContactTypID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ContactTyp
        WHERE
          /* %JoinFKPK(inserted,ContactTyp) */
          inserted.ContactTypID = ContactTyp.ContactTypID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because ContactTyp does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.PersonID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContactTyp ON ContactTyp FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContactTyp */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ContactTyp  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014c80", PARENT_OWNER="", PARENT_TABLE="ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypID = deleted.ContactTypID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ContactTyp because BusinessEntityContact exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContactTyp ON ContactTyp FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContactTyp */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContactTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ContactTyp  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000171c8", PARENT_OWNER="", PARENT_TABLE="ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContactTypID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypID = deleted.ContactTypID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ContactTyp because BusinessEntityContact exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CountryRgn ON CountryRgn FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRgn */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CountryRgn  StProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001246c", PARENT_OWNER="", PARENT_TABLE="CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRgnCd" */
    IF EXISTS (
      SELECT * FROM deleted,StProvince
      WHERE
        /*  %JoinFKPK(StProvince,deleted," = "," AND") */
        StProvince.CountryRgnCd = deleted.CountryRgnCd
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CountryRgn because StProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CountryRgn ON CountryRgn FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRgn */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRgnCd nvarchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CountryRgn  StProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001496c", PARENT_OWNER="", PARENT_TABLE="CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRgnCd" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRgnCd)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,StProvince
      WHERE
        /*  %JoinFKPK(StProvince,deleted," = "," AND") */
        StProvince.CountryRgnCd = deleted.CountryRgnCd
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CountryRgn because StProvince exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EmailAddr ON EmailAddr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmailAddr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  EmailAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015c9a", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM EmailAddr
          WHERE
            /* %JoinFKPK(EmailAddr,Person," = "," AND") */
            EmailAddr.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmailAddr because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EmailAddr ON EmailAddr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmailAddr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insEmailAddrID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  EmailAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000177df", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmailAddr because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Password ON Password FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Password */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  Password on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001579e", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Password
          WHERE
            /* %JoinFKPK(Password,Person," = "," AND") */
            Password.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Password because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Password ON Password FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Password */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  Password on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018acd", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Password because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Person ON Person FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Person */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  Password on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005b5bf", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Password
      WHERE
        /*  %JoinFKPK(Password,deleted," = "," AND") */
        Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because Password exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  EmailAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,EmailAddr
      WHERE
        /*  %JoinFKPK(EmailAddr,deleted," = "," AND") */
        EmailAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because EmailAddr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhn on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhn
      WHERE
        /*  %JoinFKPK(PersonPhn,deleted," = "," AND") */
        PersonPhn.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because PersonPhn exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person
          WHERE
            /* %JoinFKPK(Person,BusinessEntity," = "," AND") */
            Person.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person because BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Person ON Person FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Person */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  Password on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000602ee", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Password
      WHERE
        /*  %JoinFKPK(Password,deleted," = "," AND") */
        Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because Password exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  EmailAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmailAddr
      WHERE
        /*  %JoinFKPK(EmailAddr,deleted," = "," AND") */
        EmailAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because EmailAddr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhn on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhn
      WHERE
        /*  %JoinFKPK(PersonPhn,deleted," = "," AND") */
        PersonPhn.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because PersonPhn exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person because BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PersonPhn ON PersonPhn FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonPhn */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhnNbrTyp  PersonPhn on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002c01b", PARENT_OWNER="", PARENT_TABLE="PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
    IF EXISTS (SELECT * FROM deleted,PhnNbrTyp
      WHERE
        /* %JoinFKPK(deleted,PhnNbrTyp," = "," AND") */
        deleted.PhnNbrTypID = PhnNbrTyp.PhnNbrTypID AND
        NOT EXISTS (
          SELECT * FROM PersonPhn
          WHERE
            /* %JoinFKPK(PersonPhn,PhnNbrTyp," = "," AND") */
            PersonPhn.PhnNbrTypID = PhnNbrTyp.PhnNbrTypID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhn because PhnNbrTyp exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhn on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM PersonPhn
          WHERE
            /* %JoinFKPK(PersonPhn,Person," = "," AND") */
            PersonPhn.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhn because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PersonPhn ON PersonPhn FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonPhn */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPhnNbr Phn, 
           @insPhnNbrTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhnNbrTyp  PersonPhn on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002f15b", PARENT_OWNER="", PARENT_TABLE="PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PhnNbrTypID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,PhnNbrTyp
        WHERE
          /* %JoinFKPK(inserted,PhnNbrTyp) */
          inserted.PhnNbrTypID = PhnNbrTyp.PhnNbrTypID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhn because PhnNbrTyp does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhn on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhn because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PhnNbrTyp ON PhnNbrTyp FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PhnNbrTyp */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhnNbrTyp  PersonPhn on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000124a4", PARENT_OWNER="", PARENT_TABLE="PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhn
      WHERE
        /*  %JoinFKPK(PersonPhn,deleted," = "," AND") */
        PersonPhn.PhnNbrTypID = deleted.PhnNbrTypID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PhnNbrTyp because PersonPhn exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PhnNbrTyp ON PhnNbrTyp FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PhnNbrTyp */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPhnNbrTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhnNbrTyp  PersonPhn on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001424f", PARENT_OWNER="", PARENT_TABLE="PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PhnNbrTypID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhn
      WHERE
        /*  %JoinFKPK(PersonPhn,deleted," = "," AND") */
        PersonPhn.PhnNbrTypID = deleted.PhnNbrTypID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update PhnNbrTyp because PersonPhn exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_StProvince ON StProvince FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on StProvince */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StProvince  Addr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000261bd", PARENT_OWNER="", PARENT_TABLE="StProvince"
    CHILD_OWNER="", CHILD_TABLE="Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,Addr
      WHERE
        /*  %JoinFKPK(Addr,deleted," = "," AND") */
        Addr.StProvinceID = deleted.StProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete StProvince because Addr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRgn  StProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRgnCd" */
    IF EXISTS (SELECT * FROM deleted,CountryRgn
      WHERE
        /* %JoinFKPK(deleted,CountryRgn," = "," AND") */
        deleted.CountryRgnCd = CountryRgn.CountryRgnCd AND
        NOT EXISTS (
          SELECT * FROM StProvince
          WHERE
            /* %JoinFKPK(StProvince,CountryRgn," = "," AND") */
            StProvince.CountryRgnCd = CountryRgn.CountryRgnCd
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last StProvince because CountryRgn exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_StProvince ON StProvince FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on StProvince */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStProvinceID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StProvince  Addr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002944a", PARENT_OWNER="", PARENT_TABLE="StProvince"
    CHILD_OWNER="", CHILD_TABLE="Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Addr
      WHERE
        /*  %JoinFKPK(Addr,deleted," = "," AND") */
        Addr.StProvinceID = deleted.StProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update StProvince because Addr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRgn  StProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRgnCd" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRgnCd)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CountryRgn
        WHERE
          /* %JoinFKPK(inserted,CountryRgn) */
          inserted.CountryRgnCd = CountryRgn.CountryRgnCd
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update StProvince because CountryRgn does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


