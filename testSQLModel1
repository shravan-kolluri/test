
CREATE TYPE [AccountNumber]
	FROM NVARCHAR(15) NULL
go

CREATE TYPE [Flag]
	FROM BIT NOT NULL
go

CREATE TYPE [NameStyle]
	FROM BIT NOT NULL
go

CREATE TYPE [Name]
	FROM NVARCHAR(50) NULL
go

CREATE TYPE [OrderNumber]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Phone]
	FROM NVARCHAR(25) NULL
go

CREATE TABLE [Address]
( 
	[AddressID]          int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[AddressLine1]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AddressLine2]       nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[City]               nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[PostalCode]         nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SpatialLocation]    geography  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Address_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Address_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [AddressType]
( 
	[AddressTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_AddressType_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_AddressType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntity]
( 
	[BusinessEntityID]   int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AddressID]          int  NOT NULL ,
	[AddressTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [BusinessEntityContact]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonID]           int  NOT NULL ,
	[ContactTypeID]      int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ContactType]
( 
	[ContactTypeID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ContactType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegion]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegion_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CountryRegionCurrency]
( 
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegionCurrency_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CreditCard]
( 
	[CreditCardID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[CardType]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CardNumber]         nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ExpMonth]           tinyint  NOT NULL ,
	[ExpYear]            smallint  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CreditCard_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Currency]
( 
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Currency_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [CurrencyRate]
( 
	[CurrencyRateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[CurrencyRateDate]   datetime  NOT NULL ,
	[FromCurrencyCode]   nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[ToCurrencyCode]     nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AverageRate]        money  NOT NULL ,
	[EndOfDayRate]       money  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_CurrencyRate_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Currencyx]
( 
	[CurrencyCode]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[updateDate]         datetime  NOT NULL ,
	[new_col]            char(18)  NULL 
)
go

CREATE TABLE [Customer]
( 
	[CustomerID]         int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[PersonID]           int  NULL ,
	[StoreID]            int  NULL ,
	[TerritoryID]        int  NULL ,
	[AccountNumber]      AS (isnull('AW'+[dbo].[ufnLeadingZeros]([CustomerID]),'')) COLLATE SQL_Latin1_General_CP1_CI_AS ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Customer_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Customer_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [EmailAddress]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[EmailAddressID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[EmailAddress]       nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_EmailAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_EmailAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [new_Table]
( 
	[col1]               char(18)  NOT NULL ,
	[coly]               char(18)  NULL 
)
go

CREATE TABLE [Password]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PasswordHash]       varchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[PasswordSalt]       varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Password_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Password_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Person]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonType]         nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[NameStyle]          [NameStyle]  NOT NULL 
	CONSTRAINT [DF_Person_NameStyle]
		 DEFAULT  0,
	[Title]              nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[FirstName]          [Name]  NOT NULL ,
	[MiddleName]         [Name]  NULL ,
	[LastName]           [Name]  NOT NULL ,
	[Suffix]             nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[EmailPromotion]     int  NOT NULL 
	CONSTRAINT [DF_Person_EmailPromotion]
		 DEFAULT  0,
	[AdditionalContactInfo] xml ( CONTENT [AdditionalContactInfoSchemaCollection] ) NULL ,
	[Demographics]       xml ( CONTENT [IndividualSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Person_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Person_ModifiedDate]
		 DEFAULT  getdate(),
	[test_col]           nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL 
)
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_PersonType] CHECK  ( [PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC') )
go

ALTER TABLE [Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_EmailPromotion] CHECK  ( EmailPromotion BETWEEN 0 AND 2 )
go

CREATE TABLE [PersonCreditCard]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[CreditCardID]       int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonCreditCard_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PersonPhone]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PhoneNumber]        [Phone]  NOT NULL ,
	[PhoneNumberTypeID]  int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PersonPhone_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [PhoneNumberType]
( 
	[PhoneNumberTypeID]  int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_PhoneNumberType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesOrderDetail]
( 
	[SalesOrderID]       int  NOT NULL ,
	[SalesOrderDetailID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[CarrierTrackingNumber] nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[OrderQty]           smallint  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[SpecialOfferID]     int  NOT NULL ,
	[UnitPrice]          money  NOT NULL ,
	[UnitPriceDiscount]  money  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_UnitPriceDiscount]
		 DEFAULT  0.0,
	[LineTotal]          AS (isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0))) ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderDetail_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_OrderQty] CHECK  ( [OrderQty]>(0) )
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_UnitPrice] CHECK  ( UnitPrice >= 0.00 )
go

ALTER TABLE [SalesOrderDetail]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderDetail_UnitPriceDiscount] CHECK  ( UnitPriceDiscount >= 0.00 )
go

CREATE TABLE [SalesOrderHeader]
( 
	[SalesOrderID]       int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[RevisionNumber]     tinyint  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_RevisionNumber]
		 DEFAULT  0,
	[OrderDate]          datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_OrderDate]
		 DEFAULT  getdate(),
	[DueDate]            datetime  NOT NULL ,
	[ShipDate]           datetime  NULL ,
	[Status]             tinyint  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_Status]
		 DEFAULT  1,
	[OnlineOrderFlag]    [Flag]  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_OnlineOrderFlag]
		 DEFAULT  1,
	[SalesOrderNumber]   AS (isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***')) COLLATE SQL_Latin1_General_CP1_CI_AS ,
	[PurchaseOrderNumber] [OrderNumber]  NULL ,
	[AccountNumber]      [AccountNumber]  NULL ,
	[CustomerID]         int  NOT NULL ,
	[SalesPersonID]      int  NULL ,
	[TerritoryID]        int  NULL ,
	[BillToAddressID]    int  NOT NULL ,
	[ShipToAddressID]    int  NOT NULL ,
	[ShipMethodID]       int  NOT NULL ,
	[CreditCardID]       int  NULL ,
	[CreditCardApprovalCode] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[CurrencyRateID]     int  NULL ,
	[SubTotal]           money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_SubTotal]
		 DEFAULT  0.00,
	[TaxAmt]             money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_TaxAmt]
		 DEFAULT  0.00,
	[Freight]            money  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_Freight]
		 DEFAULT  0.00,
	[TotalDue]           AS (isnull(([SubTotal]+[TaxAmt])+[Freight],(0))) ,
	[Comment]            nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeader_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_Status] CHECK  ( Status BETWEEN 0 AND 8 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_SubTotal] CHECK  ( SubTotal >= 0.00 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_TaxAmt] CHECK  ( TaxAmt >= 0.00 )
go

ALTER TABLE [SalesOrderHeader]
	 WITH CHECK ADD CONSTRAINT [CK_SalesOrderHeader_Freight] CHECK  ( Freight >= 0.00 )
go

CREATE TABLE [SalesOrderHeaderSalesReason]
( 
	[SalesOrderID]       int  NOT NULL ,
	[SalesReasonID]      int  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesOrderHeaderSalesReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesPerson]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[TerritoryID]        int  NULL ,
	[SalesQuota]         money  NULL ,
	[Bonus]              money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_Bonus]
		 DEFAULT  0.00,
	[CommissionPct]      smallmoney  NOT NULL 
	CONSTRAINT [DF_SalesPerson_CommissionPct]
		 DEFAULT  0.00,
	[SalesYTD]           money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_SalesYTD]
		 DEFAULT  0.00,
	[SalesLastYear]      money  NOT NULL 
	CONSTRAINT [DF_SalesPerson_SalesLastYear]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesPerson_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesPerson_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesQuota] CHECK  ( [SalesQuota]>(0.00) )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_Bonus] CHECK  ( Bonus >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_CommissionPct] CHECK  ( CommissionPct >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesYTD] CHECK  ( SalesYTD >= 0.00 )
go

ALTER TABLE [SalesPerson]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPerson_SalesLastYear] CHECK  ( SalesLastYear >= 0.00 )
go

CREATE TABLE [SalesPersonQuotaHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[QuotaDate]          datetime  NOT NULL ,
	[SalesQuota]         money  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesPersonQuotaHistory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesPersonQuotaHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesPersonQuotaHistory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesPersonQuotaHistory_SalesQuota] CHECK  ( [SalesQuota]>(0.00) )
go

CREATE TABLE [SalesReason]
( 
	[SalesReasonID]      int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[ReasonType]         [Name]  NOT NULL ,
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesReason_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [SalesTaxRate]
( 
	[SalesTaxRateID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceID]    int  NOT NULL ,
	[TaxType]            tinyint  NOT NULL ,
	[TaxRate]            smallmoney  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_TaxRate]
		 DEFAULT  0.00,
	[Name]               [Name]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTaxRate_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesTaxRate]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTaxRate_TaxType] CHECK  ( TaxType BETWEEN 1 AND 3 )
go

CREATE TABLE [SalesTerritory]
( 
	[TerritoryID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Group]              nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SalesYTD]           money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_SalesYTD]
		 DEFAULT  0.00,
	[SalesLastYear]      money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_SalesLastYear]
		 DEFAULT  0.00,
	[CostYTD]            money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_CostYTD]
		 DEFAULT  0.00,
	[CostLastYear]       money  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_CostLastYear]
		 DEFAULT  0.00,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTerritory_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_SalesYTD] CHECK  ( SalesYTD >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_SalesLastYear] CHECK  ( SalesLastYear >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_CostYTD] CHECK  ( CostYTD >= 0.00 )
go

ALTER TABLE [SalesTerritory]
	 WITH CHECK ADD CONSTRAINT [CK_SalesTerritory_CostLastYear] CHECK  ( CostLastYear >= 0.00 )
go

CREATE TABLE [SalesTerritoryHistory]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SalesTerritoryHistory_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SalesTerritoryHistory_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [ShoppingCartItem]
( 
	[ShoppingCartItemID] int  IDENTITY ( 1,1 )  NOT NULL ,
	[ShoppingCartID]     nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Quantity]           int  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_Quantity]
		 DEFAULT  1,
	[ProductID]          int  NOT NULL ,
	[DateCreated]        datetime  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_DateCreated]
		 DEFAULT  getdate(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_ShoppingCartItem_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [ShoppingCartItem]
	 WITH CHECK ADD CONSTRAINT [CK_ShoppingCartItem_Quantity] CHECK  ( Quantity >= 1 )
go

CREATE TABLE [SpecialOffer]
( 
	[SpecialOfferID]     int  IDENTITY ( 1,1 )  NOT NULL ,
	[Description]        nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[DiscountPct]        smallmoney  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_DiscountPct]
		 DEFAULT  0.00,
	[Type]               nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Category]           nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StartDate]          datetime  NOT NULL ,
	[EndDate]            datetime  NOT NULL ,
	[MinQty]             int  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_MinQty]
		 DEFAULT  0,
	[MaxQty]             int  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SpecialOffer_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_DiscountPct] CHECK  ( DiscountPct >= 0.00 )
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_MinQty] CHECK  ( MinQty >= 0 )
go

ALTER TABLE [SpecialOffer]
	 WITH CHECK ADD CONSTRAINT [CK_SpecialOffer_MaxQty] CHECK  ( MaxQty >= 0 )
go

CREATE TABLE [SpecialOfferProduct]
( 
	[SpecialOfferID]     int  NOT NULL ,
	[ProductID]          int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_SpecialOfferProduct_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_SpecialOfferProduct_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [StateProvince]
( 
	[StateProvinceID]    int  IDENTITY ( 1,1 )  NOT NULL ,
	[StateProvinceCode]  nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CountryRegionCode]  nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[IsOnlyStateProvinceFlag] [Flag]  NOT NULL 
	CONSTRAINT [DF_StateProvince_IsOnlyStateProvinceFlag]
		 DEFAULT  1,
	[Name]               [Name]  NOT NULL ,
	[TerritoryID]        int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_StateProvince_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_StateProvince_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [Store]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[Name]               [Name]  NOT NULL ,
	[SalesPersonID]      int  NULL ,
	[Demographics]       xml ( CONTENT [StoreSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Store_rowguid]
		 DEFAULT  newid(),
	[ModifiedDate]       datetime  NOT NULL 
	CONSTRAINT [DF_Store_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [Address]
	ADD CONSTRAINT [PK_Address_AddressID] PRIMARY KEY  CLUSTERED ([AddressID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Address_rowguid] ON [Address]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode] ON [Address]
( 
	[AddressLine1]        ASC,
	[AddressLine2]        ASC,
	[City]                ASC,
	[StateProvinceID]     ASC,
	[PostalCode]          ASC
)
go

ALTER TABLE [AddressType]
	ADD CONSTRAINT [PK_AddressType_AddressTypeID] PRIMARY KEY  CLUSTERED ([AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_rowguid] ON [AddressType]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_AddressType_Name] ON [AddressType]
( 
	[Name]                ASC
)
go

ALTER TABLE [BusinessEntity]
	ADD CONSTRAINT [PK_BusinessEntity_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntity_rowguid] ON [BusinessEntity]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityAddress]
	ADD CONSTRAINT [PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[AddressID] ASC,[AddressTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityAddress_rowguid] ON [BusinessEntityAddress]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [BusinessEntityContact]
	ADD CONSTRAINT [PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PersonID] ASC,[ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_BusinessEntityContact_rowguid] ON [BusinessEntityContact]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ContactType]
	ADD CONSTRAINT [PK_ContactType_ContactTypeID] PRIMARY KEY  CLUSTERED ([ContactTypeID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_ContactType_Name] ON [ContactType]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegion]
	ADD CONSTRAINT [PK_CountryRegion_CountryRegionCode] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CountryRegion_Name] ON [CountryRegion]
( 
	[Name]                ASC
)
go

ALTER TABLE [CountryRegionCurrency]
	ADD CONSTRAINT [PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode] PRIMARY KEY  CLUSTERED ([CountryRegionCode] ASC,[CurrencyCode] ASC)
go

ALTER TABLE [CreditCard]
	ADD CONSTRAINT [PK_CreditCard_CreditCardID] PRIMARY KEY  CLUSTERED ([CreditCardID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CreditCard_CardNumber] ON [CreditCard]
( 
	[CardNumber]          ASC
)
go

ALTER TABLE [Currency]
	ADD CONSTRAINT [PK_Currency_CurrencyCode] PRIMARY KEY  CLUSTERED ([CurrencyCode] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Currency_Name] ON [Currency]
( 
	[Name]                ASC
)
go

ALTER TABLE [CurrencyRate]
	ADD CONSTRAINT [PK_CurrencyRate_CurrencyRateID] PRIMARY KEY  CLUSTERED ([CurrencyRateID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode] ON [CurrencyRate]
( 
	[CurrencyRateDate]    ASC,
	[FromCurrencyCode]    ASC,
	[ToCurrencyCode]      ASC
)
go

ALTER TABLE [Currencyx]
	ADD CONSTRAINT [PK_Currency_CurrencyCode1] PRIMARY KEY  CLUSTERED ([CurrencyCode] ASC)
go

ALTER TABLE [Customer]
	ADD CONSTRAINT [PK_Customer_CustomerID] PRIMARY KEY  CLUSTERED ([CustomerID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Customer_rowguid] ON [Customer]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Customer_AccountNumber] ON [Customer]
( 
	[AccountNumber]       ASC
)
go

ALTER TABLE [EmailAddress]
	ADD CONSTRAINT [PK_EmailAddress_BusinessEntityID_EmailAddressID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[EmailAddressID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_EmailAddress_EmailAddress] ON [EmailAddress]
( 
	[EmailAddress]        ASC
)
go

ALTER TABLE [new_Table]
	ADD CONSTRAINT [XPKnew_Table] PRIMARY KEY  CLUSTERED ([col1] ASC)
go

ALTER TABLE [Password]
	ADD CONSTRAINT [PK_Password_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

ALTER TABLE [Person]
	ADD CONSTRAINT [PK_Person_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Person_rowguid] ON [Person]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_Person_LastName_FirstName_MiddleName] ON [Person]
( 
	[LastName]            ASC,
	[FirstName]           ASC,
	[MiddleName]          ASC
)
go

ALTER TABLE [PersonCreditCard]
	ADD CONSTRAINT [PK_PersonCreditCard_BusinessEntityID_CreditCardID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[CreditCardID] ASC)
go

ALTER TABLE [PersonPhone]
	ADD CONSTRAINT [PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PhoneNumber] ASC,[PhoneNumberTypeID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_PersonPhone_PhoneNumber] ON [PersonPhone]
( 
	[PhoneNumber]         ASC
)
go

ALTER TABLE [PhoneNumberType]
	ADD CONSTRAINT [PK_PhoneNumberType_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([PhoneNumberTypeID] ASC)
go

ALTER TABLE [SalesOrderDetail]
	ADD CONSTRAINT [PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC,[SalesOrderDetailID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderDetail_rowguid] ON [SalesOrderDetail]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_SalesOrderDetail_ProductID] ON [SalesOrderDetail]
( 
	[ProductID]           ASC
)
go

ALTER TABLE [SalesOrderHeader]
	ADD CONSTRAINT [PK_SalesOrderHeader_SalesOrderID] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderHeader_rowguid] ON [SalesOrderHeader]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesOrderHeader_SalesOrderNumber] ON [SalesOrderHeader]
( 
	[SalesOrderNumber]    ASC
)
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	ADD CONSTRAINT [PK_SalesOrderHeaderSalesReason_SalesOrderID_SalesReasonID] PRIMARY KEY  CLUSTERED ([SalesOrderID] ASC,[SalesReasonID] ASC)
go

ALTER TABLE [SalesPerson]
	ADD CONSTRAINT [PK_SalesPerson_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesPerson_rowguid] ON [SalesPerson]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesPersonQuotaHistory]
	ADD CONSTRAINT [PK_SalesPersonQuotaHistory_BusinessEntityID_QuotaDate] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[QuotaDate] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesPersonQuotaHistory_rowguid] ON [SalesPersonQuotaHistory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesReason]
	ADD CONSTRAINT [PK_SalesReason_SalesReasonID] PRIMARY KEY  CLUSTERED ([SalesReasonID] ASC)
go

ALTER TABLE [SalesTaxRate]
	ADD CONSTRAINT [PK_SalesTaxRate_SalesTaxRateID] PRIMARY KEY  CLUSTERED ([SalesTaxRateID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTaxRate_StateProvinceID_TaxType] ON [SalesTaxRate]
( 
	[StateProvinceID]     ASC,
	[TaxType]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTaxRate_rowguid] ON [SalesTaxRate]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesTerritory]
	ADD CONSTRAINT [PK_SalesTerritory_TerritoryID] PRIMARY KEY  CLUSTERED ([TerritoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritory_Name] ON [SalesTerritory]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritory_rowguid] ON [SalesTerritory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SalesTerritoryHistory]
	ADD CONSTRAINT [PK_SalesTerritoryHistory_BusinessEntityID_StartDate_TerritoryID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[StartDate] ASC,[TerritoryID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SalesTerritoryHistory_rowguid] ON [SalesTerritoryHistory]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [ShoppingCartItem]
	ADD CONSTRAINT [PK_ShoppingCartItem_ShoppingCartItemID] PRIMARY KEY  CLUSTERED ([ShoppingCartItemID] ASC)
go

CREATE NONCLUSTERED INDEX [IX_ShoppingCartItem_ShoppingCartID_ProductID] ON [ShoppingCartItem]
( 
	[ShoppingCartID]      ASC,
	[ProductID]           ASC
)
go

ALTER TABLE [SpecialOffer]
	ADD CONSTRAINT [PK_SpecialOffer_SpecialOfferID] PRIMARY KEY  CLUSTERED ([SpecialOfferID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SpecialOffer_rowguid] ON [SpecialOffer]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [SpecialOfferProduct]
	ADD CONSTRAINT [PK_SpecialOfferProduct_SpecialOfferID_ProductID] PRIMARY KEY  CLUSTERED ([SpecialOfferID] ASC,[ProductID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_SpecialOfferProduct_rowguid] ON [SpecialOfferProduct]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IX_SpecialOfferProduct_ProductID] ON [SpecialOfferProduct]
( 
	[ProductID]           ASC
)
go

ALTER TABLE [StateProvince]
	ADD CONSTRAINT [PK_StateProvince_StateProvinceID] PRIMARY KEY  CLUSTERED ([StateProvinceID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_Name] ON [StateProvince]
( 
	[Name]                ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_StateProvinceCode_CountryRegionCode] ON [StateProvince]
( 
	[StateProvinceCode]   ASC,
	[CountryRegionCode]   ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_StateProvince_rowguid] ON [StateProvince]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [Store]
	ADD CONSTRAINT [PK_Store_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AK_Store_rowguid] ON [Store]
( 
	[rowguid]             ASC
)
go

CREATE VIEW [Person].[vAdditionalContactInfo] AS  SELECT [BusinessEntityID], [FirstName], [MiddleName], [LastName],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber)[1]/act:number' , 'nvarchar(50)' )  AS [TelephoneNumber],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [TelephoneSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes";
        (act:homePostalAddress/act:Street)[1]' , 'nvarchar(50)' )  AS [Street],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:City)[1]' , 'nvarchar(50)' )  AS [City],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:StateProvince)[1]' , 'nvarchar(50)' )  AS [StateProvince],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:PostalCode)[1]' , 'nvarchar(50)' )  AS [PostalCode],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:CountryRegion)[1]' , 'nvarchar(50)' )  AS [CountryRegion],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' )  AS [HomeAddressSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:eMailAddress)[1]' , 'nvarchar(128)' )  AS [EMailAddress],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [EMailSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/act:telephoneNumber/act:number)[1]' , 'nvarchar(50)' )  AS [EMailTelephoneNumber], [rowguid], [ModifiedDate] FROM Person.Person   OUTER APPLY   AdditionalContactInfo.nodes( 'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
    /ci:AdditionalContactInfo' ) AS ContactInfo 
(ref)
 WHERE [AdditionalContactInfo] IS NOT NULL
go

CREATE VIEW [Sales].[vIndividualCustomer] AS  SELECT p.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.Name AS StateProvinceName, a.[PostalCode], cr.Name AS CountryRegionName, p.[Demographics] FROM Person.Person AS p   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = p.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]   INNER JOIN   Sales.Customer AS c ON c.[PersonID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID] WHERE c.StoreID IS NULL
go

CREATE VIEW [Sales].[vPersonDemographics] AS  SELECT p.[BusinessEntityID],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalPurchaseYTD[1]' , 'money' )  AS [TotalPurchaseYTD],  CONVERT(datetime,  REPLACE(  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        DateFirstPurchase[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [DateFirstPurchase],  CONVERT(datetime,  REPLACE(  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        BirthDate[1]' , 'nvarchar(20)' )  , 'Z' , '' ) , 101) AS [BirthDate],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        MaritalStatus[1]' , 'nvarchar(1)' )  AS [MaritalStatus],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        YearlyIncome[1]' , 'nvarchar(30)' )  AS [YearlyIncome],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Gender[1]' , 'nvarchar(1)' )  AS [Gender],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        TotalChildren[1]' , 'integer' )  AS [TotalChildren],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberChildrenAtHome[1]' , 'integer' )  AS [NumberChildrenAtHome],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Education[1]' , 'nvarchar(30)' )  AS [Education],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        Occupation[1]' , 'nvarchar(30)' )  AS [Occupation],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        HomeOwnerFlag[1]' , 'bit' )  AS [HomeOwnerFlag],  [IndividualSurvey].[ref].[value]( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
        NumberCarsOwned[1]' , 'integer' )  AS [NumberCarsOwned] FROM Person.Person AS p   CROSS APPLY   p.Demographics.nodes( N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
    /IndividualSurvey' ) AS [IndividualSurvey] 
(ref)
 WHERE [Demographics] IS NOT NULL
go

CREATE VIEW [Sales].[vSalesPerson] AS  SELECT s.[BusinessEntityID], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], e.[JobTitle], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion], a.[AddressLine1], a.[AddressLine2], a.[City], sp.Name AS StateProvinceName, a.[PostalCode], cr.Name AS CountryRegionName, st.Name AS TerritoryName, st.Group AS TerritoryGroup, s.[SalesQuota], s.[SalesYTD], s.[SalesLastYear] FROM Sales.SalesPerson AS s   INNER JOIN   HumanResources.Employee AS e ON e.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   LEFT OUTER JOIN   Sales.SalesTerritory AS st ON st.[TerritoryID] = s.[TerritoryID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Person].[vStateProvinceCountryRegion] WITH SCHEMABINDING  AS  SELECT sp.[StateProvinceID], sp.[StateProvinceCode], sp.[IsOnlyStateProvinceFlag], sp.[Name] AS [StateProvinceName], sp.[TerritoryID], cr.[CountryRegionCode], cr.[Name] AS [CountryRegionName] FROM Person.StateProvince AS sp   INNER JOIN   Person.CountryRegion AS cr ON sp.[CountryRegionCode] = cr.[CountryRegionCode]
go

CREATE VIEW [vStoreWithDemographics]([BusinessEntityID],[Name],[AnnualSales],[AnnualRevenue],[BankName],[BusinessType],[YearOpened],[Specialty],[SquareFeet],[Brands],[Internet],[NumberEmployees])
AS
SELECT s.[BusinessEntityID],s.[Name], s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualSales)[1]' , 'money' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/AnnualRevenue)[1]' , 'money' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BankName)[1]' , 'nvarchar(50)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/BusinessType)[1]' , 'nvarchar(5)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/YearOpened)[1]' , 'integer' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Specialty)[1]' , 'nvarchar(50)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/SquareFeet)[1]' , 'integer' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Brands)[1]' , 'nvarchar(30)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/Internet)[1]' , 'nvarchar(30)' ) , s.[Demographics].value( 'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/StoreSurvey"; 
        (/StoreSurvey/NumberEmployees)[1]' , 'integer' ) 
	FROM [Store] s
go

CREATE VIEW [Sales].[vStoreWithContacts] AS  SELECT s.[BusinessEntityID], s.[Name], ct.[Name] AS [ContactType], p.[Title], p.[FirstName], p.[MiddleName], p.[LastName], p.[Suffix], pp.[PhoneNumber], pnt.[Name] AS [PhoneNumberType], ea.[EmailAddress], p.[EmailPromotion] FROM Sales.Store AS s   INNER JOIN   Person.BusinessEntityContact AS bec ON bec.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.ContactType AS ct ON ct.[ContactTypeID] = bec.[ContactTypeID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = bec.[PersonID]   LEFT OUTER JOIN   Person.EmailAddress AS ea ON ea.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PersonPhone AS pp ON pp.[BusinessEntityID] = p.[BusinessEntityID]   LEFT OUTER JOIN   Person.PhoneNumberType AS pnt ON pnt.[PhoneNumberTypeID] = pp.[PhoneNumberTypeID]
go

CREATE VIEW [Sales].[vStoreWithAddresses] AS  SELECT s.[BusinessEntityID], s.[Name], at.[Name] AS [AddressType], a.[AddressLine1], a.[AddressLine2], a.[City], sp.[Name] AS [StateProvinceName], a.[PostalCode], cr.[Name] AS [CountryRegionName] FROM Sales.Store AS s   INNER JOIN   Person.BusinessEntityAddress AS bea ON bea.[BusinessEntityID] = s.[BusinessEntityID]   INNER JOIN   Person.Address AS a ON a.[AddressID] = bea.[AddressID]   INNER JOIN   Person.StateProvince AS sp ON sp.[StateProvinceID] = a.[StateProvinceID]   INNER JOIN   Person.CountryRegion AS cr ON cr.[CountryRegionCode] = sp.[CountryRegionCode]   INNER JOIN   Person.AddressType AS at ON at.[AddressTypeID] = bea.[AddressTypeID]
go

CREATE VIEW [Sales].[vSalesPersonSalesByFiscalYears] AS  SELECT pvt.[SalesPersonID], pvt.[FullName], pvt.[JobTitle], pvt.[SalesTerritory], pvt.[2002], pvt.[2003], pvt.[2004] FROM (  SELECT soh.[SalesPersonID], p.[FirstName] + ' ' +  Coalesce(p.[MiddleName] , '')  + ' ' + p.[LastName] AS [FullName], e.[JobTitle], st.[Name] AS [SalesTerritory], soh.[SubTotal],  Year( DateAdd(m, 6, soh.[OrderDate])) AS [FiscalYear] FROM Sales.SalesPerson AS sp   INNER JOIN   Sales.SalesOrderHeader AS soh ON sp.[BusinessEntityID] = soh.[SalesPersonID]   INNER JOIN   Sales.SalesTerritory AS st ON sp.[TerritoryID] = st.[TerritoryID]   INNER JOIN   HumanResources.Employee AS e ON soh.[SalesPersonID] = e.[BusinessEntityID]   INNER JOIN   Person.Person AS p ON p.[BusinessEntityID] = sp.[BusinessEntityID] ) AS soh  PIVOT ( SUM( [SubTotal]) FOR FiscalYear IN 
([2002], 
	[2003], 
	[2004])
 )   pvt
go


ALTER TABLE [Address] WITH CHECK 
	ADD CONSTRAINT [FK_Address_StateProvince_StateProvinceID] FOREIGN KEY ([StateProvinceID]) REFERENCES [StateProvince]([StateProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Address]
	  WITH CHECK CHECK CONSTRAINT [FK_Address_StateProvince_StateProvinceID]
go


ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID] FOREIGN KEY ([AddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_Address_AddressID]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID] FOREIGN KEY ([AddressTypeID]) REFERENCES [AddressType]([AddressTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_AddressType_AddressTypeID]
go

ALTER TABLE [BusinessEntityAddress] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_Person_PersonID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID] FOREIGN KEY ([ContactTypeID]) REFERENCES [ContactType]([ContactTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_ContactType_ContactTypeID]
go

ALTER TABLE [BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FK_BusinessEntityContact_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [CountryRegionCurrency] WITH CHECK 
	ADD CONSTRAINT [FK_CountryRegionCurrency_CountryRegion_CountryRegionCode] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CountryRegionCurrency]
	  WITH CHECK CHECK CONSTRAINT [FK_CountryRegionCurrency_CountryRegion_CountryRegionCode]
go

ALTER TABLE [CountryRegionCurrency] WITH CHECK 
	ADD CONSTRAINT [FK_CountryRegionCurrency_Currency_CurrencyCode] FOREIGN KEY ([CurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CountryRegionCurrency]
	  WITH CHECK CHECK CONSTRAINT [FK_CountryRegionCurrency_Currency_CurrencyCode]
go


ALTER TABLE [CurrencyRate] WITH CHECK 
	ADD CONSTRAINT [FK_CurrencyRate_Currency_FromCurrencyCode] FOREIGN KEY ([FromCurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CurrencyRate]
	  WITH CHECK CHECK CONSTRAINT [FK_CurrencyRate_Currency_FromCurrencyCode]
go

ALTER TABLE [CurrencyRate] WITH CHECK 
	ADD CONSTRAINT [FK_CurrencyRate_Currency_ToCurrencyCode] FOREIGN KEY ([ToCurrencyCode]) REFERENCES [Currency]([CurrencyCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [CurrencyRate]
	  WITH CHECK CHECK CONSTRAINT [FK_CurrencyRate_Currency_ToCurrencyCode]
go


ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Customer_Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Customer_Person_PersonID]
go

ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Customer_Store_StoreID] FOREIGN KEY ([StoreID]) REFERENCES [Store]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Customer_Store_StoreID]
go

ALTER TABLE [Customer] WITH CHECK 
	ADD CONSTRAINT [FK_Customer_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Customer]
	  WITH CHECK CHECK CONSTRAINT [FK_Customer_SalesTerritory_TerritoryID]
go


ALTER TABLE [EmailAddress] WITH CHECK 
	ADD CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [EmailAddress]
	  WITH CHECK CHECK CONSTRAINT [FK_EmailAddress_Person_BusinessEntityID]
go


ALTER TABLE [Password] WITH CHECK 
	ADD CONSTRAINT [FK_Password_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Password]
	  WITH CHECK CHECK CONSTRAINT [FK_Password_Person_BusinessEntityID]
go


ALTER TABLE [Person] WITH CHECK 
	ADD CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Person]
	  WITH CHECK CHECK CONSTRAINT [FK_Person_BusinessEntity_BusinessEntityID]
go


ALTER TABLE [PersonCreditCard] WITH CHECK 
	ADD CONSTRAINT [FK_PersonCreditCard_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonCreditCard]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonCreditCard_Person_BusinessEntityID]
go

ALTER TABLE [PersonCreditCard] WITH CHECK 
	ADD CONSTRAINT [FK_PersonCreditCard_CreditCard_CreditCardID] FOREIGN KEY ([CreditCardID]) REFERENCES [CreditCard]([CreditCardID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonCreditCard]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonCreditCard_CreditCard_CreditCardID]
go


ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_Person_BusinessEntityID]
go

ALTER TABLE [PersonPhone] WITH CHECK 
	ADD CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID] FOREIGN KEY ([PhoneNumberTypeID]) REFERENCES [PhoneNumberType]([PhoneNumberTypeID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [PersonPhone]
	  WITH CHECK CHECK CONSTRAINT [FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID]
go


ALTER TABLE [SalesOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID] FOREIGN KEY ([SalesOrderID]) REFERENCES [SalesOrderHeader]([SalesOrderID])
		ON DELETE CASCADE
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID]
go

ALTER TABLE [SalesOrderDetail] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID] FOREIGN KEY ([SpecialOfferID],[ProductID]) REFERENCES [SpecialOfferProduct]([SpecialOfferID],[ProductID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderDetail]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID]
go


ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesOrderHeader_DueDate]
		CHECK  ( [DueDate]>=[OrderDate] ) 
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesOrderHeader_ShipDate]
		CHECK  ( [ShipDate]>=[OrderDate] OR [ShipDate] IS NULL ) 
go


ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_Address_BillToAddressID] FOREIGN KEY ([BillToAddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_Address_BillToAddressID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_Address_ShipToAddressID] FOREIGN KEY ([ShipToAddressID]) REFERENCES [Address]([AddressID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_Address_ShipToAddressID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_CreditCard_CreditCardID] FOREIGN KEY ([CreditCardID]) REFERENCES [CreditCard]([CreditCardID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_CreditCard_CreditCardID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_CurrencyRate_CurrencyRateID] FOREIGN KEY ([CurrencyRateID]) REFERENCES [CurrencyRate]([CurrencyRateID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_CurrencyRate_CurrencyRateID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_Customer_CustomerID] FOREIGN KEY ([CustomerID]) REFERENCES [Customer]([CustomerID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_Customer_CustomerID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_SalesPerson_SalesPersonID] FOREIGN KEY ([SalesPersonID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_SalesPerson_SalesPersonID]
go

ALTER TABLE [SalesOrderHeader] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeader_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeader]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeader_SalesTerritory_TerritoryID]
go


ALTER TABLE [SalesOrderHeaderSalesReason] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID] FOREIGN KEY ([SalesReasonID]) REFERENCES [SalesReason]([SalesReasonID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID]
go

ALTER TABLE [SalesOrderHeaderSalesReason] WITH CHECK 
	ADD CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID] FOREIGN KEY ([SalesOrderID]) REFERENCES [SalesOrderHeader]([SalesOrderID])
		ON DELETE CASCADE
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesOrderHeaderSalesReason]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID]
go


ALTER TABLE [SalesPerson] WITH CHECK 
	ADD CONSTRAINT [FK_SalesPerson_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPerson]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesPerson_SalesTerritory_TerritoryID]
go


ALTER TABLE [SalesPersonQuotaHistory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesPersonQuotaHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID]
go


ALTER TABLE [SalesTaxRate] WITH CHECK 
	ADD CONSTRAINT [FK_SalesTaxRate_StateProvince_StateProvinceID] FOREIGN KEY ([StateProvinceID]) REFERENCES [StateProvince]([StateProvinceID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTaxRate]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesTaxRate_StateProvince_StateProvinceID]
go


ALTER TABLE [SalesTerritory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesTerritory_CountryRegion_CountryRegionCode] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesTerritory_CountryRegion_CountryRegionCode]
go


ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT  [CK_SalesTerritoryHistory_EndDate]
		CHECK  ( [EndDate]>=[StartDate] OR [EndDate] IS NULL ) 
go


ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritoryHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID]
go

ALTER TABLE [SalesTerritoryHistory] WITH CHECK 
	ADD CONSTRAINT [FK_SalesTerritoryHistory_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SalesTerritoryHistory]
	  WITH CHECK CHECK CONSTRAINT [FK_SalesTerritoryHistory_SalesTerritory_TerritoryID]
go


ALTER TABLE [SpecialOffer] WITH CHECK 
	ADD CONSTRAINT  [CK_SpecialOffer_EndDate]
		CHECK  ( [EndDate]>=[StartDate] ) 
go


ALTER TABLE [SpecialOfferProduct] WITH CHECK 
	ADD CONSTRAINT [FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID] FOREIGN KEY ([SpecialOfferID]) REFERENCES [SpecialOffer]([SpecialOfferID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [SpecialOfferProduct]
	  WITH CHECK CHECK CONSTRAINT [FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID]
go


ALTER TABLE [StateProvince] WITH CHECK 
	ADD CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode] FOREIGN KEY ([CountryRegionCode]) REFERENCES [CountryRegion]([CountryRegionCode])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StateProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_StateProvince_CountryRegion_CountryRegionCode]
go

ALTER TABLE [StateProvince] WITH CHECK 
	ADD CONSTRAINT [FK_StateProvince_SalesTerritory_TerritoryID] FOREIGN KEY ([TerritoryID]) REFERENCES [SalesTerritory]([TerritoryID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [StateProvince]
	  WITH CHECK CHECK CONSTRAINT [FK_StateProvince_SalesTerritory_TerritoryID]
go


ALTER TABLE [Store] WITH CHECK 
	ADD CONSTRAINT [FK_Store_BusinessEntity_BusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Store]
	  WITH CHECK CHECK CONSTRAINT [FK_Store_BusinessEntity_BusinessEntityID]
go

ALTER TABLE [Store] WITH CHECK 
	ADD CONSTRAINT [FK_Store_SalesPerson_SalesPersonID] FOREIGN KEY ([SalesPersonID]) REFERENCES [SalesPerson]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [Store]
	  WITH CHECK CHECK CONSTRAINT [FK_Store_SalesPerson_SalesPersonID]
go

CREATE TRIGGER [iuPerson] ON Person
   WITH 
 EXECUTE AS CALLER  AFTER INSERT,UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

 
go


ENABLE TRIGGER [iuPerson] ON Person
go

CREATE TRIGGER [iduSalesOrderDetail] ON SalesOrderDetail
   WITH 
 EXECUTE AS CALLER  AFTER DELETE,INSERT,UPDATE 
  
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- If inserting or updating these columns
        IF UPDATE([ProductID]) OR UPDATE([OrderQty]) OR UPDATE([UnitPrice]) OR UPDATE([UnitPriceDiscount]) 
        -- Insert record into TransactionHistory
        BEGIN
            INSERT INTO [Production].[TransactionHistory]
                ([ProductID]
                ,[ReferenceOrderID]
                ,[ReferenceOrderLineID]
                ,[TransactionType]
                ,[TransactionDate]
                ,[Quantity]
                ,[ActualCost])
            SELECT 
                inserted.[ProductID]
                ,inserted.[SalesOrderID]
                ,inserted.[SalesOrderDetailID]
                ,'S'
                ,GETDATE()
                ,inserted.[OrderQty]
                ,inserted.[UnitPrice]
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] 
                ON inserted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID];

            UPDATE [Person].[Person] 
            SET [Demographics].modify('declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
                with data(/IndividualSurvey/TotalPurchaseYTD)[1] + sql:column ("inserted.LineTotal")') 
            FROM inserted 
                INNER JOIN [Sales].[SalesOrderHeader] AS SOH
                ON inserted.[SalesOrderID] = SOH.[SalesOrderID] 
                INNER JOIN [Sales].[Customer] AS C
                ON SOH.[CustomerID] = C.[CustomerID]
            WHERE C.[PersonID] = [Person].[Person].[BusinessEntityID];
        END;

        -- Update SubTotal in SalesOrderHeader record. Note that this causes the 
        -- SalesOrderHeader trigger to fire which will update the RevisionNumber.
        UPDATE [Sales].[SalesOrderHeader]
        SET [Sales].[SalesOrderHeader].[SubTotal] = 
            (SELECT SUM([Sales].[SalesOrderDetail].[LineTotal])
                FROM [Sales].[SalesOrderDetail]
                WHERE [Sales].[SalesOrderHeader].[SalesOrderID] = [Sales].[SalesOrderDetail].[SalesOrderID])
        WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN (SELECT inserted.[SalesOrderID] FROM inserted);

        UPDATE [Person].[Person] 
        SET [Demographics].modify('declare default element namespace 
            "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            replace value of (/IndividualSurvey/TotalPurchaseYTD)[1] 
            with data(/IndividualSurvey/TotalPurchaseYTD)[1] - sql:column("deleted.LineTotal")') 
        FROM deleted 
            INNER JOIN [Sales].[SalesOrderHeader] 
            ON deleted.[SalesOrderID] = [Sales].[SalesOrderHeader].[SalesOrderID] 
            INNER JOIN [Sales].[Customer]
            ON [Sales].[Customer].[CustomerID] = [Sales].[SalesOrderHeader].[CustomerID]
        WHERE [Sales].[Customer].[PersonID] = [Person].[Person].[BusinessEntityID];
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [iduSalesOrderDetail] ON SalesOrderDetail
go

CREATE TRIGGER [uSalesOrderHeader] ON SalesOrderHeader
   WITH 
 EXECUTE AS CALLER  AFTER UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    BEGIN TRY
        -- Update RevisionNumber for modification of any field EXCEPT the Status.
        IF NOT UPDATE([Status])
        BEGIN
            UPDATE [Sales].[SalesOrderHeader]
            SET [Sales].[SalesOrderHeader].[RevisionNumber] = 
                [Sales].[SalesOrderHeader].[RevisionNumber] + 1
            WHERE [Sales].[SalesOrderHeader].[SalesOrderID] IN 
                (SELECT inserted.[SalesOrderID] FROM inserted);
        END;

        -- Update the SalesPerson SalesYTD when SubTotal is updated
        IF UPDATE([SubTotal])
        BEGIN
            DECLARE @StartDate datetime,
                    @EndDate datetime

            SET @StartDate = [dbo].[ufnGetAccountingStartDate]();
            SET @EndDate = [dbo].[ufnGetAccountingEndDate]();

            UPDATE [Sales].[SalesPerson]
            SET [Sales].[SalesPerson].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesPerson].[BusinessEntityID] = [Sales].[SalesOrderHeader].[SalesPersonID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesPerson].[BusinessEntityID] 
                IN (SELECT DISTINCT inserted.[SalesPersonID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);

            -- Update the SalesTerritory SalesYTD when SubTotal is updated
            UPDATE [Sales].[SalesTerritory]
            SET [Sales].[SalesTerritory].[SalesYTD] = 
                (SELECT SUM([Sales].[SalesOrderHeader].[SubTotal])
                FROM [Sales].[SalesOrderHeader] 
                WHERE [Sales].[SalesTerritory].[TerritoryID] = [Sales].[SalesOrderHeader].[TerritoryID]
                    AND ([Sales].[SalesOrderHeader].[Status] = 5) -- Shipped
                    AND [Sales].[SalesOrderHeader].[OrderDate] BETWEEN @StartDate AND @EndDate)
            WHERE [Sales].[SalesTerritory].[TerritoryID] 
                IN (SELECT DISTINCT inserted.[TerritoryID] FROM inserted 
                    WHERE inserted.[OrderDate] BETWEEN @StartDate AND @EndDate);
        END;
    END TRY
    BEGIN CATCH
        EXECUTE [dbo].[uspPrintError];

        -- Rollback any active or uncommittable transactions before
        -- inserting information in the ErrorLog
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK TRANSACTION;
        END

        EXECUTE [dbo].[uspLogError];
    END CATCH;
END;

 
go


ENABLE TRIGGER [uSalesOrderHeader] ON SalesOrderHeader
go


CREATE TRIGGER tD_Address ON Address FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Address */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Address  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004d7c4", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Address_ShipToAddressID", FK_COLUMNS="ShipToAddressID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.ShipToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Address because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Address_BillToAddressID", FK_COLUMNS="BillToAddressID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.BillToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Address because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Address because BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* StateProvince  Address on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (SELECT * FROM deleted,StateProvince
      WHERE
        /* %JoinFKPK(deleted,StateProvince," = "," AND") */
        deleted.StateProvinceID = StateProvince.StateProvinceID AND
        NOT EXISTS (
          SELECT * FROM Address
          WHERE
            /* %JoinFKPK(Address,StateProvince," = "," AND") */
            Address.StateProvinceID = StateProvince.StateProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Address because StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Address ON Address FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Address */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Address  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00054b65", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Address_ShipToAddressID", FK_COLUMNS="ShipToAddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.ShipToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Address because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Address  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Address_BillToAddressID", FK_COLUMNS="BillToAddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.BillToAddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Address because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Address  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressID = deleted.AddressID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Address because BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* StateProvince  Address on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,StateProvince
        WHERE
          /* %JoinFKPK(inserted,StateProvince) */
          inserted.StateProvinceID = StateProvince.StateProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Address because StateProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_AddressType ON AddressType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on AddressType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00014e9a", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete AddressType because BusinessEntityAddress exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_AddressType ON AddressType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on AddressType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00016f4c", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.AddressTypeID = deleted.AddressTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update AddressType because BusinessEntityAddress exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntity ON BusinessEntity FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntity */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004a049", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because BusinessEntityAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Store on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Store
      WHERE
        /*  %JoinFKPK(Store,deleted," = "," AND") */
        Store.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete BusinessEntity because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntity ON BusinessEntity FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntity */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00051d0f", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityAddress
      WHERE
        /*  %JoinFKPK(BusinessEntityAddress,deleted," = "," AND") */
        BusinessEntityAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because BusinessEntityAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Store on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Store
      WHERE
        /*  %JoinFKPK(Store,deleted," = "," AND") */
        Store.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because Store exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Person
      WHERE
        /*  %JoinFKPK(Person,deleted," = "," AND") */
        Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update BusinessEntity because Person exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityAddress ON BusinessEntityAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047170", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,BusinessEntity," = "," AND") */
            BusinessEntityAddress.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* AddressType  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
    IF EXISTS (SELECT * FROM deleted,AddressType
      WHERE
        /* %JoinFKPK(deleted,AddressType," = "," AND") */
        deleted.AddressTypeID = AddressType.AddressTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,AddressType," = "," AND") */
            BusinessEntityAddress.AddressTypeID = AddressType.AddressTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because AddressType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  BusinessEntityAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
    IF EXISTS (SELECT * FROM deleted,Address
      WHERE
        /* %JoinFKPK(deleted,Address," = "," AND") */
        deleted.AddressID = Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityAddress
          WHERE
            /* %JoinFKPK(BusinessEntityAddress,Address," = "," AND") */
            BusinessEntityAddress.AddressID = Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityAddress because Address exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityAddress ON BusinessEntityAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insAddressID int, 
           @insAddressTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00048c81", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* AddressType  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="AddressType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_AddressType_AddressTypeID", FK_COLUMNS="AddressTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,AddressType
        WHERE
          /* %JoinFKPK(inserted,AddressType) */
          inserted.AddressTypeID = AddressType.AddressTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because AddressType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Address  BusinessEntityAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityAddress_Address_AddressID", FK_COLUMNS="AddressID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddressID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Address
        WHERE
          /* %JoinFKPK(inserted,Address) */
          inserted.AddressID = Address.AddressID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityAddress because Address does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_BusinessEntityContact ON BusinessEntityContact FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* BusinessEntity  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000488e0", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,BusinessEntity," = "," AND") */
            BusinessEntityContact.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* ContactType  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (SELECT * FROM deleted,ContactType
      WHERE
        /* %JoinFKPK(deleted,ContactType," = "," AND") */
        deleted.ContactTypeID = ContactType.ContactTypeID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,ContactType," = "," AND") */
            BusinessEntityContact.ContactTypeID = ContactType.ContactTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because ContactType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.PersonID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM BusinessEntityContact
          WHERE
            /* %JoinFKPK(BusinessEntityContact,Person," = "," AND") */
            BusinessEntityContact.PersonID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last BusinessEntityContact because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_BusinessEntityContact ON BusinessEntityContact FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on BusinessEntityContact */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPersonID int, 
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* BusinessEntity  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004a3b9", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* ContactType  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,ContactType
        WHERE
          /* %JoinFKPK(inserted,ContactType) */
          inserted.ContactTypeID = ContactType.ContactTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because ContactType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.PersonID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update BusinessEntityContact because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_ContactType ON ContactType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on ContactType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* ContactType  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015148", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete ContactType because BusinessEntityContact exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_ContactType ON ContactType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on ContactType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContactTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* ContactType  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017223", PARENT_OWNER="", PARENT_TABLE="ContactType"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_ContactType_ContactTypeID", FK_COLUMNS="ContactTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContactTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.ContactTypeID = deleted.ContactTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update ContactType because BusinessEntityContact exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CountryRegion ON CountryRegion FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegion */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CountryRegion  CountryRegionCurrency on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a254", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(CountryRegionCurrency,deleted," = "," AND") */
        CountryRegionCurrency.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CountryRegion because CountryRegionCurrency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  StateProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CountryRegion because StateProvince exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  SalesTerritory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritory_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritory
      WHERE
        /*  %JoinFKPK(SalesTerritory,deleted," = "," AND") */
        SalesTerritory.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CountryRegion because SalesTerritory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CountryRegion ON CountryRegion FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegion */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CountryRegion  CountryRegionCurrency on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003f915", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(CountryRegionCurrency,deleted," = "," AND") */
        CountryRegionCurrency.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CountryRegion because CountryRegionCurrency exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  StateProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CountryRegion because StateProvince exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  SalesTerritory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritory_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritory
      WHERE
        /*  %JoinFKPK(SalesTerritory,deleted," = "," AND") */
        SalesTerritory.CountryRegionCode = deleted.CountryRegionCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CountryRegion because SalesTerritory exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CountryRegionCurrency ON CountryRegionCurrency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CountryRegionCurrency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Currency  CountryRegionCurrency on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00031eba", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Currency
      WHERE
        /* %JoinFKPK(deleted,Currency," = "," AND") */
        deleted.CurrencyCode = Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM CountryRegionCurrency
          WHERE
            /* %JoinFKPK(CountryRegionCurrency,Currency," = "," AND") */
            CountryRegionCurrency.CurrencyCode = Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CountryRegionCurrency because Currency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  CountryRegionCurrency on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,CountryRegion
      WHERE
        /* %JoinFKPK(deleted,CountryRegion," = "," AND") */
        deleted.CountryRegionCode = CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM CountryRegionCurrency
          WHERE
            /* %JoinFKPK(CountryRegionCurrency,CountryRegion," = "," AND") */
            CountryRegionCurrency.CountryRegionCode = CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CountryRegionCurrency because CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CountryRegionCurrency ON CountryRegionCurrency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CountryRegionCurrency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRegionCode nvarchar(3), 
           @insCurrencyCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Currency  CountryRegionCurrency on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00031ffb", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Currency
        WHERE
          /* %JoinFKPK(inserted,Currency) */
          inserted.CurrencyCode = Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CountryRegionCurrency because Currency does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  CountryRegionCurrency on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CountryRegion
        WHERE
          /* %JoinFKPK(inserted,CountryRegion) */
          inserted.CountryRegionCode = CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CountryRegionCurrency because CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CreditCard ON CreditCard FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CreditCard */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CreditCard  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000247c3", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CreditCard because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CreditCard  PersonCreditCard on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonCreditCard
      WHERE
        /*  %JoinFKPK(PersonCreditCard,deleted," = "," AND") */
        PersonCreditCard.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CreditCard because PersonCreditCard exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CreditCard ON CreditCard FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CreditCard */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCreditCardID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CreditCard  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000289a2", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CreditCard because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CreditCard  PersonCreditCard on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonCreditCard
      WHERE
        /*  %JoinFKPK(PersonCreditCard,deleted," = "," AND") */
        PersonCreditCard.CreditCardID = deleted.CreditCardID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CreditCard because PersonCreditCard exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Currency ON Currency FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Currency */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000374bf", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.ToCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Currency because CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.FromCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Currency because CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CountryRegionCurrency on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
    IF EXISTS (
      SELECT * FROM deleted,CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(CountryRegionCurrency,deleted," = "," AND") */
        CountryRegionCurrency.CurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Currency because CountryRegionCurrency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Currency ON Currency FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Currency */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyCode nchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0003c3ee", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.ToCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Currency because CurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CurrencyRate
      WHERE
        /*  %JoinFKPK(CurrencyRate,deleted," = "," AND") */
        CurrencyRate.FromCurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Currency because CurrencyRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CountryRegionCurrency on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CountryRegionCurrency"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CountryRegionCurrency_Currency_CurrencyCode", FK_COLUMNS="CurrencyCode" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyCode)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,CountryRegionCurrency
      WHERE
        /*  %JoinFKPK(CountryRegionCurrency,deleted," = "," AND") */
        CountryRegionCurrency.CurrencyCode = deleted.CurrencyCode
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Currency because CountryRegionCurrency exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_CurrencyRate ON CurrencyRate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on CurrencyRate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CurrencyRate  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003e232", PARENT_OWNER="", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", FK_COLUMNS="CurrencyRateID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CurrencyRateID = deleted.CurrencyRateID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete CurrencyRate because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Currency
      WHERE
        /* %JoinFKPK(deleted,Currency," = "," AND") */
        deleted.ToCurrencyCode = Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM CurrencyRate
          WHERE
            /* %JoinFKPK(CurrencyRate,Currency," = "," AND") */
            CurrencyRate.ToCurrencyCode = Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CurrencyRate because Currency exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Currency  CurrencyRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
    IF EXISTS (SELECT * FROM deleted,Currency
      WHERE
        /* %JoinFKPK(deleted,Currency," = "," AND") */
        deleted.FromCurrencyCode = Currency.CurrencyCode AND
        NOT EXISTS (
          SELECT * FROM CurrencyRate
          WHERE
            /* %JoinFKPK(CurrencyRate,Currency," = "," AND") */
            CurrencyRate.FromCurrencyCode = Currency.CurrencyCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last CurrencyRate because Currency exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_CurrencyRate ON CurrencyRate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on CurrencyRate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCurrencyRateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CurrencyRate  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00043919", PARENT_OWNER="", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", FK_COLUMNS="CurrencyRateID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CurrencyRateID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CurrencyRateID = deleted.CurrencyRateID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update CurrencyRate because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_ToCurrencyCode", FK_COLUMNS="ToCurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ToCurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Currency
        WHERE
          /* %JoinFKPK(inserted,Currency) */
          inserted.ToCurrencyCode = Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CurrencyRate because Currency does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Currency  CurrencyRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Currency"
    CHILD_OWNER="", CHILD_TABLE="CurrencyRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_CurrencyRate_Currency_FromCurrencyCode", FK_COLUMNS="FromCurrencyCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(FromCurrencyCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Currency
        WHERE
          /* %JoinFKPK(inserted,Currency) */
          inserted.FromCurrencyCode = Currency.CurrencyCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update CurrencyRate because Currency does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Customer ON Customer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Customer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Customer  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004dc9e", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Customer_CustomerID", FK_COLUMNS="CustomerID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CustomerID = deleted.CustomerID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Customer because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM Customer
          WHERE
            /* %JoinFKPK(Customer,SalesTerritory," = "," AND") */
            Customer.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Customer because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Store  Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
    IF EXISTS (SELECT * FROM deleted,Store
      WHERE
        /* %JoinFKPK(deleted,Store," = "," AND") */
        deleted.StoreID = Store.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Customer
          WHERE
            /* %JoinFKPK(Customer,Store," = "," AND") */
            Customer.StoreID = Store.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Customer because Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  Customer on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.PersonID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Customer
          WHERE
            /* %JoinFKPK(Customer,Person," = "," AND") */
            Customer.PersonID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Customer because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Customer ON Customer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Customer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCustomerID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Customer  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0005b5dd", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Customer_CustomerID", FK_COLUMNS="CustomerID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CustomerID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.CustomerID = deleted.CustomerID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Customer because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Customer because SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Store  Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StoreID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Store
        WHERE
          /* %JoinFKPK(inserted,Store) */
          inserted.StoreID = Store.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.StoreID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Customer because Store does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  Customer on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.PersonID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.PersonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Customer because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_EmailAddress ON EmailAddress FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on EmailAddress */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  EmailAddress on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00016d02", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM EmailAddress
          WHERE
            /* %JoinFKPK(EmailAddress,Person," = "," AND") */
            EmailAddress.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last EmailAddress because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_EmailAddress ON EmailAddress FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on EmailAddress */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insEmailAddressID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  EmailAddress on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001812e", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update EmailAddress because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Password ON Password FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Password */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  Password on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001579e", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Password
          WHERE
            /* %JoinFKPK(Password,Person," = "," AND") */
            Password.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Password because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Password ON Password FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Password */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  Password on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00018acd", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Password because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Person ON Person FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Person */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Person  EmailAddress on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0007c5c0", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,EmailAddress
      WHERE
        /*  %JoinFKPK(EmailAddress,deleted," = "," AND") */
        EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because EmailAddress exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because PersonPhone exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonCreditCard on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonCreditCard
      WHERE
        /*  %JoinFKPK(PersonCreditCard,deleted," = "," AND") */
        PersonCreditCard.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because PersonCreditCard exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  Password on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,Password
      WHERE
        /*  %JoinFKPK(Password,deleted," = "," AND") */
        Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Person because Password exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Person on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Person
          WHERE
            /* %JoinFKPK(Person,BusinessEntity," = "," AND") */
            Person.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Person because BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Person ON Person FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Person */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Person  EmailAddress on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000892e3", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="EmailAddress"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_EmailAddress_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,EmailAddress
      WHERE
        /*  %JoinFKPK(EmailAddress,deleted," = "," AND") */
        EmailAddress.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because EmailAddress exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_BusinessEntityContact_Person_PersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,BusinessEntityContact
      WHERE
        /*  %JoinFKPK(BusinessEntityContact,deleted," = "," AND") */
        BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because PersonPhone exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonCreditCard on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonCreditCard
      WHERE
        /*  %JoinFKPK(PersonCreditCard,deleted," = "," AND") */
        PersonCreditCard.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because PersonCreditCard exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  Password on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Password_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Password
      WHERE
        /*  %JoinFKPK(Password,deleted," = "," AND") */
        Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Person because Password exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Person on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Person_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Person because BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PersonCreditCard ON PersonCreditCard FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonCreditCard */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* CreditCard  PersonCreditCard on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002d89b", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (SELECT * FROM deleted,CreditCard
      WHERE
        /* %JoinFKPK(deleted,CreditCard," = "," AND") */
        deleted.CreditCardID = CreditCard.CreditCardID AND
        NOT EXISTS (
          SELECT * FROM PersonCreditCard
          WHERE
            /* %JoinFKPK(PersonCreditCard,CreditCard," = "," AND") */
            PersonCreditCard.CreditCardID = CreditCard.CreditCardID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonCreditCard because CreditCard exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonCreditCard on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM PersonCreditCard
          WHERE
            /* %JoinFKPK(PersonCreditCard,Person," = "," AND") */
            PersonCreditCard.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonCreditCard because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PersonCreditCard ON PersonCreditCard FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonCreditCard */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insCreditCardID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* CreditCard  PersonCreditCard on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002fbc8", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CreditCardID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CreditCard
        WHERE
          /* %JoinFKPK(inserted,CreditCard) */
          inserted.CreditCardID = CreditCard.CreditCardID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonCreditCard because CreditCard does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonCreditCard on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonCreditCard"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonCreditCard_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonCreditCard because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PersonPhone ON PersonPhone FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PersonPhone */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhoneNumberType  PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002e659", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (SELECT * FROM deleted,PhoneNumberType
      WHERE
        /* %JoinFKPK(deleted,PhoneNumberType," = "," AND") */
        deleted.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID AND
        NOT EXISTS (
          SELECT * FROM PersonPhone
          WHERE
            /* %JoinFKPK(PersonPhone,PhoneNumberType," = "," AND") */
            PersonPhone.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhone because PhoneNumberType exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Person  PersonPhone on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,Person
      WHERE
        /* %JoinFKPK(deleted,Person," = "," AND") */
        deleted.BusinessEntityID = Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM PersonPhone
          WHERE
            /* %JoinFKPK(PersonPhone,Person," = "," AND") */
            PersonPhone.BusinessEntityID = Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last PersonPhone because Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PersonPhone ON PersonPhone FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PersonPhone */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPhoneNumber Phone, 
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhoneNumberType  PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0003116d", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,PhoneNumberType
        WHERE
          /* %JoinFKPK(inserted,PhoneNumberType) */
          inserted.PhoneNumberTypeID = PhoneNumberType.PhoneNumberTypeID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhone because PhoneNumberType does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* Person  PersonPhone on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Person"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_Person_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,Person
        WHERE
          /* %JoinFKPK(inserted,Person) */
          inserted.BusinessEntityID = Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update PersonPhone because Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_PhoneNumberType ON PhoneNumberType FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on PhoneNumberType */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* PhoneNumberType  PersonPhone on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013c75", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete PhoneNumberType because PersonPhone exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_PhoneNumberType ON PhoneNumberType FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on PhoneNumberType */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPhoneNumberTypeID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* PhoneNumberType  PersonPhone on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00015b34", PARENT_OWNER="", PARENT_TABLE="PhoneNumberType"
    CHILD_OWNER="", CHILD_TABLE="PersonPhone"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_PersonPhone_PhoneNumberType_PhoneNumberTypeID", FK_COLUMNS="PhoneNumberTypeID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PhoneNumberTypeID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,PersonPhone
      WHERE
        /*  %JoinFKPK(PersonPhone,deleted," = "," AND") */
        PersonPhone.PhoneNumberTypeID = deleted.PhoneNumberTypeID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update PhoneNumberType because PersonPhone exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesOrderDetail ON SalesOrderDetail FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderDetail */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SpecialOfferProduct  SalesOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000353c5", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
    IF EXISTS (SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /* %JoinFKPK(deleted,SpecialOfferProduct," = "," AND") */
        deleted.SpecialOfferID = SpecialOfferProduct.SpecialOfferID AND
        deleted.ProductID = SpecialOfferProduct.ProductID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderDetail
          WHERE
            /* %JoinFKPK(SalesOrderDetail,SpecialOfferProduct," = "," AND") */
            SalesOrderDetail.SpecialOfferID = SpecialOfferProduct.SpecialOfferID AND
            SalesOrderDetail.ProductID = SpecialOfferProduct.ProductID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderDetail because SpecialOfferProduct exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderDetail on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    IF EXISTS (SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /* %JoinFKPK(deleted,SalesOrderHeader," = "," AND") */
        deleted.SalesOrderID = SalesOrderHeader.SalesOrderID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderDetail
          WHERE
            /* %JoinFKPK(SalesOrderDetail,SalesOrderHeader," = "," AND") */
            SalesOrderDetail.SalesOrderID = SalesOrderHeader.SalesOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderDetail because SalesOrderHeader exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesOrderDetail ON SalesOrderDetail FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderDetail */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int, 
           @insSalesOrderDetailID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SpecialOfferProduct  SalesOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000360b4", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SpecialOfferID) OR
    UPDATE(ProductID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SpecialOfferProduct
        WHERE
          /* %JoinFKPK(inserted,SpecialOfferProduct) */
          inserted.SpecialOfferID = SpecialOfferProduct.SpecialOfferID and
          inserted.ProductID = SpecialOfferProduct.ProductID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderDetail because SpecialOfferProduct does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesOrderHeader  SalesOrderDetail on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesOrderHeader
        WHERE
          /* %JoinFKPK(inserted,SalesOrderHeader) */
          inserted.SalesOrderID = SalesOrderHeader.SalesOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderDetail because SalesOrderHeader does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesOrderHeader ON SalesOrderHeader FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderHeader */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderDetail on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="000bac52", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    DELETE SalesOrderDetail
      FROM SalesOrderDetail,deleted
      WHERE
        /*  %JoinFKPK(SalesOrderDetail,deleted," = "," AND") */
        SalesOrderDetail.SalesOrderID = deleted.SalesOrderID

    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderHeaderSalesReason on parent delete cascade */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    DELETE SalesOrderHeaderSalesReason
      FROM SalesOrderHeaderSalesReason,deleted
      WHERE
        /*  %JoinFKPK(SalesOrderHeaderSalesReason,deleted," = "," AND") */
        SalesOrderHeaderSalesReason.SalesOrderID = deleted.SalesOrderID

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,SalesTerritory," = "," AND") */
            SalesOrderHeader.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.SalesPersonID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,SalesPerson," = "," AND") */
            SalesOrderHeader.SalesPersonID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Customer  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Customer"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Customer_CustomerID", FK_COLUMNS="CustomerID" */
    IF EXISTS (SELECT * FROM deleted,Customer
      WHERE
        /* %JoinFKPK(deleted,Customer," = "," AND") */
        deleted.CustomerID = Customer.CustomerID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,Customer," = "," AND") */
            SalesOrderHeader.CustomerID = Customer.CustomerID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CurrencyRate  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CurrencyRate"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CurrencyRate_CurrencyRateID", FK_COLUMNS="CurrencyRateID" */
    IF EXISTS (SELECT * FROM deleted,CurrencyRate
      WHERE
        /* %JoinFKPK(deleted,CurrencyRate," = "," AND") */
        deleted.CurrencyRateID = CurrencyRate.CurrencyRateID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,CurrencyRate," = "," AND") */
            SalesOrderHeader.CurrencyRateID = CurrencyRate.CurrencyRateID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because CurrencyRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CreditCard  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CreditCard"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_CreditCard_CreditCardID", FK_COLUMNS="CreditCardID" */
    IF EXISTS (SELECT * FROM deleted,CreditCard
      WHERE
        /* %JoinFKPK(deleted,CreditCard," = "," AND") */
        deleted.CreditCardID = CreditCard.CreditCardID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,CreditCard," = "," AND") */
            SalesOrderHeader.CreditCardID = CreditCard.CreditCardID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because CreditCard exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Address_ShipToAddressID", FK_COLUMNS="ShipToAddressID" */
    IF EXISTS (SELECT * FROM deleted,Address
      WHERE
        /* %JoinFKPK(deleted,Address," = "," AND") */
        deleted.ShipToAddressID = Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,Address," = "," AND") */
            SalesOrderHeader.ShipToAddressID = Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because Address exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* Address  SalesOrderHeader on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="Address"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_Address_BillToAddressID", FK_COLUMNS="BillToAddressID" */
    IF EXISTS (SELECT * FROM deleted,Address
      WHERE
        /* %JoinFKPK(deleted,Address," = "," AND") */
        deleted.BillToAddressID = Address.AddressID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeader
          WHERE
            /* %JoinFKPK(SalesOrderHeader,Address," = "," AND") */
            SalesOrderHeader.BillToAddressID = Address.AddressID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeader because Address exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesOrderHeaderSalesReason ON SalesOrderHeaderSalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesOrderHeaderSalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesOrderHeader  SalesOrderHeaderSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="000349ba", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
    IF EXISTS (SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /* %JoinFKPK(deleted,SalesOrderHeader," = "," AND") */
        deleted.SalesOrderID = SalesOrderHeader.SalesOrderID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeaderSalesReason
          WHERE
            /* %JoinFKPK(SalesOrderHeaderSalesReason,SalesOrderHeader," = "," AND") */
            SalesOrderHeaderSalesReason.SalesOrderID = SalesOrderHeader.SalesOrderID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeaderSalesReason because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesReason  SalesOrderHeaderSalesReason on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
    IF EXISTS (SELECT * FROM deleted,SalesReason
      WHERE
        /* %JoinFKPK(deleted,SalesReason," = "," AND") */
        deleted.SalesReasonID = SalesReason.SalesReasonID AND
        NOT EXISTS (
          SELECT * FROM SalesOrderHeaderSalesReason
          WHERE
            /* %JoinFKPK(SalesOrderHeaderSalesReason,SalesReason," = "," AND") */
            SalesOrderHeaderSalesReason.SalesReasonID = SalesReason.SalesReasonID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesOrderHeaderSalesReason because SalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesOrderHeaderSalesReason ON SalesOrderHeaderSalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesOrderHeaderSalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesOrderID int, 
           @insSalesReasonID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesOrderHeader  SalesOrderHeaderSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00034985", PARENT_OWNER="", PARENT_TABLE="SalesOrderHeader"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderID", FK_COLUMNS="SalesOrderID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesOrderID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesOrderHeader
        WHERE
          /* %JoinFKPK(inserted,SalesOrderHeader) */
          inserted.SalesOrderID = SalesOrderHeader.SalesOrderID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderHeaderSalesReason because SalesOrderHeader does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesReason  SalesOrderHeaderSalesReason on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesReasonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesReason
        WHERE
          /* %JoinFKPK(inserted,SalesReason) */
          inserted.SalesReasonID = SalesReason.SalesReasonID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesOrderHeaderSalesReason because SalesReason does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesPerson ON SalesPerson FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesPerson */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesPerson  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="000609f8", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  Store on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (
      SELECT * FROM deleted,Store
      WHERE
        /*  %JoinFKPK(Store,deleted," = "," AND") */
        Store.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because Store exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesTerritoryHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because SalesTerritoryHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesPersonQuotaHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesPersonQuotaHistory
      WHERE
        /*  %JoinFKPK(SalesPersonQuotaHistory,deleted," = "," AND") */
        SalesPersonQuotaHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesPerson because SalesPersonQuotaHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesPerson on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM SalesPerson
          WHERE
            /* %JoinFKPK(SalesPerson,SalesTerritory," = "," AND") */
            SalesPerson.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesPerson because SalesTerritory exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesPerson ON SalesPerson FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesPerson */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesPerson  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0006c49f", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  Store on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Store
      WHERE
        /*  %JoinFKPK(Store,deleted," = "," AND") */
        Store.SalesPersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because Store exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  SalesTerritoryHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because SalesTerritoryHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  SalesPersonQuotaHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesPersonQuotaHistory
      WHERE
        /*  %JoinFKPK(SalesPersonQuotaHistory,deleted," = "," AND") */
        SalesPersonQuotaHistory.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesPerson because SalesPersonQuotaHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesPerson on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.TerritoryID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesPerson because SalesTerritory does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesPersonQuotaHistory ON SalesPersonQuotaHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesPersonQuotaHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesPerson  SalesPersonQuotaHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001a195", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.BusinessEntityID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM SalesPersonQuotaHistory
          WHERE
            /* %JoinFKPK(SalesPersonQuotaHistory,SalesPerson," = "," AND") */
            SalesPersonQuotaHistory.BusinessEntityID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesPersonQuotaHistory because SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesPersonQuotaHistory ON SalesPersonQuotaHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesPersonQuotaHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insQuotaDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesPerson  SalesPersonQuotaHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001b023", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesPersonQuotaHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPersonQuotaHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesPerson
        WHERE
          /* %JoinFKPK(inserted,SalesPerson) */
          inserted.BusinessEntityID = SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesPersonQuotaHistory because SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesReason ON SalesReason FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesReason */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesReason  SalesOrderHeaderSalesReason on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015ee8", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(SalesOrderHeaderSalesReason,deleted," = "," AND") */
        SalesOrderHeaderSalesReason.SalesReasonID = deleted.SalesReasonID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesReason because SalesOrderHeaderSalesReason exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesReason ON SalesReason FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesReason */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesReasonID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesReason  SalesOrderHeaderSalesReason on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017f88", PARENT_OWNER="", PARENT_TABLE="SalesReason"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeaderSalesReason"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeaderSalesReason_SalesReason_SalesReasonID", FK_COLUMNS="SalesReasonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SalesReasonID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeaderSalesReason
      WHERE
        /*  %JoinFKPK(SalesOrderHeaderSalesReason,deleted," = "," AND") */
        SalesOrderHeaderSalesReason.SalesReasonID = deleted.SalesReasonID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesReason because SalesOrderHeaderSalesReason exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesTaxRate ON SalesTaxRate FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTaxRate */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StateProvince  SalesTaxRate on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00018b59", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTaxRate_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (SELECT * FROM deleted,StateProvince
      WHERE
        /* %JoinFKPK(deleted,StateProvince," = "," AND") */
        deleted.StateProvinceID = StateProvince.StateProvinceID AND
        NOT EXISTS (
          SELECT * FROM SalesTaxRate
          WHERE
            /* %JoinFKPK(SalesTaxRate,StateProvince," = "," AND") */
            SalesTaxRate.StateProvinceID = StateProvince.StateProvinceID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesTaxRate because StateProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesTaxRate ON SalesTaxRate FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTaxRate */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSalesTaxRateID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StateProvince  SalesTaxRate on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00019c3c", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTaxRate_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,StateProvince
        WHERE
          /* %JoinFKPK(inserted,StateProvince) */
          inserted.StateProvinceID = StateProvince.StateProvinceID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesTaxRate because StateProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesTerritory ON SalesTerritory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTerritory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesOrderHeader on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0007037a", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because SalesOrderHeader exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  StateProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because StateProvince exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesTerritoryHistory on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because SalesTerritoryHistory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesPerson on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesPerson
      WHERE
        /*  %JoinFKPK(SalesPerson,deleted," = "," AND") */
        SalesPerson.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SalesTerritory because SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  SalesTerritory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritory_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,CountryRegion
      WHERE
        /* %JoinFKPK(deleted,CountryRegion," = "," AND") */
        deleted.CountryRegionCode = CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM SalesTerritory
          WHERE
            /* %JoinFKPK(SalesTerritory,CountryRegion," = "," AND") */
            SalesTerritory.CountryRegionCode = CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesTerritory because CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesTerritory ON SalesTerritory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTerritory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insTerritoryID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesOrderHeader on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0007b819", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderHeader"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderHeader_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderHeader
      WHERE
        /*  %JoinFKPK(SalesOrderHeader,deleted," = "," AND") */
        SalesOrderHeader.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because SalesOrderHeader exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  StateProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,StateProvince
      WHERE
        /*  %JoinFKPK(StateProvince,deleted," = "," AND") */
        StateProvince.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because StateProvince exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesTerritoryHistory on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesTerritoryHistory
      WHERE
        /*  %JoinFKPK(SalesTerritoryHistory,deleted," = "," AND") */
        SalesTerritoryHistory.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because SalesTerritoryHistory exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesPerson on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesPerson"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesPerson_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesPerson
      WHERE
        /*  %JoinFKPK(SalesPerson,deleted," = "," AND") */
        SalesPerson.TerritoryID = deleted.TerritoryID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SalesTerritory because SalesPerson exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  SalesTerritory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritory_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CountryRegion
        WHERE
          /* %JoinFKPK(inserted,CountryRegion) */
          inserted.CountryRegionCode = CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesTerritory because CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SalesTerritoryHistory ON SalesTerritoryHistory FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SalesTerritoryHistory */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SalesTerritory  SalesTerritoryHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003224a", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM SalesTerritoryHistory
          WHERE
            /* %JoinFKPK(SalesTerritoryHistory,SalesTerritory," = "," AND") */
            SalesTerritoryHistory.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesTerritoryHistory because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  SalesTerritoryHistory on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.BusinessEntityID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM SalesTerritoryHistory
          WHERE
            /* %JoinFKPK(SalesTerritoryHistory,SalesPerson," = "," AND") */
            SalesTerritoryHistory.BusinessEntityID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SalesTerritoryHistory because SalesPerson exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SalesTerritoryHistory ON SalesTerritoryHistory FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SalesTerritoryHistory */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insTerritoryID int, 
           @insStartDate datetime,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SalesTerritory  SalesTerritoryHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00032b72", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesTerritoryHistory because SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  SalesTerritoryHistory on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="SalesTerritoryHistory"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTerritoryHistory_SalesPerson_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesPerson
        WHERE
          /* %JoinFKPK(inserted,SalesPerson) */
          inserted.BusinessEntityID = SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SalesTerritoryHistory because SalesPerson does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SpecialOffer ON SpecialOffer FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SpecialOffer */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SpecialOffer  SpecialOfferProduct on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00015906", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
    IF EXISTS (
      SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(SpecialOfferProduct,deleted," = "," AND") */
        SpecialOfferProduct.SpecialOfferID = deleted.SpecialOfferID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SpecialOffer because SpecialOfferProduct exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SpecialOffer ON SpecialOffer FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SpecialOffer */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSpecialOfferID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SpecialOffer  SpecialOfferProduct on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00017199", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SpecialOfferID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SpecialOfferProduct
      WHERE
        /*  %JoinFKPK(SpecialOfferProduct,deleted," = "," AND") */
        SpecialOfferProduct.SpecialOfferID = deleted.SpecialOfferID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SpecialOffer because SpecialOfferProduct exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_SpecialOfferProduct ON SpecialOfferProduct FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on SpecialOfferProduct */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* SpecialOfferProduct  SalesOrderDetail on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002efea", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderDetail
      WHERE
        /*  %JoinFKPK(SalesOrderDetail,deleted," = "," AND") */
        SalesOrderDetail.SpecialOfferID = deleted.SpecialOfferID AND
        SalesOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete SpecialOfferProduct because SalesOrderDetail exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SpecialOffer  SpecialOfferProduct on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
    IF EXISTS (SELECT * FROM deleted,SpecialOffer
      WHERE
        /* %JoinFKPK(deleted,SpecialOffer," = "," AND") */
        deleted.SpecialOfferID = SpecialOffer.SpecialOfferID AND
        NOT EXISTS (
          SELECT * FROM SpecialOfferProduct
          WHERE
            /* %JoinFKPK(SpecialOfferProduct,SpecialOffer," = "," AND") */
            SpecialOfferProduct.SpecialOfferID = SpecialOffer.SpecialOfferID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last SpecialOfferProduct because SpecialOffer exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_SpecialOfferProduct ON SpecialOfferProduct FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on SpecialOfferProduct */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insSpecialOfferID int, 
           @insProductID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* SpecialOfferProduct  SalesOrderDetail on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00032c78", PARENT_OWNER="", PARENT_TABLE="SpecialOfferProduct"
    CHILD_OWNER="", CHILD_TABLE="SalesOrderDetail"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferIDProductID", FK_COLUMNS="SpecialOfferID""ProductID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(SpecialOfferID) OR
    UPDATE(ProductID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesOrderDetail
      WHERE
        /*  %JoinFKPK(SalesOrderDetail,deleted," = "," AND") */
        SalesOrderDetail.SpecialOfferID = deleted.SpecialOfferID AND
        SalesOrderDetail.ProductID = deleted.ProductID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update SpecialOfferProduct because SalesOrderDetail exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SpecialOffer  SpecialOfferProduct on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SpecialOffer"
    CHILD_OWNER="", CHILD_TABLE="SpecialOfferProduct"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SpecialOfferProduct_SpecialOffer_SpecialOfferID", FK_COLUMNS="SpecialOfferID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SpecialOfferID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SpecialOffer
        WHERE
          /* %JoinFKPK(inserted,SpecialOffer) */
          inserted.SpecialOfferID = SpecialOffer.SpecialOfferID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update SpecialOfferProduct because SpecialOffer does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_StateProvince ON StateProvince FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on StateProvince */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* StateProvince  Address on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0005027c", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,Address
      WHERE
        /*  %JoinFKPK(Address,deleted," = "," AND") */
        Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete StateProvince because Address exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* StateProvince  SalesTaxRate on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTaxRate_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
    IF EXISTS (
      SELECT * FROM deleted,SalesTaxRate
      WHERE
        /*  %JoinFKPK(SalesTaxRate,deleted," = "," AND") */
        SalesTaxRate.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete StateProvince because SalesTaxRate exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesTerritory  StateProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
    IF EXISTS (SELECT * FROM deleted,SalesTerritory
      WHERE
        /* %JoinFKPK(deleted,SalesTerritory," = "," AND") */
        deleted.TerritoryID = SalesTerritory.TerritoryID AND
        NOT EXISTS (
          SELECT * FROM StateProvince
          WHERE
            /* %JoinFKPK(StateProvince,SalesTerritory," = "," AND") */
            StateProvince.TerritoryID = SalesTerritory.TerritoryID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last StateProvince because SalesTerritory exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* CountryRegion  StateProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
    IF EXISTS (SELECT * FROM deleted,CountryRegion
      WHERE
        /* %JoinFKPK(deleted,CountryRegion," = "," AND") */
        deleted.CountryRegionCode = CountryRegion.CountryRegionCode AND
        NOT EXISTS (
          SELECT * FROM StateProvince
          WHERE
            /* %JoinFKPK(StateProvince,CountryRegion," = "," AND") */
            StateProvince.CountryRegionCode = CountryRegion.CountryRegionCode
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last StateProvince because CountryRegion exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_StateProvince ON StateProvince FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on StateProvince */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStateProvinceID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* StateProvince  Address on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00056187", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="Address"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Address_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Address
      WHERE
        /*  %JoinFKPK(Address,deleted," = "," AND") */
        Address.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update StateProvince because Address exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* StateProvince  SalesTaxRate on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="StateProvince"
    CHILD_OWNER="", CHILD_TABLE="SalesTaxRate"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_SalesTaxRate_StateProvince_StateProvinceID", FK_COLUMNS="StateProvinceID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StateProvinceID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,SalesTaxRate
      WHERE
        /*  %JoinFKPK(SalesTaxRate,deleted," = "," AND") */
        SalesTaxRate.StateProvinceID = deleted.StateProvinceID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update StateProvince because SalesTaxRate exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesTerritory  StateProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesTerritory"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_SalesTerritory_TerritoryID", FK_COLUMNS="TerritoryID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(TerritoryID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesTerritory
        WHERE
          /* %JoinFKPK(inserted,SalesTerritory) */
          inserted.TerritoryID = SalesTerritory.TerritoryID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update StateProvince because SalesTerritory does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* CountryRegion  StateProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CountryRegion"
    CHILD_OWNER="", CHILD_TABLE="StateProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_StateProvince_CountryRegion_CountryRegionCode", FK_COLUMNS="CountryRegionCode" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRegionCode)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,CountryRegion
        WHERE
          /* %JoinFKPK(inserted,CountryRegion) */
          inserted.CountryRegionCode = CountryRegion.CountryRegionCode
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update StateProvince because CountryRegion does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_Store ON Store FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on Store */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* Store  Customer on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003a47b", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.StoreID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete Store because Customer exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* SalesPerson  Store on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
    IF EXISTS (SELECT * FROM deleted,SalesPerson
      WHERE
        /* %JoinFKPK(deleted,SalesPerson," = "," AND") */
        deleted.SalesPersonID = SalesPerson.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Store
          WHERE
            /* %JoinFKPK(Store,SalesPerson," = "," AND") */
            Store.SalesPersonID = SalesPerson.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Store because SalesPerson exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* BusinessEntity  Store on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM Store
          WHERE
            /* %JoinFKPK(Store,BusinessEntity," = "," AND") */
            Store.BusinessEntityID = BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last Store because BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_Store ON Store FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on Store */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* Store  Customer on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00042533", PARENT_OWNER="", PARENT_TABLE="Store"
    CHILD_OWNER="", CHILD_TABLE="Customer"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Customer_Store_StoreID", FK_COLUMNS="StoreID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,Customer
      WHERE
        /*  %JoinFKPK(Customer,deleted," = "," AND") */
        Customer.StoreID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update Store because Customer exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* SalesPerson  Store on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SalesPerson"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_SalesPerson_SalesPersonID", FK_COLUMNS="SalesPersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(SalesPersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,SalesPerson
        WHERE
          /* %JoinFKPK(inserted,SalesPerson) */
          inserted.SalesPersonID = SalesPerson.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    select @nullcnt = count(*) from inserted where
      inserted.SalesPersonID IS NULL
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Store because SalesPerson does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* BusinessEntity  Store on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="Store"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FK_Store_BusinessEntity_BusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,BusinessEntity) */
          inserted.BusinessEntityID = BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update Store because BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


