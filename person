
CREATE TYPE [AcctNbr]
	FROM NVARCHAR(15) NULL
go

CREATE TYPE [Flag]
	FROM BIT NOT NULL
go

CREATE TYPE [NamStyle]
	FROM BIT NOT NULL
go

CREATE TYPE [Nam]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [OrdrNbr]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Phn]
	FROM NVARCHAR(25) NULL
go

CREATE TYPE [Id]
	FROM VARCHAR(6) NULL
go

CREATE TYPE [FrstNam]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [LstNam]
	FROM VARCHAR(20) NULL
go

CREATE TYPE [Desc]
	FROM VARCHAR(40) NULL
go

CREATE TYPE [Cd]
	FROM INTEGER NULL
go

CREATE TYPE [property]
	FROM CHAR(18) NULL
go

CREATE TABLE [tbl_Addr]
( 
	[AddrID]             int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[AddrLine1]          nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[AddrLine2]          nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[Cty]                nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[StProvinceID]       int  NOT NULL ,
	[PostalCd]           nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[SpatialLocation]    geography  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Address_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_Address_ModifiedDate]
		 DEFAULT  getdate(),
	[StprovinceCd]       [Cd]  NOT NULL 
)
go

CREATE TABLE [tbl_Addrline]
( 
	[pkcol]              char(18)  NOT NULL ,
	[nonpkcol]           char(18)  NULL 
)
go

CREATE TABLE [tbl_AddrTyp]
( 
	[AddrTypID]          int  IDENTITY ( 1,1 )  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_AddressType_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_AddressType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_BusinessEntity]
( 
	[BusinessEntityID]   int  IDENTITY ( 1,1 ) NOT FOR REPLICATION  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntity_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_BusinessEntityAddr]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[AddrID]             int  NOT NULL ,
	[AddrTypID]          int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_BusinessEntityContact]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonID]           int  NOT NULL ,
	[ContactTypID]       int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_BusinessEntityContact_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_ContactTyp]
( 
	[ContactTypID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_ContactType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_CountryRgn]
( 
	[CountryRgnCd]       nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_CountryRegion_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_EmailAddr]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[EmailAddrID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[EmailAddr]          nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_EmailAddress_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_EmailAddress_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_newtable]
( 
	[col1]               char(18)  NULL 
)
go

CREATE TABLE [tbl_Password]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PasswordHash]       varchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[PasswordSalt]       varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Password_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_Password_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_Person]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PersonTyp]          nchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[NamStyle]           [NamStyle]  NOT NULL 
	CONSTRAINT [DF_Person_NameStyle]
		 DEFAULT  0,
	[Ttle]               nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[FrstNam]            [Nam]  NOT NULL ,
	[MidNam]             [Nam]  NULL ,
	[LstNam]             [Nam]  NOT NULL ,
	[Suffix]             nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL ,
	[EmailPromotion]     int  NOT NULL 
	CONSTRAINT [DF_Person_EmailPromotion]
		 DEFAULT  0,
	[AdditionalContactInfo] xml ( CONTENT [AdditionalContactInfoSchemaCollection] ) NULL ,
	[Demographics]       xml ( CONTENT [IndividualSurveySchemaCollection] ) NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_Person_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_Person_ModifiedDate]
		 DEFAULT  getdate()
)
go

ALTER TABLE [tbl_Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_PersonType] CHECK  ( [PersonType] IS NULL OR (upper([PersonType])='GC' OR upper([PersonType])='SP' OR upper([PersonType])='EM' OR upper([PersonType])='IN' OR upper([PersonType])='VC' OR upper([PersonType])='SC') )
go

ALTER TABLE [tbl_Person]
	 WITH CHECK ADD CONSTRAINT [CK_Person_EmailPromotion] CHECK  ( EmailPromotion BETWEEN 0 AND 2 )
go

CREATE TABLE [tbl_PersonPhn]
( 
	[BusinessEntityID]   int  NOT NULL ,
	[PhnNbr]             [Phn]  NOT NULL ,
	[PhnNbrTypID]        int  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_PersonPhone_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_PhnNbrTyp]
( 
	[PhnNbrTypID]        int  IDENTITY ( 1,1 )  NOT NULL ,
	[Nam]                [Nam]  NOT NULL ,
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_PhoneNumberType_ModifiedDate]
		 DEFAULT  getdate()
)
go

CREATE TABLE [tbl_sampletable]
( 
	[col1]               char(18)  NOT NULL ,
	[colx]               char(18)  NULL 
)
go

CREATE TABLE [tbl_StProvince]
( 
	[StProvinceID]       int  IDENTITY ( 1,1 )  NOT NULL ,
	[StProvinceCd]       nchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[CountryRgnCd]       nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL ,
	[IsOnlyStProvinceFlag] [Flag]  NOT NULL 
	CONSTRAINT [DF_StateProvince_IsOnlyStateProvinceFlag]
		 DEFAULT  1,
	[Nam]                [Nam]  NOT NULL ,
	[TerriToryID]        int  NOT NULL ,
	[rowguid]            uniqueidentifier  ROWGUIDCOL  NOT NULL 
	CONSTRAINT [DF_StateProvince_rowguid]
		 DEFAULT  newid(),
	[ModifiedDt]         datetime  NOT NULL 
	CONSTRAINT [DF_StateProvince_ModifiedDate]
		 DEFAULT  getdate(),
	[StprovinceOrdrNbr]  [OrdrNbr] ,
	[StprovinceCd]       [Cd]  NOT NULL 
)
go

CREATE TABLE [test]
( 
	[a]                  char(18)  NOT NULL ,
	[b]                  bigint  NULL ,
	[c]                  char(18)  NULL 
)
go

ALTER TABLE [tbl_Addr]
	ADD CONSTRAINT [PK_Address_AddressID] PRIMARY KEY  CLUSTERED ([AddrID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKAddressrowguid] ON [tbl_Addr]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [IXAddressAddressLine1AddressLine2CityStateProvinceIDPostalCode] ON [tbl_Addr]
( 
	[AddrLine1]           ASC,
	[AddrLine2]           ASC,
	[Cty]                 ASC,
	[StProvinceID]        ASC,
	[PostalCd]            ASC
)
go

ALTER TABLE [tbl_Addrline]
	ADD CONSTRAINT [XPKaddressline] PRIMARY KEY  CLUSTERED ([pkcol] ASC)
go

ALTER TABLE [tbl_AddrTyp]
	ADD CONSTRAINT [PK_AddressType_AddressTypeID] PRIMARY KEY  CLUSTERED ([AddrTypID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKAddressTyperowguid] ON [tbl_AddrTyp]
( 
	[rowguid]             ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKAddressTypeName] ON [tbl_AddrTyp]
( 
	[Nam]                 ASC
)
go

ALTER TABLE [tbl_BusinessEntity]
	ADD CONSTRAINT [PK_BusinessEntity_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKBusinessEntityrowguid] ON [tbl_BusinessEntity]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [tbl_BusinessEntityAddr]
	ADD CONSTRAINT [PK_BusinessEntityAddress_BusinessEntityID_AddressID_AddressTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[AddrID] ASC,[AddrTypID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKBusinessEntityAddressrowguid] ON [tbl_BusinessEntityAddr]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [tbl_BusinessEntityContact]
	ADD CONSTRAINT [PK_BusinessEntityContact_BusinessEntityID_PersonID_ContactTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PersonID] ASC,[ContactTypID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKBusinessEntityContactrowguid] ON [tbl_BusinessEntityContact]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [tbl_ContactTyp]
	ADD CONSTRAINT [PK_ContactType_ContactTypeID] PRIMARY KEY  CLUSTERED ([ContactTypID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKContactTypeName] ON [tbl_ContactTyp]
( 
	[Nam]                 ASC
)
go

ALTER TABLE [tbl_CountryRgn]
	ADD CONSTRAINT [PK_CountryRegion_CountryRegionCode] PRIMARY KEY  CLUSTERED ([CountryRgnCd] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKCountryRegionName] ON [tbl_CountryRgn]
( 
	[Nam]                 ASC
)
go

ALTER TABLE [tbl_EmailAddr]
	ADD CONSTRAINT [PK_EmailAddress_BusinessEntityID_EmailAddressID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[EmailAddrID] ASC)
go

CREATE NONCLUSTERED INDEX [IXEmailAddressEmailAddress] ON [tbl_EmailAddr]
( 
	[EmailAddr]           ASC
)
go

ALTER TABLE [tbl_Password]
	ADD CONSTRAINT [PK_Password_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

ALTER TABLE [tbl_Person]
	ADD CONSTRAINT [PK_Person_BusinessEntityID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKPersonrowguid] ON [tbl_Person]
( 
	[rowguid]             ASC
)
go

CREATE NONCLUSTERED INDEX [IXPersonLastNameFirstNameMiddleName] ON [tbl_Person]
( 
	[LstNam]              ASC,
	[FrstNam]             ASC,
	[MidNam]              ASC
)
go

ALTER TABLE [tbl_PersonPhn]
	ADD CONSTRAINT [PK_PersonPhone_BusinessEntityID_PhoneNumber_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([BusinessEntityID] ASC,[PhnNbr] ASC,[PhnNbrTypID] ASC)
go

CREATE NONCLUSTERED INDEX [IXPersonPhonePhoneNumber] ON [tbl_PersonPhn]
( 
	[PhnNbr]              ASC
)
go

ALTER TABLE [tbl_PhnNbrTyp]
	ADD CONSTRAINT [PK_PhoneNumberType_PhoneNumberTypeID] PRIMARY KEY  CLUSTERED ([PhnNbrTypID] ASC)
go

ALTER TABLE [tbl_sampletable]
	ADD CONSTRAINT [XPKsampletable] PRIMARY KEY  CLUSTERED ([col1] ASC)
go

ALTER TABLE [tbl_StProvince]
	ADD CONSTRAINT [PK_StateProvince_StateProvinceID] PRIMARY KEY  CLUSTERED ([StProvinceID] ASC,[StprovinceCd] ASC)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKStateProvinceName] ON [tbl_StProvince]
( 
	[Nam]                 ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKStateProvinceStateProvinceCodeCountryRegionCode] ON [tbl_StProvince]
( 
	[StProvinceCd]        ASC,
	[CountryRgnCd]        ASC
)
go

CREATE UNIQUE NONCLUSTERED INDEX [AKStateProvincerowguid] ON [tbl_StProvince]
( 
	[rowguid]             ASC
)
go

ALTER TABLE [test]
	ADD CONSTRAINT [XPKtest] PRIMARY KEY  CLUSTERED ([a] ASC)
go

CREATE VIEW [Person].[vAdditionalContactInfo] AS  SELECT [BusinessEntityID], [FirstName], [MiddleName], [LastName],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber)[1]/act:number' , 'nvarchar(50)' )  AS [TelephoneNumber],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:telephoneNumber/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [TelephoneSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes";
        (act:homePostalAddress/act:Street)[1]' , 'nvarchar(50)' )  AS [Street],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:City)[1]' , 'nvarchar(50)' )  AS [City],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:StateProvince)[1]' , 'nvarchar(50)' )  AS [StateProvince],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:PostalCode)[1]' , 'nvarchar(50)' )  AS [PostalCode],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:CountryRegion)[1]' , 'nvarchar(50)' )  AS [CountryRegion],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:homePostalAddress/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' )  AS [HomeAddressSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:eMailAddress)[1]' , 'nvarchar(128)' )  AS [EMailAddress],  ltrim( rtrim( [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/text())[1]' , 'nvarchar(max)' ) ) )  AS [EMailSpecialInstructions],  [ContactInfo].ref.value( N'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
        declare namespace act="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactTypes"; 
        (act:eMail/act:SpecialInstructions/act:telephoneNumber/act:number)[1]' , 'nvarchar(50)' )  AS [EMailTelephoneNumber], [rowguid], [ModifiedDate] FROM Person.Person   OUTER APPLY   AdditionalContactInfo.nodes( 'declare namespace ci="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/ContactInfo"; 
    /ci:AdditionalContactInfo' ) AS ContactInfo 
(ref)
 WHERE [AdditionalContactInfo] IS NOT NULL
go

CREATE VIEW [Person].[vStateProvinceCountryRegion] WITH SCHEMABINDING  AS  SELECT sp.[StateProvinceID], sp.[StateProvinceCode], sp.[IsOnlyStateProvinceFlag], sp.[Name] AS [StateProvinceName], sp.[TerritoryID], cr.[CountryRegionCode], cr.[Name] AS [CountryRegionName] FROM Person.StateProvince AS sp   INNER JOIN   Person.CountryRegion AS cr ON sp.[CountryRegionCode] = cr.[CountryRegionCode]
go


ALTER TABLE [tbl_Addr] WITH CHECK 
	ADD CONSTRAINT [FKAddressStateProvinceStateProvinceID] FOREIGN KEY ([StProvinceID],[StprovinceCd]) REFERENCES [tbl_StProvince]([StProvinceID],[StprovinceCd])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_Addr]
	  WITH CHECK CHECK CONSTRAINT [FKAddressStateProvinceStateProvinceID]
go


ALTER TABLE [tbl_BusinessEntityAddr] WITH CHECK 
	ADD CONSTRAINT [FKBusinessEntityAddressAddressAddressID] FOREIGN KEY ([AddrID]) REFERENCES [tbl_Addr]([AddrID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_BusinessEntityAddr]
	  WITH CHECK CHECK CONSTRAINT [FKBusinessEntityAddressAddressAddressID]
go

ALTER TABLE [tbl_BusinessEntityAddr] WITH CHECK 
	ADD CONSTRAINT [FKBusinessEntityAddressAddressTypeAddressTypeID] FOREIGN KEY ([AddrTypID]) REFERENCES [tbl_AddrTyp]([AddrTypID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_BusinessEntityAddr]
	  WITH CHECK CHECK CONSTRAINT [FKBusinessEntityAddressAddressTypeAddressTypeID]
go

ALTER TABLE [tbl_BusinessEntityAddr] WITH CHECK 
	ADD CONSTRAINT [FKBusinessEntityAddressBusinessEntityBusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_BusinessEntityAddr]
	  WITH CHECK CHECK CONSTRAINT [FKBusinessEntityAddressBusinessEntityBusinessEntityID]
go


ALTER TABLE [tbl_BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FKBusinessEntityContactPersonPersonID] FOREIGN KEY ([PersonID]) REFERENCES [tbl_Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FKBusinessEntityContactPersonPersonID]
go

ALTER TABLE [tbl_BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FKBusinessEntityContactContactTypeContactTypeID] FOREIGN KEY ([ContactTypID]) REFERENCES [tbl_ContactTyp]([ContactTypID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FKBusinessEntityContactContactTypeContactTypeID]
go

ALTER TABLE [tbl_BusinessEntityContact] WITH CHECK 
	ADD CONSTRAINT [FKBusinessEntityContactBusinessEntityBusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_BusinessEntityContact]
	  WITH CHECK CHECK CONSTRAINT [FKBusinessEntityContactBusinessEntityBusinessEntityID]
go


ALTER TABLE [tbl_EmailAddr] WITH CHECK 
	ADD CONSTRAINT [FKEmailAddressPersonBusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_EmailAddr]
	  WITH CHECK CHECK CONSTRAINT [FKEmailAddressPersonBusinessEntityID]
go


ALTER TABLE [tbl_Password] WITH CHECK 
	ADD CONSTRAINT [FKPasswordPersonBusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_Password]
	  WITH CHECK CHECK CONSTRAINT [FKPasswordPersonBusinessEntityID]
go


ALTER TABLE [tbl_Person] WITH CHECK 
	ADD CONSTRAINT [FKPersonBusinessEntityBusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_BusinessEntity]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_Person]
	  WITH CHECK CHECK CONSTRAINT [FKPersonBusinessEntityBusinessEntityID]
go


ALTER TABLE [tbl_PersonPhn] WITH CHECK 
	ADD CONSTRAINT [FKPersonPhonePersonBusinessEntityID] FOREIGN KEY ([BusinessEntityID]) REFERENCES [tbl_Person]([BusinessEntityID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_PersonPhn]
	  WITH CHECK CHECK CONSTRAINT [FKPersonPhonePersonBusinessEntityID]
go

ALTER TABLE [tbl_PersonPhn] WITH CHECK 
	ADD CONSTRAINT [FKPersonPhonePhoneNumberTypePhoneNumberTypeID] FOREIGN KEY ([PhnNbrTypID]) REFERENCES [tbl_PhnNbrTyp]([PhnNbrTypID])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_PersonPhn]
	  WITH CHECK CHECK CONSTRAINT [FKPersonPhonePhoneNumberTypePhoneNumberTypeID]
go


ALTER TABLE [tbl_StProvince] WITH CHECK 
	ADD CONSTRAINT [FKStateProvinceCountryRegionCountryRegionCode] FOREIGN KEY ([CountryRgnCd]) REFERENCES [tbl_CountryRgn]([CountryRgnCd])
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
go

ALTER TABLE [tbl_StProvince]
	  WITH CHECK CHECK CONSTRAINT [FKStateProvinceCountryRegionCountryRegionCode]
go

CREATE TRIGGER [iuPerson] ON tbl_Person
   WITH 
 EXECUTE AS CALLER  AFTER INSERT,UPDATE 
 
 NOT FOR REPLICATION 
  AS

BEGIN
    DECLARE @Count int;

    SET @Count = @@ROWCOUNT;
    IF @Count = 0 
        RETURN;

    SET NOCOUNT ON;

    IF UPDATE([BusinessEntityID]) OR UPDATE([Demographics]) 
    BEGIN
        UPDATE [Person].[Person] 
        SET [Person].[Person].[Demographics] = N'<IndividualSurvey xmlns="http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"> 
            <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            </IndividualSurvey>' 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NULL;
        
        UPDATE [Person].[Person] 
        SET [Demographics].modify(N'declare default element namespace "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
            insert <TotalPurchaseYTD>0.00</TotalPurchaseYTD> 
            as first 
            into (/IndividualSurvey)[1]') 
        FROM inserted 
        WHERE [Person].[Person].[BusinessEntityID] = inserted.[BusinessEntityID] 
            AND inserted.[Demographics] IS NOT NULL 
            AND inserted.[Demographics].exist(N'declare default element namespace 
                "http://schemas.microsoft.com/sqlserver/2004/07/adventure-works/IndividualSurvey"; 
                /IndividualSurvey/TotalPurchaseYTD') <> 1;
    END;
END;

 
go


ENABLE TRIGGER [iuPerson] ON tbl_Person
go


CREATE TRIGGER tD_tbl_Addr ON tbl_Addr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_Addr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_Addr  tbl_BusinessEntityAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002c3a1", PARENT_OWNER="", PARENT_TABLE="tbl_Addr"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressAddressID", FK_COLUMNS="AddrID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityAddr,deleted," = "," AND") */
        tbl_BusinessEntityAddr.AddrID = deleted.AddrID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_Addr because tbl_BusinessEntityAddr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_StProvince  tbl_Addr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_StProvince"
    CHILD_OWNER="", CHILD_TABLE="tbl_Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKAddressStateProvinceStateProvinceID", FK_COLUMNS="StProvinceID""StprovinceCd" */
    IF EXISTS (SELECT * FROM deleted,tbl_StProvince
      WHERE
        /* %JoinFKPK(deleted,tbl_StProvince," = "," AND") */
        deleted.StProvinceID = tbl_StProvince.StProvinceID AND
        deleted.StprovinceCd = tbl_StProvince.StprovinceCd AND
        NOT EXISTS (
          SELECT * FROM tbl_Addr
          WHERE
            /* %JoinFKPK(tbl_Addr,tbl_StProvince," = "," AND") */
            tbl_Addr.StProvinceID = tbl_StProvince.StProvinceID AND
            tbl_Addr.StprovinceCd = tbl_StProvince.StprovinceCd
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_Addr because tbl_StProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_Addr ON tbl_Addr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_Addr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddrID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_Addr  tbl_BusinessEntityAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002f05b", PARENT_OWNER="", PARENT_TABLE="tbl_Addr"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressAddressID", FK_COLUMNS="AddrID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddrID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityAddr,deleted," = "," AND") */
        tbl_BusinessEntityAddr.AddrID = deleted.AddrID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_Addr because tbl_BusinessEntityAddr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_StProvince  tbl_Addr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_StProvince"
    CHILD_OWNER="", CHILD_TABLE="tbl_Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKAddressStateProvinceStateProvinceID", FK_COLUMNS="StProvinceID""StprovinceCd" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(StProvinceID) OR
    UPDATE(StprovinceCd)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_StProvince
        WHERE
          /* %JoinFKPK(inserted,tbl_StProvince) */
          inserted.StProvinceID = tbl_StProvince.StProvinceID and
          inserted.StprovinceCd = tbl_StProvince.StprovinceCd
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_Addr because tbl_StProvince does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_AddrTyp ON tbl_AddrTyp FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_AddrTyp */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_AddrTyp  tbl_BusinessEntityAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013f32", PARENT_OWNER="", PARENT_TABLE="tbl_AddrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressTypeAddressTypeID", FK_COLUMNS="AddrTypID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityAddr,deleted," = "," AND") */
        tbl_BusinessEntityAddr.AddrTypID = deleted.AddrTypID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_AddrTyp because tbl_BusinessEntityAddr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_AddrTyp ON tbl_AddrTyp FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_AddrTyp */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insAddrTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_AddrTyp  tbl_BusinessEntityAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00016180", PARENT_OWNER="", PARENT_TABLE="tbl_AddrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressTypeAddressTypeID", FK_COLUMNS="AddrTypID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(AddrTypID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityAddr,deleted," = "," AND") */
        tbl_BusinessEntityAddr.AddrTypID = deleted.AddrTypID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_AddrTyp because tbl_BusinessEntityAddr exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_BusinessEntity ON tbl_BusinessEntity FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_BusinessEntity */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_BusinessEntity  tbl_Person on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0003c3fa", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_Person
      WHERE
        /*  %JoinFKPK(tbl_Person,deleted," = "," AND") */
        tbl_Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_BusinessEntity because tbl_Person exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_BusinessEntity  tbl_BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityContact
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityContact,deleted," = "," AND") */
        tbl_BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_BusinessEntity because tbl_BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_BusinessEntity  tbl_BusinessEntityAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityAddr,deleted," = "," AND") */
        tbl_BusinessEntityAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_BusinessEntity because tbl_BusinessEntityAddr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_BusinessEntity ON tbl_BusinessEntity FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_BusinessEntity */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_BusinessEntity  tbl_Person on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="000419c1", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_Person
      WHERE
        /*  %JoinFKPK(tbl_Person,deleted," = "," AND") */
        tbl_Person.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_BusinessEntity because tbl_Person exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_BusinessEntity  tbl_BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityContact
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityContact,deleted," = "," AND") */
        tbl_BusinessEntityContact.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_BusinessEntity because tbl_BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_BusinessEntity  tbl_BusinessEntityAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityAddr
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityAddr,deleted," = "," AND") */
        tbl_BusinessEntityAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_BusinessEntity because tbl_BusinessEntityAddr exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_BusinessEntityAddr ON tbl_BusinessEntityAddr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_BusinessEntityAddr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_BusinessEntity  tbl_BusinessEntityAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00047fb8", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,tbl_BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,tbl_BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_BusinessEntityAddr
          WHERE
            /* %JoinFKPK(tbl_BusinessEntityAddr,tbl_BusinessEntity," = "," AND") */
            tbl_BusinessEntityAddr.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_BusinessEntityAddr because tbl_BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_AddrTyp  tbl_BusinessEntityAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_AddrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressTypeAddressTypeID", FK_COLUMNS="AddrTypID" */
    IF EXISTS (SELECT * FROM deleted,tbl_AddrTyp
      WHERE
        /* %JoinFKPK(deleted,tbl_AddrTyp," = "," AND") */
        deleted.AddrTypID = tbl_AddrTyp.AddrTypID AND
        NOT EXISTS (
          SELECT * FROM tbl_BusinessEntityAddr
          WHERE
            /* %JoinFKPK(tbl_BusinessEntityAddr,tbl_AddrTyp," = "," AND") */
            tbl_BusinessEntityAddr.AddrTypID = tbl_AddrTyp.AddrTypID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_BusinessEntityAddr because tbl_AddrTyp exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_Addr  tbl_BusinessEntityAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Addr"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressAddressID", FK_COLUMNS="AddrID" */
    IF EXISTS (SELECT * FROM deleted,tbl_Addr
      WHERE
        /* %JoinFKPK(deleted,tbl_Addr," = "," AND") */
        deleted.AddrID = tbl_Addr.AddrID AND
        NOT EXISTS (
          SELECT * FROM tbl_BusinessEntityAddr
          WHERE
            /* %JoinFKPK(tbl_BusinessEntityAddr,tbl_Addr," = "," AND") */
            tbl_BusinessEntityAddr.AddrID = tbl_Addr.AddrID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_BusinessEntityAddr because tbl_Addr exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_BusinessEntityAddr ON tbl_BusinessEntityAddr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_BusinessEntityAddr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insAddrID int, 
           @insAddrTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_BusinessEntity  tbl_BusinessEntityAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004966b", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,tbl_BusinessEntity) */
          inserted.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_BusinessEntityAddr because tbl_BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_AddrTyp  tbl_BusinessEntityAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_AddrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressTypeAddressTypeID", FK_COLUMNS="AddrTypID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddrTypID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_AddrTyp
        WHERE
          /* %JoinFKPK(inserted,tbl_AddrTyp) */
          inserted.AddrTypID = tbl_AddrTyp.AddrTypID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_BusinessEntityAddr because tbl_AddrTyp does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_Addr  tbl_BusinessEntityAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Addr"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityAddressAddressAddressID", FK_COLUMNS="AddrID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(AddrID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_Addr
        WHERE
          /* %JoinFKPK(inserted,tbl_Addr) */
          inserted.AddrID = tbl_Addr.AddrID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_BusinessEntityAddr because tbl_Addr does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_BusinessEntityContact ON tbl_BusinessEntityContact FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_BusinessEntityContact */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_BusinessEntity  tbl_BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0004cbfc", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,tbl_BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,tbl_BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_BusinessEntityContact
          WHERE
            /* %JoinFKPK(tbl_BusinessEntityContact,tbl_BusinessEntity," = "," AND") */
            tbl_BusinessEntityContact.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_BusinessEntityContact because tbl_BusinessEntity exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_ContactTyp  tbl_BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactContactTypeContactTypeID", FK_COLUMNS="ContactTypID" */
    IF EXISTS (SELECT * FROM deleted,tbl_ContactTyp
      WHERE
        /* %JoinFKPK(deleted,tbl_ContactTyp," = "," AND") */
        deleted.ContactTypID = tbl_ContactTyp.ContactTypID AND
        NOT EXISTS (
          SELECT * FROM tbl_BusinessEntityContact
          WHERE
            /* %JoinFKPK(tbl_BusinessEntityContact,tbl_ContactTyp," = "," AND") */
            tbl_BusinessEntityContact.ContactTypID = tbl_ContactTyp.ContactTypID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_BusinessEntityContact because tbl_ContactTyp exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_BusinessEntityContact on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactPersonPersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (SELECT * FROM deleted,tbl_Person
      WHERE
        /* %JoinFKPK(deleted,tbl_Person," = "," AND") */
        deleted.PersonID = tbl_Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_BusinessEntityContact
          WHERE
            /* %JoinFKPK(tbl_BusinessEntityContact,tbl_Person," = "," AND") */
            tbl_BusinessEntityContact.PersonID = tbl_Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_BusinessEntityContact because tbl_Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_BusinessEntityContact ON tbl_BusinessEntityContact FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_BusinessEntityContact */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPersonID int, 
           @insContactTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_BusinessEntity  tbl_BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0004c9eb", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,tbl_BusinessEntity) */
          inserted.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_BusinessEntityContact because tbl_BusinessEntity does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_ContactTyp  tbl_BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactContactTypeContactTypeID", FK_COLUMNS="ContactTypID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(ContactTypID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_ContactTyp
        WHERE
          /* %JoinFKPK(inserted,tbl_ContactTyp) */
          inserted.ContactTypID = tbl_ContactTyp.ContactTypID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_BusinessEntityContact because tbl_ContactTyp does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_BusinessEntityContact on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactPersonPersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PersonID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_Person
        WHERE
          /* %JoinFKPK(inserted,tbl_Person) */
          inserted.PersonID = tbl_Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_BusinessEntityContact because tbl_Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_ContactTyp ON tbl_ContactTyp FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_ContactTyp */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_ContactTyp  tbl_BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001506e", PARENT_OWNER="", PARENT_TABLE="tbl_ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactContactTypeContactTypeID", FK_COLUMNS="ContactTypID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityContact
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityContact,deleted," = "," AND") */
        tbl_BusinessEntityContact.ContactTypID = deleted.ContactTypID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_ContactTyp because tbl_BusinessEntityContact exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_ContactTyp ON tbl_ContactTyp FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_ContactTyp */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insContactTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_ContactTyp  tbl_BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001666d", PARENT_OWNER="", PARENT_TABLE="tbl_ContactTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactContactTypeContactTypeID", FK_COLUMNS="ContactTypID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(ContactTypID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityContact
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityContact,deleted," = "," AND") */
        tbl_BusinessEntityContact.ContactTypID = deleted.ContactTypID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_ContactTyp because tbl_BusinessEntityContact exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_CountryRgn ON tbl_CountryRgn FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_CountryRgn */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_CountryRgn  tbl_StProvince on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0001339c", PARENT_OWNER="", PARENT_TABLE="tbl_CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="tbl_StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKStateProvinceCountryRegionCountryRegionCode", FK_COLUMNS="CountryRgnCd" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_StProvince
      WHERE
        /*  %JoinFKPK(tbl_StProvince,deleted," = "," AND") */
        tbl_StProvince.CountryRgnCd = deleted.CountryRgnCd
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_CountryRgn because tbl_StProvince exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_CountryRgn ON tbl_CountryRgn FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_CountryRgn */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insCountryRgnCd nvarchar(3),
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_CountryRgn  tbl_StProvince on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00015542", PARENT_OWNER="", PARENT_TABLE="tbl_CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="tbl_StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKStateProvinceCountryRegionCountryRegionCode", FK_COLUMNS="CountryRgnCd" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(CountryRgnCd)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_StProvince
      WHERE
        /*  %JoinFKPK(tbl_StProvince,deleted," = "," AND") */
        tbl_StProvince.CountryRgnCd = deleted.CountryRgnCd
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_CountryRgn because tbl_StProvince exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_EmailAddr ON tbl_EmailAddr FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_EmailAddr */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_EmailAddr on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017b79", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKEmailAddressPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,tbl_Person
      WHERE
        /* %JoinFKPK(deleted,tbl_Person," = "," AND") */
        deleted.BusinessEntityID = tbl_Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_EmailAddr
          WHERE
            /* %JoinFKPK(tbl_EmailAddr,tbl_Person," = "," AND") */
            tbl_EmailAddr.BusinessEntityID = tbl_Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_EmailAddr because tbl_Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_EmailAddr ON tbl_EmailAddr FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_EmailAddr */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insEmailAddrID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_EmailAddr on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0001894c", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKEmailAddressPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_Person
        WHERE
          /* %JoinFKPK(inserted,tbl_Person) */
          inserted.BusinessEntityID = tbl_Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_EmailAddr because tbl_Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_Password ON tbl_Password FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_Password */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_Password on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00017017", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPasswordPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,tbl_Person
      WHERE
        /* %JoinFKPK(deleted,tbl_Person," = "," AND") */
        deleted.BusinessEntityID = tbl_Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_Password
          WHERE
            /* %JoinFKPK(tbl_Password,tbl_Person," = "," AND") */
            tbl_Password.BusinessEntityID = tbl_Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_Password because tbl_Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_Password ON tbl_Password FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_Password */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_Password on child update no action */
  /* ERWIN_RELATION:CHECKSUM="000184d0", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPasswordPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_Person
        WHERE
          /* %JoinFKPK(inserted,tbl_Person) */
          inserted.BusinessEntityID = tbl_Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_Password because tbl_Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_Person ON tbl_Person FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_Person */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_PersonPhn on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00061063", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_PersonPhn
      WHERE
        /*  %JoinFKPK(tbl_PersonPhn,deleted," = "," AND") */
        tbl_PersonPhn.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_Person because tbl_PersonPhn exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_Password on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPasswordPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_Password
      WHERE
        /*  %JoinFKPK(tbl_Password,deleted," = "," AND") */
        tbl_Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_Person because tbl_Password exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_EmailAddr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKEmailAddressPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_EmailAddr
      WHERE
        /*  %JoinFKPK(tbl_EmailAddr,deleted," = "," AND") */
        tbl_EmailAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_Person because tbl_EmailAddr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_BusinessEntityContact on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactPersonPersonID", FK_COLUMNS="PersonID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityContact
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityContact,deleted," = "," AND") */
        tbl_BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_Person because tbl_BusinessEntityContact exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_BusinessEntity  tbl_Person on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,tbl_BusinessEntity
      WHERE
        /* %JoinFKPK(deleted,tbl_BusinessEntity," = "," AND") */
        deleted.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_Person
          WHERE
            /* %JoinFKPK(tbl_Person,tbl_BusinessEntity," = "," AND") */
            tbl_Person.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_Person because tbl_BusinessEntity exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_Person ON tbl_Person FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_Person */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_PersonPhn on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00068e15", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_PersonPhn
      WHERE
        /*  %JoinFKPK(tbl_PersonPhn,deleted," = "," AND") */
        tbl_PersonPhn.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_Person because tbl_PersonPhn exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_Password on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_Password"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPasswordPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_Password
      WHERE
        /*  %JoinFKPK(tbl_Password,deleted," = "," AND") */
        tbl_Password.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_Person because tbl_Password exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_EmailAddr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_EmailAddr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKEmailAddressPersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_EmailAddr
      WHERE
        /*  %JoinFKPK(tbl_EmailAddr,deleted," = "," AND") */
        tbl_EmailAddr.BusinessEntityID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_Person because tbl_EmailAddr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_BusinessEntityContact on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_BusinessEntityContact"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKBusinessEntityContactPersonPersonID", FK_COLUMNS="PersonID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_BusinessEntityContact
      WHERE
        /*  %JoinFKPK(tbl_BusinessEntityContact,deleted," = "," AND") */
        tbl_BusinessEntityContact.PersonID = deleted.BusinessEntityID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_Person because tbl_BusinessEntityContact exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_BusinessEntity  tbl_Person on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_BusinessEntity"
    CHILD_OWNER="", CHILD_TABLE="tbl_Person"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonBusinessEntityBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_BusinessEntity
        WHERE
          /* %JoinFKPK(inserted,tbl_BusinessEntity) */
          inserted.BusinessEntityID = tbl_BusinessEntity.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_Person because tbl_BusinessEntity does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_PersonPhn ON tbl_PersonPhn FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_PersonPhn */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_PhnNbrTyp  tbl_PersonPhn on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002da9c", PARENT_OWNER="", PARENT_TABLE="tbl_PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePhoneNumberTypePhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
    IF EXISTS (SELECT * FROM deleted,tbl_PhnNbrTyp
      WHERE
        /* %JoinFKPK(deleted,tbl_PhnNbrTyp," = "," AND") */
        deleted.PhnNbrTypID = tbl_PhnNbrTyp.PhnNbrTypID AND
        NOT EXISTS (
          SELECT * FROM tbl_PersonPhn
          WHERE
            /* %JoinFKPK(tbl_PersonPhn,tbl_PhnNbrTyp," = "," AND") */
            tbl_PersonPhn.PhnNbrTypID = tbl_PhnNbrTyp.PhnNbrTypID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_PersonPhn because tbl_PhnNbrTyp exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_Person  tbl_PersonPhn on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
    IF EXISTS (SELECT * FROM deleted,tbl_Person
      WHERE
        /* %JoinFKPK(deleted,tbl_Person," = "," AND") */
        deleted.BusinessEntityID = tbl_Person.BusinessEntityID AND
        NOT EXISTS (
          SELECT * FROM tbl_PersonPhn
          WHERE
            /* %JoinFKPK(tbl_PersonPhn,tbl_Person," = "," AND") */
            tbl_PersonPhn.BusinessEntityID = tbl_Person.BusinessEntityID
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_PersonPhn because tbl_Person exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_PersonPhn ON tbl_PersonPhn FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_PersonPhn */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insBusinessEntityID int, 
           @insPhnNbr Phn, 
           @insPhnNbrTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_PhnNbrTyp  tbl_PersonPhn on child update no action */
  /* ERWIN_RELATION:CHECKSUM="0002f75b", PARENT_OWNER="", PARENT_TABLE="tbl_PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePhoneNumberTypePhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(PhnNbrTypID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_PhnNbrTyp
        WHERE
          /* %JoinFKPK(inserted,tbl_PhnNbrTyp) */
          inserted.PhnNbrTypID = tbl_PhnNbrTyp.PhnNbrTypID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_PersonPhn because tbl_PhnNbrTyp does not exist.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_Person  tbl_PersonPhn on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_Person"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePersonBusinessEntityID", FK_COLUMNS="BusinessEntityID" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(BusinessEntityID)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_Person
        WHERE
          /* %JoinFKPK(inserted,tbl_Person) */
          inserted.BusinessEntityID = tbl_Person.BusinessEntityID
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_PersonPhn because tbl_Person does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_PhnNbrTyp ON tbl_PhnNbrTyp FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_PhnNbrTyp */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_PhnNbrTyp  tbl_PersonPhn on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="00013754", PARENT_OWNER="", PARENT_TABLE="tbl_PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePhoneNumberTypePhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_PersonPhn
      WHERE
        /*  %JoinFKPK(tbl_PersonPhn,deleted," = "," AND") */
        tbl_PersonPhn.PhnNbrTypID = deleted.PhnNbrTypID
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_PhnNbrTyp because tbl_PersonPhn exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_PhnNbrTyp ON tbl_PhnNbrTyp FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_PhnNbrTyp */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insPhnNbrTypID int,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_PhnNbrTyp  tbl_PersonPhn on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0001594f", PARENT_OWNER="", PARENT_TABLE="tbl_PhnNbrTyp"
    CHILD_OWNER="", CHILD_TABLE="tbl_PersonPhn"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKPersonPhonePhoneNumberTypePhoneNumberTypeID", FK_COLUMNS="PhnNbrTypID" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(PhnNbrTypID)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_PersonPhn
      WHERE
        /*  %JoinFKPK(tbl_PersonPhn,deleted," = "," AND") */
        tbl_PersonPhn.PhnNbrTypID = deleted.PhnNbrTypID
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_PhnNbrTyp because tbl_PersonPhn exists.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go




CREATE TRIGGER tD_tbl_StProvince ON tbl_StProvince FOR DELETE AS
/* erwin Builtin Trigger */
/* DELETE trigger on tbl_StProvince */
BEGIN
  DECLARE  @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)
    /* erwin Builtin Trigger */
    /* tbl_StProvince  tbl_Addr on parent delete no action */
    /* ERWIN_RELATION:CHECKSUM="0002befe", PARENT_OWNER="", PARENT_TABLE="tbl_StProvince"
    CHILD_OWNER="", CHILD_TABLE="tbl_Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKAddressStateProvinceStateProvinceID", FK_COLUMNS="StProvinceID""StprovinceCd" */
    IF EXISTS (
      SELECT * FROM deleted,tbl_Addr
      WHERE
        /*  %JoinFKPK(tbl_Addr,deleted," = "," AND") */
        tbl_Addr.StProvinceID = deleted.StProvinceID AND
        tbl_Addr.StprovinceCd = deleted.StprovinceCd
    )
    BEGIN
      SELECT @errno  = 30001,
             @errmsg = 'Cannot delete tbl_StProvince because tbl_Addr exists.'
      GOTO error
    END

    /* erwin Builtin Trigger */
    /* tbl_CountryRgn  tbl_StProvince on child delete no action */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="tbl_StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKStateProvinceCountryRegionCountryRegionCode", FK_COLUMNS="CountryRgnCd" */
    IF EXISTS (SELECT * FROM deleted,tbl_CountryRgn
      WHERE
        /* %JoinFKPK(deleted,tbl_CountryRgn," = "," AND") */
        deleted.CountryRgnCd = tbl_CountryRgn.CountryRgnCd AND
        NOT EXISTS (
          SELECT * FROM tbl_StProvince
          WHERE
            /* %JoinFKPK(tbl_StProvince,tbl_CountryRgn," = "," AND") */
            tbl_StProvince.CountryRgnCd = tbl_CountryRgn.CountryRgnCd
        )
    )
    BEGIN
      SELECT @errno  = 30010,
             @errmsg = 'Cannot delete last tbl_StProvince because tbl_CountryRgn exists.'
      GOTO error
    END


    /* erwin Builtin Trigger */
    RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


CREATE TRIGGER tU_tbl_StProvince ON tbl_StProvince FOR UPDATE AS
/* erwin Builtin Trigger */
/* UPDATE trigger on tbl_StProvince */
BEGIN
  DECLARE  @numrows int,
           @nullcnt int,
           @validcnt int,
           @insStProvinceID int, 
           @insStprovinceCd Cd,
           @errno   int,
           @severity int,
           @state    int,
           @errmsg  varchar(255)

  SELECT @numrows = @@rowcount
  /* erwin Builtin Trigger */
  /* tbl_StProvince  tbl_Addr on parent update no action */
  /* ERWIN_RELATION:CHECKSUM="0002da46", PARENT_OWNER="", PARENT_TABLE="tbl_StProvince"
    CHILD_OWNER="", CHILD_TABLE="tbl_Addr"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKAddressStateProvinceStateProvinceID", FK_COLUMNS="StProvinceID""StprovinceCd" */
  IF
    /* %ParentPK(" OR",UPDATE) */
    UPDATE(StProvinceID) OR
    UPDATE(StprovinceCd)
  BEGIN
    IF EXISTS (
      SELECT * FROM deleted,tbl_Addr
      WHERE
        /*  %JoinFKPK(tbl_Addr,deleted," = "," AND") */
        tbl_Addr.StProvinceID = deleted.StProvinceID AND
        tbl_Addr.StprovinceCd = deleted.StprovinceCd
    )
    BEGIN
      SELECT @errno  = 30005,
             @errmsg = 'Cannot update tbl_StProvince because tbl_Addr exists.'
      GOTO error
    END
  END

  /* erwin Builtin Trigger */
  /* tbl_CountryRgn  tbl_StProvince on child update no action */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="tbl_CountryRgn"
    CHILD_OWNER="", CHILD_TABLE="tbl_StProvince"
    P2C_VERB_PHRASE="", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="FKStateProvinceCountryRegionCountryRegionCode", FK_COLUMNS="CountryRgnCd" */
  IF
    /* %ChildFK(" OR",UPDATE) */
    UPDATE(CountryRgnCd)
  BEGIN
    SELECT @nullcnt = 0
    SELECT @validcnt = count(*)
      FROM inserted,tbl_CountryRgn
        WHERE
          /* %JoinFKPK(inserted,tbl_CountryRgn) */
          inserted.CountryRgnCd = tbl_CountryRgn.CountryRgnCd
    /* %NotnullFK(inserted," IS NULL","select @nullcnt = count(*) from inserted where"," AND") */
    
    IF @validcnt + @nullcnt != @numrows
    BEGIN
      SELECT @errno  = 30007,
             @errmsg = 'Cannot update tbl_StProvince because tbl_CountryRgn does not exist.'
      GOTO error
    END
  END


  /* erwin Builtin Trigger */
  RETURN
error:
   RAISERROR (@errmsg, -- Message text.
              @severity, -- Severity (0~25).
              @state) -- State (0~255).
    rollback transaction
END

go


